<?xml version="1.0" ?><namespace name="Vcl.Controls" platform="Win32">
  <const name="CM_BASE" type="Integer" file="Vcl.Controls.pas" line="57">
    <value>
      $B000
    </value>
  </const>
  <const name="CM_CLROFFSET" type="Integer" file="Vcl.Controls.pas" line="61">
    <value>
      $0
    </value>
  </const>
  <const name="CM_ACTIVATE" type="Integer" file="Vcl.Controls.pas" line="63">
    <value>
      $B000
    </value>
  </const>
  <const name="CM_DEACTIVATE" type="Integer" file="Vcl.Controls.pas" line="64">
    <value>
      $B001
    </value>
  </const>
  <const name="CM_GOTFOCUS" type="Integer" file="Vcl.Controls.pas" line="65">
    <value>
      $B002
    </value>
  </const>
  <const name="CM_LOSTFOCUS" type="Integer" file="Vcl.Controls.pas" line="66">
    <value>
      $B003
    </value>
  </const>
  <const name="CM_CANCELMODE" type="Integer" file="Vcl.Controls.pas" line="67">
    <value>
      $B004
    </value>
  </const>
  <const name="CM_DIALOGKEY" type="Integer" file="Vcl.Controls.pas" line="68">
    <value>
      $B005
    </value>
  </const>
  <const name="CM_DIALOGCHAR" type="Integer" file="Vcl.Controls.pas" line="69">
    <value>
      $B006
    </value>
  </const>
  <const name="CM_FOCUSCHANGED" type="Integer" file="Vcl.Controls.pas" line="71">
    <value>
      $B007
    </value>
  </const>
  <const name="CM_PARENTFONTCHANGED" type="Integer" file="Vcl.Controls.pas" line="73">
    <value>
      $B008
    </value>
  </const>
  <const name="CM_PARENTCOLORCHANGED" type="Integer" file="Vcl.Controls.pas" line="74">
    <value>
      $B009
    </value>
  </const>
  <const name="CM_HITTEST" type="Integer" file="Vcl.Controls.pas" line="75">
    <value>
      $B00A
    </value>
  </const>
  <const name="CM_VISIBLECHANGED" type="Integer" file="Vcl.Controls.pas" line="76">
    <value>
      $B00B
    </value>
  </const>
  <const name="CM_ENABLEDCHANGED" type="Integer" file="Vcl.Controls.pas" line="77">
    <value>
      $B00C
    </value>
  </const>
  <const name="CM_COLORCHANGED" type="Integer" file="Vcl.Controls.pas" line="78">
    <value>
      $B00D
    </value>
  </const>
  <const name="CM_FONTCHANGED" type="Integer" file="Vcl.Controls.pas" line="79">
    <value>
      $B00E
    </value>
  </const>
  <const name="CM_CURSORCHANGED" type="Integer" file="Vcl.Controls.pas" line="80">
    <value>
      $B00F
    </value>
  </const>
  <const name="CM_CTL3DCHANGED" type="Integer" file="Vcl.Controls.pas" line="81">
    <value>
      $B010
    </value>
  </const>
  <const name="CM_PARENTCTL3DCHANGED" type="Integer" file="Vcl.Controls.pas" line="82">
    <value>
      $B011
    </value>
  </const>
  <const name="CM_TEXTCHANGED" type="Integer" file="Vcl.Controls.pas" line="83">
    <value>
      $B012
    </value>
  </const>
  <const name="CM_MOUSEENTER" type="Integer" file="Vcl.Controls.pas" line="84">
    <value>
      $B013
    </value>
  </const>
  <const name="CM_MOUSELEAVE" type="Integer" file="Vcl.Controls.pas" line="85">
    <value>
      $B014
    </value>
  </const>
  <const name="CM_MENUCHANGED" type="Integer" file="Vcl.Controls.pas" line="86">
    <value>
      $B015
    </value>
  </const>
  <const name="CM_APPKEYDOWN" type="Integer" file="Vcl.Controls.pas" line="87">
    <value>
      $B016
    </value>
  </const>
  <const name="CM_APPSYSCOMMAND" type="Integer" file="Vcl.Controls.pas" line="88">
    <value>
      $B017
    </value>
  </const>
  <const name="CM_BUTTONPRESSED" type="Integer" file="Vcl.Controls.pas" line="89">
    <value>
      $B018
    </value>
  </const>
  <const name="CM_SHOWINGCHANGED" type="Integer" file="Vcl.Controls.pas" line="90">
    <value>
      $B019
    </value>
  </const>
  <const name="CM_ENTER" type="Integer" file="Vcl.Controls.pas" line="91">
    <value>
      $B01A
    </value>
  </const>
  <const name="CM_EXIT" type="Integer" file="Vcl.Controls.pas" line="92">
    <value>
      $B01B
    </value>
  </const>
  <const name="CM_DESIGNHITTEST" type="Integer" file="Vcl.Controls.pas" line="93">
    <value>
      $B01C
    </value>
  </const>
  <const name="CM_ICONCHANGED" type="Integer" file="Vcl.Controls.pas" line="94">
    <value>
      $B01D
    </value>
  </const>
  <const name="CM_WANTSPECIALKEY" type="Integer" file="Vcl.Controls.pas" line="95">
    <value>
      $B01E
    </value>
  </const>
  <const name="CM_INVOKEHELP" type="Integer" file="Vcl.Controls.pas" line="96">
    <value>
      $B01F
    </value>
  </const>
  <const name="CM_WINDOWHOOK" type="Integer" file="Vcl.Controls.pas" line="97">
    <value>
      $B020
    </value>
  </const>
  <const name="CM_RELEASE" type="Integer" file="Vcl.Controls.pas" line="98">
    <value>
      $B021
    </value>
  </const>
  <const name="CM_SHOWHINTCHANGED" type="Integer" file="Vcl.Controls.pas" line="99">
    <value>
      $B022
    </value>
  </const>
  <const name="CM_PARENTSHOWHINTCHANGED" type="Integer" file="Vcl.Controls.pas" line="100">
    <value>
      $B023
    </value>
  </const>
  <const name="CM_SYSCOLORCHANGE" type="Integer" file="Vcl.Controls.pas" line="101">
    <value>
      $B024
    </value>
  </const>
  <const name="CM_WININICHANGE" type="Integer" file="Vcl.Controls.pas" line="102">
    <value>
      $B025
    </value>
  </const>
  <const name="CM_FONTCHANGE" type="Integer" file="Vcl.Controls.pas" line="103">
    <value>
      $B026
    </value>
  </const>
  <const name="CM_TIMECHANGE" type="Integer" file="Vcl.Controls.pas" line="104">
    <value>
      $B027
    </value>
  </const>
  <const name="CM_TABSTOPCHANGED" type="Integer" file="Vcl.Controls.pas" line="105">
    <value>
      $B028
    </value>
  </const>
  <const name="CM_UIACTIVATE" type="Integer" file="Vcl.Controls.pas" line="106">
    <value>
      $B029
    </value>
  </const>
  <const name="CM_UIDEACTIVATE" type="Integer" file="Vcl.Controls.pas" line="107">
    <value>
      $B02A
    </value>
  </const>
  <const name="CM_DOCWINDOWACTIVATE" type="Integer" file="Vcl.Controls.pas" line="108">
    <value>
      $B02B
    </value>
  </const>
  <const name="CM_CONTROLLISTCHANGE" type="Integer" file="Vcl.Controls.pas" line="110">
    <value>
      $B02C
    </value>
  </const>
  <const name="CM_GETDATALINK" type="Integer" file="Vcl.Controls.pas" line="111">
    <value>
      $B02D
    </value>
  </const>
  <const name="CM_CHILDKEY" type="Integer" file="Vcl.Controls.pas" line="113">
    <value>
      $B02E
    </value>
  </const>
  <const name="CM_DRAG" type="Integer" file="Vcl.Controls.pas" line="114">
    <value>
      $B02F
    </value>
  </const>
  <const name="CM_HINTSHOW" type="Integer" file="Vcl.Controls.pas" line="115">
    <value>
      $B030
    </value>
  </const>
  <const name="CM_DIALOGHANDLE" type="Integer" file="Vcl.Controls.pas" line="116">
    <value>
      $B031
    </value>
  </const>
  <const name="CM_ISTOOLCONTROL" type="Integer" file="Vcl.Controls.pas" line="117">
    <value>
      $B032
    </value>
  </const>
  <const name="CM_RECREATEWND" type="Integer" file="Vcl.Controls.pas" line="118">
    <value>
      $B033
    </value>
  </const>
  <const name="CM_INVALIDATE" type="Integer" file="Vcl.Controls.pas" line="119">
    <value>
      $B034
    </value>
  </const>
  <const name="CM_SYSFONTCHANGED" type="Integer" file="Vcl.Controls.pas" line="120">
    <value>
      $B035
    </value>
  </const>
  <const name="CM_CONTROLCHANGE" type="Integer" file="Vcl.Controls.pas" line="122">
    <value>
      $B036
    </value>
  </const>
  <const name="CM_CHANGED" type="Integer" file="Vcl.Controls.pas" line="124">
    <value>
      $B037
    </value>
  </const>
  <const name="CM_DOCKCLIENT" type="Integer" file="Vcl.Controls.pas" line="126">
    <value>
      $B038
    </value>
  </const>
  <const name="CM_UNDOCKCLIENT" type="Integer" file="Vcl.Controls.pas" line="127">
    <value>
      $B039
    </value>
  </const>
  <const name="CM_FLOAT" type="Integer" file="Vcl.Controls.pas" line="128">
    <value>
      $B03A
    </value>
  </const>
  <const name="CM_BORDERCHANGED" type="Integer" file="Vcl.Controls.pas" line="130">
    <value>
      $B03B
    </value>
  </const>
  <const name="CM_BIDIMODECHANGED" type="Integer" file="Vcl.Controls.pas" line="131">
    <value>
      $B03C
    </value>
  </const>
  <const name="CM_PARENTBIDIMODECHANGED" type="Integer" file="Vcl.Controls.pas" line="132">
    <value>
      $B03D
    </value>
  </const>
  <const name="CM_ALLCHILDRENFLIPPED" type="Integer" file="Vcl.Controls.pas" line="133">
    <value>
      $B03E
    </value>
  </const>
  <const name="CM_ACTIONUPDATE" type="Integer" file="Vcl.Controls.pas" line="135">
    <value>
      $B03F
    </value>
  </const>
  <const name="CM_ACTIONEXECUTE" type="Integer" file="Vcl.Controls.pas" line="136">
    <value>
      $B040
    </value>
  </const>
  <const name="CM_HINTSHOWPAUSE" type="Integer" file="Vcl.Controls.pas" line="138">
    <value>
      $B041
    </value>
  </const>
  <const name="CM_DOCKNOTIFICATION" type="Integer" file="Vcl.Controls.pas" line="139">
    <value>
      $B042
    </value>
  </const>
  <const name="CM_MOUSEWHEEL" type="Integer" file="Vcl.Controls.pas" line="140">
    <value>
      $B043
    </value>
  </const>
  <const name="CM_ISSHORTCUT" type="Integer" file="Vcl.Controls.pas" line="141">
    <value>
      $B044
    </value>
  </const>
  <const name="CM_UPDATEACTIONS" type="Integer" file="Vcl.Controls.pas" line="142">
    <value>
      $B045
    </value>
  </const>
  <const name="CM_INVALIDATEDOCKHOST" type="Integer" file="Vcl.Controls.pas" line="146">
    <value>
      $B046
    </value>
  </const>
  <const name="CM_SETACTIVECONTROL" type="Integer" file="Vcl.Controls.pas" line="147">
    <value>
      $B047
    </value>
  </const>
  <const name="CM_POPUPHWNDDESTROY" type="Integer" file="Vcl.Controls.pas" line="148">
    <value>
      $B048
    </value>
  </const>
  <const name="CM_CREATEPOPUP" type="Integer" file="Vcl.Controls.pas" line="149">
    <value>
      $B049
    </value>
  </const>
  <const name="CM_DESTROYHANDLE" type="Integer" file="Vcl.Controls.pas" line="150">
    <value>
      $B04A
    </value>
  </const>
  <const name="CM_MOUSEACTIVATE" type="Integer" file="Vcl.Controls.pas" line="151">
    <value>
      $B04B
    </value>
  </const>
  <const name="CM_CONTROLLISTCHANGING" type="Integer" file="Vcl.Controls.pas" line="153">
    <value>
      $B04C
    </value>
  </const>
  <const name="CM_BUFFEREDPRINTCLIENT" type="Integer" file="Vcl.Controls.pas" line="155">
    <value>
      $B04D
    </value>
  </const>
  <const name="CM_UNTHEMECONTROL" type="Integer" file="Vcl.Controls.pas" line="156">
    <value>
      $B04E
    </value>
  </const>
  <const name="CM_DOUBLEBUFFEREDCHANGED" type="Integer" file="Vcl.Controls.pas" line="157">
    <value>
      $B04F
    </value>
  </const>
  <const name="CM_PARENTDOUBLEBUFFEREDCHANGED" type="Integer" file="Vcl.Controls.pas" line="158">
    <value>
      $B050
    </value>
  </const>
  <const name="CM_STYLECHANGED" type="Integer" file="Vcl.Controls.pas" line="159">
    <value>
      $B051
    </value>
  </const>
  <const name="CM_THEMECHANGED" type="Integer" file="Vcl.Controls.pas" line="160" symflags="deprecated">
    <value>
      $B051
    </value>
  </const>
  <const name="CM_GESTURE" type="Integer" file="Vcl.Controls.pas" line="161">
    <value>
      $B052
    </value>
  </const>
  <const name="CM_CUSTOMGESTURESCHANGED" type="Integer" file="Vcl.Controls.pas" line="162">
    <value>
      $B053
    </value>
  </const>
  <const name="CM_GESTUREMANAGERCHANGED" type="Integer" file="Vcl.Controls.pas" line="163">
    <value>
      $B054
    </value>
  </const>
  <const name="CM_STANDARDGESTURESCHANGED" type="Integer" file="Vcl.Controls.pas" line="164">
    <value>
      $B055
    </value>
  </const>
  <const name="CM_INPUTLANGCHANGE" type="Integer" file="Vcl.Controls.pas" line="165">
    <value>
      $B056
    </value>
  </const>
  <const name="CM_TABLETOPTIONSCHANGED" type="Integer" file="Vcl.Controls.pas" line="166">
    <value>
      $B057
    </value>
  </const>
  <const name="CM_PARENTTABLETOPTIONSCHANGED" type="Integer" file="Vcl.Controls.pas" line="167">
    <value>
      $B058
    </value>
  </const>
  <const name="CM_CUSTOMSTYLECHANGED" type="Integer" file="Vcl.Controls.pas" line="168">
    <value>
      $B059
    </value>
  </const>
  <const name="CM_SYSFONTSALLCHANGED" type="Integer" file="Vcl.Controls.pas" line="169">
    <value>
      $B05A
    </value>
  </const>
  <const name="CM_PARENTVISIBLECHANGED" type="Integer" file="Vcl.Controls.pas" line="170">
    <value>
      $B05B
    </value>
  </const>
  <const name="CM_SYSCOMMAND" type="Integer" file="Vcl.Controls.pas" line="171">
    <value>
      $B05C
    </value>
  </const>
  <const name="CM_REMOTESESSIONSTATUSCHANGED" type="Integer" file="Vcl.Controls.pas" line="172">
    <value>
      $B05D
    </value>
  </const>
  <const name="CN_BASE" type="Integer" file="Vcl.Controls.pas" line="177">
    <value>
      $BC00
    </value>
  </const>
  <const name="CN_CHARTOITEM" type="Integer" file="Vcl.Controls.pas" line="178">
    <value>
      $BC2F
    </value>
  </const>
  <const name="CN_COMMAND" type="Integer" file="Vcl.Controls.pas" line="179">
    <value>
      $BD11
    </value>
  </const>
  <const name="CN_COMPAREITEM" type="Integer" file="Vcl.Controls.pas" line="180">
    <value>
      $BC39
    </value>
  </const>
  <const name="CN_CTLCOLORBTN" type="Integer" file="Vcl.Controls.pas" line="181">
    <value>
      $BD35
    </value>
  </const>
  <const name="CN_CTLCOLORDLG" type="Integer" file="Vcl.Controls.pas" line="182">
    <value>
      $BD36
    </value>
  </const>
  <const name="CN_CTLCOLOREDIT" type="Integer" file="Vcl.Controls.pas" line="183">
    <value>
      $BD33
    </value>
  </const>
  <const name="CN_CTLCOLORLISTBOX" type="Integer" file="Vcl.Controls.pas" line="184">
    <value>
      $BD34
    </value>
  </const>
  <const name="CN_CTLCOLORMSGBOX" type="Integer" file="Vcl.Controls.pas" line="185">
    <value>
      $BD32
    </value>
  </const>
  <const name="CN_CTLCOLORSCROLLBAR" type="Integer" file="Vcl.Controls.pas" line="186">
    <value>
      $BD37
    </value>
  </const>
  <const name="CN_CTLCOLORSTATIC" type="Integer" file="Vcl.Controls.pas" line="187">
    <value>
      $BD38
    </value>
  </const>
  <const name="CN_DELETEITEM" type="Integer" file="Vcl.Controls.pas" line="188">
    <value>
      $BC2D
    </value>
  </const>
  <const name="CN_DRAWITEM" type="Integer" file="Vcl.Controls.pas" line="189">
    <value>
      $BC2B
    </value>
  </const>
  <const name="CN_HSCROLL" type="Integer" file="Vcl.Controls.pas" line="190">
    <value>
      $BD14
    </value>
  </const>
  <const name="CN_MEASUREITEM" type="Integer" file="Vcl.Controls.pas" line="191">
    <value>
      $BC2C
    </value>
  </const>
  <const name="CN_PARENTNOTIFY" type="Integer" file="Vcl.Controls.pas" line="192">
    <value>
      $BE10
    </value>
  </const>
  <const name="CN_VKEYTOITEM" type="Integer" file="Vcl.Controls.pas" line="193">
    <value>
      $BC2E
    </value>
  </const>
  <const name="CN_VSCROLL" type="Integer" file="Vcl.Controls.pas" line="194">
    <value>
      $BD15
    </value>
  </const>
  <const name="CN_KEYDOWN" type="Integer" file="Vcl.Controls.pas" line="195">
    <value>
      $BD00
    </value>
  </const>
  <const name="CN_KEYUP" type="Integer" file="Vcl.Controls.pas" line="196">
    <value>
      $BD01
    </value>
  </const>
  <const name="CN_CHAR" type="Integer" file="Vcl.Controls.pas" line="197">
    <value>
      $BD02
    </value>
  </const>
  <const name="CN_SYSKEYDOWN" type="Integer" file="Vcl.Controls.pas" line="198">
    <value>
      $BD04
    </value>
  </const>
  <const name="CN_SYSCHAR" type="Integer" file="Vcl.Controls.pas" line="199">
    <value>
      $BD06
    </value>
  </const>
  <const name="CN_NOTIFY" type="Integer" file="Vcl.Controls.pas" line="200">
    <value>
      $BC4E
    </value>
  </const>
  <const name="akLeft" type="TAnchorKind" file="Vcl.Controls.pas" line="205">
    <value>
      akLeft
    </value>
  </const>
  <const name="akTop" type="TAnchorKind" file="Vcl.Controls.pas" line="206">
    <value>
      akTop
    </value>
  </const>
  <const name="akRight" type="TAnchorKind" file="Vcl.Controls.pas" line="207">
    <value>
      akRight
    </value>
  </const>
  <const name="akBottom" type="TAnchorKind" file="Vcl.Controls.pas" line="208">
    <value>
      akBottom
    </value>
  </const>
  <const name="mrNone" type="Integer" file="Vcl.Controls.pas" line="213">
    <value>
      $0
    </value>
  </const>
  <const name="mrOk" type="Integer" file="Vcl.Controls.pas" line="215">
    <value>
      $1
    </value>
  </const>
  <const name="mrCancel" type="Integer" file="Vcl.Controls.pas" line="217">
    <value>
      $2
    </value>
  </const>
  <const name="mrAbort" type="Integer" file="Vcl.Controls.pas" line="219">
    <value>
      $3
    </value>
  </const>
  <const name="mrRetry" type="Integer" file="Vcl.Controls.pas" line="221">
    <value>
      $4
    </value>
  </const>
  <const name="mrIgnore" type="Integer" file="Vcl.Controls.pas" line="223">
    <value>
      $5
    </value>
  </const>
  <const name="mrYes" type="Integer" file="Vcl.Controls.pas" line="225">
    <value>
      $6
    </value>
  </const>
  <const name="mrNo" type="Integer" file="Vcl.Controls.pas" line="227">
    <value>
      $7
    </value>
  </const>
  <const name="mrAll" type="Integer" file="Vcl.Controls.pas" line="229">
    <value>
      $C
    </value>
  </const>
  <const name="mrNoToAll" type="Integer" file="Vcl.Controls.pas" line="231">
    <value>
      $D
    </value>
  </const>
  <const name="mrYesToAll" type="Integer" file="Vcl.Controls.pas" line="233">
    <value>
      $E
    </value>
  </const>
  <const name="mrClose" type="Integer" file="Vcl.Controls.pas" line="235">
    <value>
      $8
    </value>
  </const>
  <type name="TModalResult" type="integer" loBound="-2147483648" hiBound="2147483647" file="System.UITypes.pas" line="112"/>
  <type name="TCursor" type="TCursor" loBound="-32768" hiBound="32767" file="System.UITypes.pas" line="128"/>
  <const name="crDefault" type="Integer" file="Vcl.Controls.pas" line="276">
    <value>
      $0
    </value>
  </const>
  <const name="crNone" type="Integer" file="Vcl.Controls.pas" line="278">
    <value>
      $FFFFFFFF
    </value>
  </const>
  <const name="crArrow" type="Integer" file="Vcl.Controls.pas" line="280">
    <value>
      $FFFFFFFE
    </value>
  </const>
  <const name="crCross" type="Integer" file="Vcl.Controls.pas" line="282">
    <value>
      $FFFFFFFD
    </value>
  </const>
  <const name="crIBeam" type="Integer" file="Vcl.Controls.pas" line="284">
    <value>
      $FFFFFFFC
    </value>
  </const>
  <const name="crSize" type="Integer" file="Vcl.Controls.pas" line="286">
    <value>
      $FFFFFFEA
    </value>
  </const>
  <const name="crSizeNESW" type="Integer" file="Vcl.Controls.pas" line="288">
    <value>
      $FFFFFFFA
    </value>
  </const>
  <const name="crSizeNS" type="Integer" file="Vcl.Controls.pas" line="290">
    <value>
      $FFFFFFF9
    </value>
  </const>
  <const name="crSizeNWSE" type="Integer" file="Vcl.Controls.pas" line="292">
    <value>
      $FFFFFFF8
    </value>
  </const>
  <const name="crSizeWE" type="Integer" file="Vcl.Controls.pas" line="294">
    <value>
      $FFFFFFF7
    </value>
  </const>
  <const name="crUpArrow" type="Integer" file="Vcl.Controls.pas" line="296">
    <value>
      $FFFFFFF6
    </value>
  </const>
  <const name="crHourGlass" type="Integer" file="Vcl.Controls.pas" line="298">
    <value>
      $FFFFFFF5
    </value>
  </const>
  <const name="crDrag" type="Integer" file="Vcl.Controls.pas" line="300">
    <value>
      $FFFFFFF4
    </value>
  </const>
  <const name="crNoDrop" type="Integer" file="Vcl.Controls.pas" line="302">
    <value>
      $FFFFFFF3
    </value>
  </const>
  <const name="crHSplit" type="Integer" file="Vcl.Controls.pas" line="304">
    <value>
      $FFFFFFF2
    </value>
  </const>
  <const name="crVSplit" type="Integer" file="Vcl.Controls.pas" line="306">
    <value>
      $FFFFFFF1
    </value>
  </const>
  <const name="crMultiDrag" type="Integer" file="Vcl.Controls.pas" line="308">
    <value>
      $FFFFFFF0
    </value>
  </const>
  <const name="crSQLWait" type="Integer" file="Vcl.Controls.pas" line="310">
    <value>
      $FFFFFFEF
    </value>
  </const>
  <const name="crNo" type="Integer" file="Vcl.Controls.pas" line="312">
    <value>
      $FFFFFFEE
    </value>
  </const>
  <const name="crAppStart" type="Integer" file="Vcl.Controls.pas" line="314">
    <value>
      $FFFFFFED
    </value>
  </const>
  <const name="crHelp" type="Integer" file="Vcl.Controls.pas" line="316">
    <value>
      $FFFFFFEC
    </value>
  </const>
  <const name="crHandPoint" type="Integer" file="Vcl.Controls.pas" line="318">
    <value>
      $FFFFFFEB
    </value>
  </const>
  <const name="crSizeAll" type="Integer" file="Vcl.Controls.pas" line="320">
    <value>
      $FFFFFFEA
    </value>
  </const>
  <const name="sgiNoGesture" type="Integer" file="Vcl.Controls.pas" line="351">
    <value>
      $0
    </value>
  </const>
  <const name="sgiLeft" type="Integer" file="Vcl.Controls.pas" line="352">
    <value>
      $1
    </value>
  </const>
  <const name="sgiRight" type="Integer" file="Vcl.Controls.pas" line="353">
    <value>
      $2
    </value>
  </const>
  <const name="sgiUp" type="Integer" file="Vcl.Controls.pas" line="354">
    <value>
      $3
    </value>
  </const>
  <const name="sgiDown" type="Integer" file="Vcl.Controls.pas" line="355">
    <value>
      $4
    </value>
  </const>
  <const name="sgiUpLeft" type="Integer" file="Vcl.Controls.pas" line="356">
    <value>
      $5
    </value>
  </const>
  <const name="sgiUpRight" type="Integer" file="Vcl.Controls.pas" line="357">
    <value>
      $6
    </value>
  </const>
  <const name="sgiDownLeft" type="Integer" file="Vcl.Controls.pas" line="358">
    <value>
      $7
    </value>
  </const>
  <const name="sgiDownRight" type="Integer" file="Vcl.Controls.pas" line="359">
    <value>
      $8
    </value>
  </const>
  <const name="sgiLeftUp" type="Integer" file="Vcl.Controls.pas" line="360">
    <value>
      $9
    </value>
  </const>
  <const name="sgiLeftDown" type="Integer" file="Vcl.Controls.pas" line="361">
    <value>
      $A
    </value>
  </const>
  <const name="sgiRightUp" type="Integer" file="Vcl.Controls.pas" line="362">
    <value>
      $B
    </value>
  </const>
  <const name="sgiRightDown" type="Integer" file="Vcl.Controls.pas" line="363">
    <value>
      $C
    </value>
  </const>
  <const name="sgiUpDown" type="Integer" file="Vcl.Controls.pas" line="364">
    <value>
      $D
    </value>
  </const>
  <const name="sgiDownUp" type="Integer" file="Vcl.Controls.pas" line="365">
    <value>
      $E
    </value>
  </const>
  <const name="sgiLeftRight" type="Integer" file="Vcl.Controls.pas" line="366">
    <value>
      $F
    </value>
  </const>
  <const name="sgiRightLeft" type="Integer" file="Vcl.Controls.pas" line="367">
    <value>
      $10
    </value>
  </const>
  <const name="sgiUpLeftLong" type="Integer" file="Vcl.Controls.pas" line="368">
    <value>
      $11
    </value>
  </const>
  <const name="sgiUpRightLong" type="Integer" file="Vcl.Controls.pas" line="369">
    <value>
      $12
    </value>
  </const>
  <const name="sgiDownLeftLong" type="Integer" file="Vcl.Controls.pas" line="370">
    <value>
      $13
    </value>
  </const>
  <const name="sgiDownRightLong" type="Integer" file="Vcl.Controls.pas" line="371">
    <value>
      $14
    </value>
  </const>
  <const name="sgiScratchout" type="Integer" file="Vcl.Controls.pas" line="372">
    <value>
      $15
    </value>
  </const>
  <const name="sgiTriangle" type="Integer" file="Vcl.Controls.pas" line="373">
    <value>
      $16
    </value>
  </const>
  <const name="sgiSquare" type="Integer" file="Vcl.Controls.pas" line="374">
    <value>
      $17
    </value>
  </const>
  <const name="sgiCheck" type="Integer" file="Vcl.Controls.pas" line="375">
    <value>
      $18
    </value>
  </const>
  <const name="sgiCurlicue" type="Integer" file="Vcl.Controls.pas" line="376">
    <value>
      $19
    </value>
  </const>
  <const name="sgiDoubleCurlicue" type="Integer" file="Vcl.Controls.pas" line="377">
    <value>
      $1A
    </value>
  </const>
  <const name="sgiCircle" type="Integer" file="Vcl.Controls.pas" line="378">
    <value>
      $1B
    </value>
  </const>
  <const name="sgiDoubleCircle" type="Integer" file="Vcl.Controls.pas" line="379">
    <value>
      $1C
    </value>
  </const>
  <const name="sgiSemiCircleLeft" type="Integer" file="Vcl.Controls.pas" line="380">
    <value>
      $1D
    </value>
  </const>
  <const name="sgiSemiCircleRight" type="Integer" file="Vcl.Controls.pas" line="381">
    <value>
      $1E
    </value>
  </const>
  <const name="sgiChevronUp" type="Integer" file="Vcl.Controls.pas" line="382">
    <value>
      $1F
    </value>
  </const>
  <const name="sgiChevronDown" type="Integer" file="Vcl.Controls.pas" line="383">
    <value>
      $20
    </value>
  </const>
  <const name="sgiChevronLeft" type="Integer" file="Vcl.Controls.pas" line="384">
    <value>
      $21
    </value>
  </const>
  <const name="sgiChevronRight" type="Integer" file="Vcl.Controls.pas" line="385">
    <value>
      $22
    </value>
  </const>
  <const name="sgiFirst" type="Integer" file="Vcl.Controls.pas" line="386">
    <value>
      $1
    </value>
  </const>
  <const name="sgiLast" type="Integer" file="Vcl.Controls.pas" line="387">
    <value>
      $22
    </value>
  </const>
  <const name="cgiFirst" type="Integer" file="Vcl.Controls.pas" line="390">
    <value>
      $FFFFFE00
    </value>
  </const>
  <const name="cgiLast" type="Integer" file="Vcl.Controls.pas" line="391">
    <value>
      $FFFFFFFF
    </value>
  </const>
  <const name="rgiFirst" type="Integer" file="Vcl.Controls.pas" line="394">
    <value>
      $FFFFFC00
    </value>
  </const>
  <const name="rgiLast" type="Integer" file="Vcl.Controls.pas" line="395">
    <value>
      $FFFFFDFF
    </value>
  </const>
  <const name="igiFirst" type="Integer" file="Vcl.Controls.pas" line="398">
    <value>
      $100
    </value>
  </const>
  <const name="igiLast" type="Integer" file="Vcl.Controls.pas" line="399">
    <value>
      $1FF
    </value>
  </const>
  <const name="igiBegin" type="Integer" file="Vcl.Controls.pas" line="400">
    <value>
      $101
    </value>
  </const>
  <const name="igiEnd" type="Integer" file="Vcl.Controls.pas" line="401">
    <value>
      $102
    </value>
  </const>
  <const name="igiZoom" type="Integer" file="Vcl.Controls.pas" line="402">
    <value>
      $103
    </value>
  </const>
  <const name="igiPan" type="Integer" file="Vcl.Controls.pas" line="403">
    <value>
      $104
    </value>
  </const>
  <const name="igiRotate" type="Integer" file="Vcl.Controls.pas" line="404">
    <value>
      $105
    </value>
  </const>
  <const name="igiTwoFingerTap" type="Integer" file="Vcl.Controls.pas" line="405">
    <value>
      $106
    </value>
  </const>
  <const name="igiPressAndTap" type="Integer" file="Vcl.Controls.pas" line="406">
    <value>
      $107
    </value>
  </const>
  <const name="gcnRefreshAll" type="Integer" file="Vcl.Controls.pas" line="409">
    <value>
      $0
    </value>
  </const>
  <const name="gcnAdded" type="Integer" file="Vcl.Controls.pas" line="410">
    <value>
      $1
    </value>
  </const>
  <const name="gcnRemoved" type="Integer" file="Vcl.Controls.pas" line="411">
    <value>
      $2
    </value>
  </const>
  <const name="gcnModified" type="Integer" file="Vcl.Controls.pas" line="412">
    <value>
      $3
    </value>
  </const>
  <const name="dmAutomatic" type="TDragMode" file="Vcl.Controls.pas" line="416">
    <value>
      dmAutomatic
    </value>
  </const>
  <const name="dmManual" type="TDragMode" file="Vcl.Controls.pas" line="417">
    <value>
      dmManual
    </value>
  </const>
  <const name="dsDragEnter" type="TDragState" file="Vcl.Controls.pas" line="418">
    <value>
      dsDragEnter
    </value>
  </const>
  <const name="dsDragLeave" type="TDragState" file="Vcl.Controls.pas" line="419">
    <value>
      dsDragLeave
    </value>
  </const>
  <const name="dsDragMove" type="TDragState" file="Vcl.Controls.pas" line="420">
    <value>
      dsDragMove
    </value>
  </const>
  <const name="dkDrag" type="TDragKind" file="Vcl.Controls.pas" line="421">
    <value>
      dkDrag
    </value>
  </const>
  <const name="dkDock" type="TDragKind" file="Vcl.Controls.pas" line="422">
    <value>
      dkDock
    </value>
  </const>
  <const name="maDefault" type="TMouseActivate" file="Vcl.Controls.pas" line="423">
    <value>
      maDefault
    </value>
  </const>
  <const name="maActivate" type="TMouseActivate" file="Vcl.Controls.pas" line="424">
    <value>
      maActivate
    </value>
  </const>
  <const name="maActivateAndEat" type="TMouseActivate" file="Vcl.Controls.pas" line="425">
    <value>
      maActivateAndEat
    </value>
  </const>
  <const name="maNoActivate" type="TMouseActivate" file="Vcl.Controls.pas" line="426">
    <value>
      maNoActivate
    </value>
  </const>
  <const name="maNoActivateAndEat" type="TMouseActivate" file="Vcl.Controls.pas" line="427">
    <value>
      maNoActivateAndEat
    </value>
  </const>
  <const name="mbLeft" type="TMouseButton" file="Vcl.Controls.pas" line="429">
    <value>
      mbLeft
    </value>
  </const>
  <const name="mbRight" type="TMouseButton" file="Vcl.Controls.pas" line="430">
    <value>
      mbRight
    </value>
  </const>
  <const name="mbMiddle" type="TMouseButton" file="Vcl.Controls.pas" line="431">
    <value>
      mbMiddle
    </value>
  </const>
  <const name="gfBegin" type="TInteractiveGestureFlag" file="Vcl.Controls.pas" line="435">
    <value>
      gfBegin
    </value>
  </const>
  <const name="gfInertia" type="TInteractiveGestureFlag" file="Vcl.Controls.pas" line="435">
    <value>
      gfInertia
    </value>
  </const>
  <const name="gfEnd" type="TInteractiveGestureFlag" file="Vcl.Controls.pas" line="435">
    <value>
      gfEnd
    </value>
  </const>
  <const name="igZoom" type="TInteractiveGesture" file="Vcl.Controls.pas" line="438">
    <value>
      igZoom
    </value>
  </const>
  <const name="igPan" type="TInteractiveGesture" file="Vcl.Controls.pas" line="438">
    <value>
      igPan
    </value>
  </const>
  <const name="igRotate" type="TInteractiveGesture" file="Vcl.Controls.pas" line="438">
    <value>
      igRotate
    </value>
  </const>
  <const name="igTwoFingerTap" type="TInteractiveGesture" file="Vcl.Controls.pas" line="438">
    <value>
      igTwoFingerTap
    </value>
  </const>
  <const name="igPressAndTap" type="TInteractiveGesture" file="Vcl.Controls.pas" line="438">
    <value>
      igPressAndTap
    </value>
  </const>
  <const name="igoPanSingleFingerHorizontal" type="TInteractiveGestureOption" file="Vcl.Controls.pas" line="441">
    <value>
      igoPanSingleFingerHorizontal
    </value>
  </const>
  <const name="igoPanSingleFingerVertical" type="TInteractiveGestureOption" file="Vcl.Controls.pas" line="442">
    <value>
      igoPanSingleFingerVertical
    </value>
  </const>
  <const name="igoPanInertia" type="TInteractiveGestureOption" file="Vcl.Controls.pas" line="442">
    <value>
      igoPanInertia
    </value>
  </const>
  <const name="igoPanGutter" type="TInteractiveGestureOption" file="Vcl.Controls.pas" line="442">
    <value>
      igoPanGutter
    </value>
  </const>
  <const name="igoParentPassthrough" type="TInteractiveGestureOption" file="Vcl.Controls.pas" line="443">
    <value>
      igoParentPassthrough
    </value>
  </const>
  <enum name="TInteractiveGestureFlag" file="Vcl.Controls.pas" line="435">
    <element value="0" name="gfBegin" file="Vcl.Controls.pas" line="435"/>
    <element value="1" name="gfInertia" file="Vcl.Controls.pas" line="435"/>
    <element value="2" name="gfEnd" file="Vcl.Controls.pas" line="435"/>
  </enum>
  <set name="TInteractiveGestureFlags" type="TInteractiveGestureFlag" file="Vcl.Controls.pas" line="436">
    <element name="gfBegin"/>
    <element name="gfInertia"/>
    <element name="gfEnd"/>
  </set>
  <enum name="TInteractiveGesture" file="Vcl.Controls.pas" line="438">
    <element value="0" name="igZoom" file="Vcl.Controls.pas" line="438"/>
    <element value="1" name="igPan" file="Vcl.Controls.pas" line="438"/>
    <element value="2" name="igRotate" file="Vcl.Controls.pas" line="438"/>
    <element value="3" name="igTwoFingerTap" file="Vcl.Controls.pas" line="438"/>
    <element value="4" name="igPressAndTap" file="Vcl.Controls.pas" line="438"/>
  </enum>
  <set name="TInteractiveGestures" type="TInteractiveGesture" file="Vcl.Controls.pas" line="439">
    <element name="igZoom"/>
    <element name="igPan"/>
    <element name="igRotate"/>
    <element name="igTwoFingerTap"/>
    <element name="igPressAndTap"/>
  </set>
  <enum name="TInteractiveGestureOption" file="Vcl.Controls.pas" line="441">
    <element value="0" name="igoPanSingleFingerHorizontal" file="Vcl.Controls.pas" line="441"/>
    <element value="1" name="igoPanSingleFingerVertical" file="Vcl.Controls.pas" line="442"/>
    <element value="2" name="igoPanInertia" file="Vcl.Controls.pas" line="442"/>
    <element value="3" name="igoPanGutter" file="Vcl.Controls.pas" line="442"/>
    <element value="4" name="igoParentPassthrough" file="Vcl.Controls.pas" line="443"/>
  </enum>
  <set name="TInteractiveGestureOptions" type="TInteractiveGestureOption" file="Vcl.Controls.pas" line="444">
    <element name="igoPanSingleFingerHorizontal"/>
    <element name="igoPanSingleFingerVertical"/>
    <element name="igoPanInertia"/>
    <element name="igoPanGutter"/>
    <element name="igoParentPassthrough"/>
  </set>
  <const name="dmDragEnter" type="TDragMessage" file="Vcl.Controls.pas" line="700">
    <value>
      dmDragEnter
    </value>
  </const>
  <const name="dmDragLeave" type="TDragMessage" file="Vcl.Controls.pas" line="700">
    <value>
      dmDragLeave
    </value>
  </const>
  <const name="dmDragMove" type="TDragMessage" file="Vcl.Controls.pas" line="700">
    <value>
      dmDragMove
    </value>
  </const>
  <const name="dmDragDrop" type="TDragMessage" file="Vcl.Controls.pas" line="700">
    <value>
      dmDragDrop
    </value>
  </const>
  <const name="dmDragCancel" type="TDragMessage" file="Vcl.Controls.pas" line="700">
    <value>
      dmDragCancel
    </value>
  </const>
  <const name="dmFindTarget" type="TDragMessage" file="Vcl.Controls.pas" line="701">
    <value>
      dmFindTarget
    </value>
  </const>
  <const name="alNone" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alNone
    </value>
  </const>
  <const name="alTop" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alTop
    </value>
  </const>
  <const name="alBottom" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alBottom
    </value>
  </const>
  <const name="alLeft" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alLeft
    </value>
  </const>
  <const name="alRight" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alRight
    </value>
  </const>
  <const name="alClient" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alClient
    </value>
  </const>
  <const name="alCustom" type="TAlign" file="Vcl.Controls.pas" line="859">
    <value>
      alCustom
    </value>
  </const>
  <const name="csLButtonDown" type=":21" file="Vcl.Controls.pas" line="1118">
    <value>
      csLButtonDown
    </value>
  </const>
  <const name="csClicked" type=":21" file="Vcl.Controls.pas" line="1118">
    <value>
      csClicked
    </value>
  </const>
  <const name="csPalette" type=":21" file="Vcl.Controls.pas" line="1118">
    <value>
      csPalette
    </value>
  </const>
  <const name="csReadingState" type=":21" file="Vcl.Controls.pas" line="1119">
    <value>
      csReadingState
    </value>
  </const>
  <const name="csAlignmentNeeded" type=":21" file="Vcl.Controls.pas" line="1119">
    <value>
      csAlignmentNeeded
    </value>
  </const>
  <const name="csFocusing" type=":21" file="Vcl.Controls.pas" line="1119">
    <value>
      csFocusing
    </value>
  </const>
  <const name="csCreating" type=":21" file="Vcl.Controls.pas" line="1119">
    <value>
      csCreating
    </value>
  </const>
  <const name="csPaintCopy" type=":21" file="Vcl.Controls.pas" line="1120">
    <value>
      csPaintCopy
    </value>
  </const>
  <const name="csCustomPaint" type=":21" file="Vcl.Controls.pas" line="1120">
    <value>
      csCustomPaint
    </value>
  </const>
  <const name="csDestroyingHandle" type=":21" file="Vcl.Controls.pas" line="1120">
    <value>
      csDestroyingHandle
    </value>
  </const>
  <const name="csDocking" type=":21" file="Vcl.Controls.pas" line="1120">
    <value>
      csDocking
    </value>
  </const>
  <const name="csDesignerHide" type=":21" file="Vcl.Controls.pas" line="1121">
    <value>
      csDesignerHide
    </value>
  </const>
  <const name="csPanning" type=":21" file="Vcl.Controls.pas" line="1121">
    <value>
      csPanning
    </value>
  </const>
  <const name="csRecreating" type=":21" file="Vcl.Controls.pas" line="1121">
    <value>
      csRecreating
    </value>
  </const>
  <const name="csAligning" type=":21" file="Vcl.Controls.pas" line="1121">
    <value>
      csAligning
    </value>
  </const>
  <const name="csGlassPaint" type=":21" file="Vcl.Controls.pas" line="1121">
    <value>
      csGlassPaint
    </value>
  </const>
  <const name="csPrintClient" type=":21" file="Vcl.Controls.pas" line="1122">
    <value>
      csPrintClient
    </value>
  </const>
  <const name="csAcceptsControls" type=":31" file="Vcl.Controls.pas" line="1136">
    <value>
      csAcceptsControls
    </value>
  </const>
  <const name="csCaptureMouse" type=":31" file="Vcl.Controls.pas" line="1136">
    <value>
      csCaptureMouse
    </value>
  </const>
  <const name="csDesignInteractive" type=":31" file="Vcl.Controls.pas" line="1137">
    <value>
      csDesignInteractive
    </value>
  </const>
  <const name="csClickEvents" type=":31" file="Vcl.Controls.pas" line="1137">
    <value>
      csClickEvents
    </value>
  </const>
  <const name="csFramed" type=":31" file="Vcl.Controls.pas" line="1137">
    <value>
      csFramed
    </value>
  </const>
  <const name="csSetCaption" type=":31" file="Vcl.Controls.pas" line="1137">
    <value>
      csSetCaption
    </value>
  </const>
  <const name="csOpaque" type=":31" file="Vcl.Controls.pas" line="1137">
    <value>
      csOpaque
    </value>
  </const>
  <const name="csDoubleClicks" type=":31" file="Vcl.Controls.pas" line="1138">
    <value>
      csDoubleClicks
    </value>
  </const>
  <const name="csFixedWidth" type=":31" file="Vcl.Controls.pas" line="1138">
    <value>
      csFixedWidth
    </value>
  </const>
  <const name="csFixedHeight" type=":31" file="Vcl.Controls.pas" line="1138">
    <value>
      csFixedHeight
    </value>
  </const>
  <const name="csNoDesignVisible" type=":31" file="Vcl.Controls.pas" line="1138">
    <value>
      csNoDesignVisible
    </value>
  </const>
  <const name="csReplicatable" type=":31" file="Vcl.Controls.pas" line="1139">
    <value>
      csReplicatable
    </value>
  </const>
  <const name="csNoStdEvents" type=":31" file="Vcl.Controls.pas" line="1139">
    <value>
      csNoStdEvents
    </value>
  </const>
  <const name="csDisplayDragImage" type=":31" file="Vcl.Controls.pas" line="1139">
    <value>
      csDisplayDragImage
    </value>
  </const>
  <const name="csReflector" type=":31" file="Vcl.Controls.pas" line="1139">
    <value>
      csReflector
    </value>
  </const>
  <const name="csActionClient" type=":31" file="Vcl.Controls.pas" line="1140">
    <value>
      csActionClient
    </value>
  </const>
  <const name="csMenuEvents" type=":31" file="Vcl.Controls.pas" line="1140">
    <value>
      csMenuEvents
    </value>
  </const>
  <const name="csNeedsBorderPaint" type=":31" file="Vcl.Controls.pas" line="1140">
    <value>
      csNeedsBorderPaint
    </value>
  </const>
  <const name="csParentBackground" type=":31" file="Vcl.Controls.pas" line="1140">
    <value>
      csParentBackground
    </value>
  </const>
  <const name="csPannable" type=":31" file="Vcl.Controls.pas" line="1141">
    <value>
      csPannable
    </value>
  </const>
  <const name="csAlignWithMargins" type=":31" file="Vcl.Controls.pas" line="1141">
    <value>
      csAlignWithMargins
    </value>
  </const>
  <const name="csGestures" type=":31" file="Vcl.Controls.pas" line="1141">
    <value>
      csGestures
    </value>
  </const>
  <const name="csPaintBlackOpaqueOnGlass" type=":31" file="Vcl.Controls.pas" line="1141">
    <value>
      csPaintBlackOpaqueOnGlass
    </value>
  </const>
  <const name="csOverrideStylePaint" type=":31" file="Vcl.Controls.pas" line="1142">
    <value>
      csOverrideStylePaint
    </value>
  </const>
  <const name="csNeedsDesignDisabledState" type=":31" file="Vcl.Controls.pas" line="1142">
    <value>
      csNeedsDesignDisabledState
    </value>
  </const>
  <const name="sfLeft" type=":41" file="Vcl.Controls.pas" line="1203">
    <value>
      sfLeft
    </value>
  </const>
  <const name="sfTop" type=":41" file="Vcl.Controls.pas" line="1203">
    <value>
      sfTop
    </value>
  </const>
  <const name="sfWidth" type=":41" file="Vcl.Controls.pas" line="1203">
    <value>
      sfWidth
    </value>
  </const>
  <const name="sfHeight" type=":41" file="Vcl.Controls.pas" line="1203">
    <value>
      sfHeight
    </value>
  </const>
  <const name="sfFont" type=":41" file="Vcl.Controls.pas" line="1203">
    <value>
      sfFont
    </value>
  </const>
  <const name="sfDesignSize" type=":41" file="Vcl.Controls.pas" line="1204">
    <value>
      sfDesignSize
    </value>
  </const>
  <const name="sgLeft" type="TStandardGesture" file="Vcl.Controls.pas" line="1328">
    <value>
      sgLeft
    </value>
  </const>
  <const name="sgRight" type="TStandardGesture" file="Vcl.Controls.pas" line="1329">
    <value>
      sgRight
    </value>
  </const>
  <const name="sgUp" type="TStandardGesture" file="Vcl.Controls.pas" line="1330">
    <value>
      sgUp
    </value>
  </const>
  <const name="sgDown" type="TStandardGesture" file="Vcl.Controls.pas" line="1331">
    <value>
      sgDown
    </value>
  </const>
  <const name="sgUpLeft" type="TStandardGesture" file="Vcl.Controls.pas" line="1332">
    <value>
      sgUpLeft
    </value>
  </const>
  <const name="sgUpRight" type="TStandardGesture" file="Vcl.Controls.pas" line="1333">
    <value>
      sgUpRight
    </value>
  </const>
  <const name="sgDownLeft" type="TStandardGesture" file="Vcl.Controls.pas" line="1334">
    <value>
      sgDownLeft
    </value>
  </const>
  <const name="sgDownRight" type="TStandardGesture" file="Vcl.Controls.pas" line="1335">
    <value>
      sgDownRight
    </value>
  </const>
  <const name="sgLeftUp" type="TStandardGesture" file="Vcl.Controls.pas" line="1336">
    <value>
      sgLeftUp
    </value>
  </const>
  <const name="sgLeftDown" type="TStandardGesture" file="Vcl.Controls.pas" line="1337">
    <value>
      sgLeftDown
    </value>
  </const>
  <const name="sgRightUp" type="TStandardGesture" file="Vcl.Controls.pas" line="1338">
    <value>
      sgRightUp
    </value>
  </const>
  <const name="sgRightDown" type="TStandardGesture" file="Vcl.Controls.pas" line="1339">
    <value>
      sgRightDown
    </value>
  </const>
  <const name="sgUpDown" type="TStandardGesture" file="Vcl.Controls.pas" line="1340">
    <value>
      sgUpDown
    </value>
  </const>
  <const name="sgDownUp" type="TStandardGesture" file="Vcl.Controls.pas" line="1341">
    <value>
      sgDownUp
    </value>
  </const>
  <const name="sgLeftRight" type="TStandardGesture" file="Vcl.Controls.pas" line="1342">
    <value>
      sgLeftRight
    </value>
  </const>
  <const name="sgRightLeft" type="TStandardGesture" file="Vcl.Controls.pas" line="1343">
    <value>
      sgRightLeft
    </value>
  </const>
  <const name="sgUpLeftLong" type="TStandardGesture" file="Vcl.Controls.pas" line="1344">
    <value>
      sgUpLeftLong
    </value>
  </const>
  <const name="sgUpRightLong" type="TStandardGesture" file="Vcl.Controls.pas" line="1345">
    <value>
      sgUpRightLong
    </value>
  </const>
  <const name="sgDownLeftLong" type="TStandardGesture" file="Vcl.Controls.pas" line="1346">
    <value>
      sgDownLeftLong
    </value>
  </const>
  <const name="sgDownRightLong" type="TStandardGesture" file="Vcl.Controls.pas" line="1347">
    <value>
      sgDownRightLong
    </value>
  </const>
  <const name="sgScratchout" type="TStandardGesture" file="Vcl.Controls.pas" line="1348">
    <value>
      sgScratchout
    </value>
  </const>
  <const name="sgTriangle" type="TStandardGesture" file="Vcl.Controls.pas" line="1349">
    <value>
      sgTriangle
    </value>
  </const>
  <const name="sgSquare" type="TStandardGesture" file="Vcl.Controls.pas" line="1350">
    <value>
      sgSquare
    </value>
  </const>
  <const name="sgCheck" type="TStandardGesture" file="Vcl.Controls.pas" line="1351">
    <value>
      sgCheck
    </value>
  </const>
  <const name="sgCurlicue" type="TStandardGesture" file="Vcl.Controls.pas" line="1352">
    <value>
      sgCurlicue
    </value>
  </const>
  <const name="sgDoubleCurlicue" type="TStandardGesture" file="Vcl.Controls.pas" line="1353">
    <value>
      sgDoubleCurlicue
    </value>
  </const>
  <const name="sgCircle" type="TStandardGesture" file="Vcl.Controls.pas" line="1354">
    <value>
      sgCircle
    </value>
  </const>
  <const name="sgDoubleCircle" type="TStandardGesture" file="Vcl.Controls.pas" line="1355">
    <value>
      sgDoubleCircle
    </value>
  </const>
  <const name="sgSemiCircleLeft" type="TStandardGesture" file="Vcl.Controls.pas" line="1356">
    <value>
      sgSemiCircleLeft
    </value>
  </const>
  <const name="sgSemiCircleRight" type="TStandardGesture" file="Vcl.Controls.pas" line="1357">
    <value>
      sgSemiCircleRight
    </value>
  </const>
  <const name="sgChevronUp" type="TStandardGesture" file="Vcl.Controls.pas" line="1358">
    <value>
      sgChevronUp
    </value>
  </const>
  <const name="sgChevronDown" type="TStandardGesture" file="Vcl.Controls.pas" line="1359">
    <value>
      sgChevronDown
    </value>
  </const>
  <const name="sgChevronLeft" type="TStandardGesture" file="Vcl.Controls.pas" line="1360">
    <value>
      sgChevronLeft
    </value>
  </const>
  <const name="sgChevronRight" type="TStandardGesture" file="Vcl.Controls.pas" line="1361">
    <value>
      sgChevronRight
    </value>
  </const>
  <const name="toPressAndHold" type="TTabletOption" file="Vcl.Controls.pas" line="1369">
    <value>
      toPressAndHold
    </value>
  </const>
  <const name="toPenTapFeedback" type="TTabletOption" file="Vcl.Controls.pas" line="1369">
    <value>
      toPenTapFeedback
    </value>
  </const>
  <const name="toPenBarrelFeedback" type="TTabletOption" file="Vcl.Controls.pas" line="1369">
    <value>
      toPenBarrelFeedback
    </value>
  </const>
  <const name="toTouchUIForceOn" type="TTabletOption" file="Vcl.Controls.pas" line="1370">
    <value>
      toTouchUIForceOn
    </value>
  </const>
  <const name="toTouchUIForceOff" type="TTabletOption" file="Vcl.Controls.pas" line="1370">
    <value>
      toTouchUIForceOff
    </value>
  </const>
  <const name="toTouchSwitch" type="TTabletOption" file="Vcl.Controls.pas" line="1370">
    <value>
      toTouchSwitch
    </value>
  </const>
  <const name="toFlicks" type="TTabletOption" file="Vcl.Controls.pas" line="1370">
    <value>
      toFlicks
    </value>
  </const>
  <const name="toSmoothScrolling" type="TTabletOption" file="Vcl.Controls.pas" line="1371">
    <value>
      toSmoothScrolling
    </value>
  </const>
  <const name="toFlickFallbackKeys" type="TTabletOption" file="Vcl.Controls.pas" line="1371">
    <value>
      toFlickFallbackKeys
    </value>
  </const>
  <const name="gtStandard" type="TGestureType" file="Vcl.Controls.pas" line="1375">
    <value>
      gtStandard
    </value>
  </const>
  <const name="gtRecorded" type="TGestureType" file="Vcl.Controls.pas" line="1375">
    <value>
      gtRecorded
    </value>
  </const>
  <const name="gtRegistered" type="TGestureType" file="Vcl.Controls.pas" line="1375">
    <value>
      gtRegistered
    </value>
  </const>
  <const name="gtNone" type="TGestureType" file="Vcl.Controls.pas" line="1375">
    <value>
      gtNone
    </value>
  </const>
  <const name="goUniDirectional" type="TGestureOption" file="Vcl.Controls.pas" line="1378">
    <value>
      goUniDirectional
    </value>
  </const>
  <const name="goSkew" type="TGestureOption" file="Vcl.Controls.pas" line="1378">
    <value>
      goSkew
    </value>
  </const>
  <const name="goEndpoint" type="TGestureOption" file="Vcl.Controls.pas" line="1378">
    <value>
      goEndpoint
    </value>
  </const>
  <const name="goRotate" type="TGestureOption" file="Vcl.Controls.pas" line="1378">
    <value>
      goRotate
    </value>
  </const>
  <const name="tpInteractiveGestures" type="TTouchProperty" file="Vcl.Controls.pas" line="1468">
    <value>
      tpInteractiveGestures
    </value>
  </const>
  <const name="tpInteractiveGestureOptions" type="TTouchProperty" file="Vcl.Controls.pas" line="1468">
    <value>
      tpInteractiveGestureOptions
    </value>
  </const>
  <const name="tpParentTabletOptions" type="TTouchProperty" file="Vcl.Controls.pas" line="1469">
    <value>
      tpParentTabletOptions
    </value>
  </const>
  <const name="tpTabletOptions" type="TTouchProperty" file="Vcl.Controls.pas" line="1469">
    <value>
      tpTabletOptions
    </value>
  </const>
  <const name="seFont" type=":52" file="Vcl.Controls.pas" line="1530">
    <value>
      seFont
    </value>
  </const>
  <const name="seClient" type=":52" file="Vcl.Controls.pas" line="1530">
    <value>
      seClient
    </value>
  </const>
  <const name="seBorder" type=":52" file="Vcl.Controls.pas" line="1530">
    <value>
      seBorder
    </value>
  </const>
  <const name="doNoOrient" type="TDockOrientation" file="Vcl.Controls.pas" line="1590">
    <value>
      doNoOrient
    </value>
  </const>
  <const name="doHorizontal" type="TDockOrientation" file="Vcl.Controls.pas" line="1590">
    <value>
      doHorizontal
    </value>
  </const>
  <const name="doVertical" type="TDockOrientation" file="Vcl.Controls.pas" line="1590">
    <value>
      doVertical
    </value>
  </const>
  <const name="ctWinApi" type="TOriginalParentCalcType" file="Vcl.Controls.pas" line="1597">
    <value>
      ctWinApi
    </value>
  </const>
  <const name="ctNative" type="TOriginalParentCalcType" file="Vcl.Controls.pas" line="1597">
    <value>
      ctNative
    </value>
  </const>
  <const name="imDisable" type="TImeMode" file="Vcl.Controls.pas" line="2198">
    <value>
      imDisable
    </value>
  </const>
  <const name="imClose" type="TImeMode" file="Vcl.Controls.pas" line="2198">
    <value>
      imClose
    </value>
  </const>
  <const name="imOpen" type="TImeMode" file="Vcl.Controls.pas" line="2198">
    <value>
      imOpen
    </value>
  </const>
  <const name="imDontCare" type="TImeMode" file="Vcl.Controls.pas" line="2198">
    <value>
      imDontCare
    </value>
  </const>
  <const name="imSAlpha" type="TImeMode" file="Vcl.Controls.pas" line="2199">
    <value>
      imSAlpha
    </value>
  </const>
  <const name="imAlpha" type="TImeMode" file="Vcl.Controls.pas" line="2199">
    <value>
      imAlpha
    </value>
  </const>
  <const name="imHira" type="TImeMode" file="Vcl.Controls.pas" line="2199">
    <value>
      imHira
    </value>
  </const>
  <const name="imSKata" type="TImeMode" file="Vcl.Controls.pas" line="2199">
    <value>
      imSKata
    </value>
  </const>
  <const name="imKata" type="TImeMode" file="Vcl.Controls.pas" line="2199">
    <value>
      imKata
    </value>
  </const>
  <const name="imChinese" type="TImeMode" file="Vcl.Controls.pas" line="2200">
    <value>
      imChinese
    </value>
  </const>
  <const name="imSHanguel" type="TImeMode" file="Vcl.Controls.pas" line="2200">
    <value>
      imSHanguel
    </value>
  </const>
  <const name="imHanguel" type="TImeMode" file="Vcl.Controls.pas" line="2200">
    <value>
      imHanguel
    </value>
  </const>
  <const name="tipClose" type="TTipMode" file="Vcl.Controls.pas" line="2203">
    <value>
      tipClose
    </value>
  </const>
  <const name="tipOpen" type="TTipMode" file="Vcl.Controls.pas" line="2203">
    <value>
      tipOpen
    </value>
  </const>
  <const name="tipDontCare" type="TTipMode" file="Vcl.Controls.pas" line="2203">
    <value>
      tipDontCare
    </value>
  </const>
  <const name="bvNone" type="TBevelCut" file="Vcl.Controls.pas" line="2214">
    <value>
      bvNone
    </value>
  </const>
  <const name="bvLowered" type="TBevelCut" file="Vcl.Controls.pas" line="2214">
    <value>
      bvLowered
    </value>
  </const>
  <const name="bvRaised" type="TBevelCut" file="Vcl.Controls.pas" line="2214">
    <value>
      bvRaised
    </value>
  </const>
  <const name="bvSpace" type="TBevelCut" file="Vcl.Controls.pas" line="2214">
    <value>
      bvSpace
    </value>
  </const>
  <const name="beLeft" type="TBevelEdge" file="Vcl.Controls.pas" line="2215">
    <value>
      beLeft
    </value>
  </const>
  <const name="beTop" type="TBevelEdge" file="Vcl.Controls.pas" line="2215">
    <value>
      beTop
    </value>
  </const>
  <const name="beRight" type="TBevelEdge" file="Vcl.Controls.pas" line="2215">
    <value>
      beRight
    </value>
  </const>
  <const name="beBottom" type="TBevelEdge" file="Vcl.Controls.pas" line="2215">
    <value>
      beBottom
    </value>
  </const>
  <const name="bkNone" type="TBevelKind" file="Vcl.Controls.pas" line="2217">
    <value>
      bkNone
    </value>
  </const>
  <const name="bkTile" type="TBevelKind" file="Vcl.Controls.pas" line="2217">
    <value>
      bkTile
    </value>
  </const>
  <const name="bkSoft" type="TBevelKind" file="Vcl.Controls.pas" line="2217">
    <value>
      bkSoft
    </value>
  </const>
  <const name="bkFlat" type="TBevelKind" file="Vcl.Controls.pas" line="2217">
    <value>
      bkFlat
    </value>
  </const>
  <const name="wrFocusedWindow" type="TWheelRouting" file="Vcl.Controls.pas" line="2996">
    <devnotes>
       <summary>
         Mouse wheel input is delivered to the app with focus.
         This value is means the Windows Mouse setting
         &quot;Scroll inactive windows when I hover over them&quot; is On
       </summary>
    </devnotes>
    <value>
      wrFocusedWindow
    </value>
  </const>
  <const name="wrHybrid" type="TWheelRouting" file="Vcl.Controls.pas" line="3001">
    <devnotes>
       <summary>
         Mouse wheel input is delivered to the app with focus (desktop apps)
         or the app under the mouse cursor (Windows Store apps)
       </summary>
    </devnotes>
    <value>
      wrHybrid
    </value>
  </const>
  <const name="wrMousePos" type="TWheelRouting" file="Vcl.Controls.pas" line="3007">
    <devnotes>
       <summary>
         Mouse wheel input is delivered to the app under the mouse cursor.
         This value is means the Windows Mouse setting
         &quot;Scroll inactive windows when I hover over them&quot; is On
       </summary>
    </devnotes>
    <value>
      wrMousePos
    </value>
  </const>
  <const name="bhInfo" type="TBalloonHintIcon" file="Vcl.Controls.pas" line="3084">
    <value>
      bhInfo
    </value>
  </const>
  <const name="bhWarning" type="TBalloonHintIcon" file="Vcl.Controls.pas" line="3084">
    <value>
      bhWarning
    </value>
  </const>
  <const name="bhError" type="TBalloonHintIcon" file="Vcl.Controls.pas" line="3084">
    <value>
      bhError
    </value>
  </const>
  <const name="bhsNormal" type="TBalloonHintIconSize" file="Vcl.Controls.pas" line="3086">
    <value>
      bhsNormal
    </value>
  </const>
  <const name="bhsLarge" type="TBalloonHintIconSize" file="Vcl.Controls.pas" line="3086">
    <value>
      bhsLarge
    </value>
  </const>
  <const name="bhsSmall" type="TBalloonHintIconSize" file="Vcl.Controls.pas" line="3086">
    <value>
      bhsSmall
    </value>
  </const>
  <const name="bhsStandard" type="TBalloonHintStyle" file="Vcl.Controls.pas" line="3088">
    <value>
      bhsStandard
    </value>
  </const>
  <const name="bhsBalloon" type="TBalloonHintStyle" file="Vcl.Controls.pas" line="3088">
    <value>
      bhsBalloon
    </value>
  </const>
  <pointer name="TCustomData" alias="System.Pointer" type="Pointer" indircnt="1" file="System.pas" line="12"/>
  <type name="TCustomLongData" type="integer" loBound="-2147483648" hiBound="2147483647" file="System.pas" line="12"/>
  <pointer name="TWindowProcPtr" alias="System.Pointer" type="Pointer" indircnt="1" file="System.pas" line="12"/>
  <classref name="TWinControlClass" ref="TWinControl" file="Vcl.Controls.pas" line="470"/>
  <classref name="THintWindowClass" ref="THintWindow" file="Vcl.Controls.pas" line="471"/>
  <struct name="TCMActivate" alias="Winapi.Messages.TWMNoParams" size="16" file="Vcl.Controls.pas" line="475">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1077">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1078">
    </field>
    <field name="Unused" visibility="public" size="8" offset="4" file="Winapi.Messages.pas" line="1079">
      <array name="Unused" visibility="public" low="0" high="3" file="Winapi.Messages.pas" line="1079">
        <element type="Word"/>
      </array>
    </field>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1080">
    </field>
    <field name="UnusedFiller2" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1081">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1082">
    </field>
  </struct>
  <struct name="TCMDeactivate" alias="Winapi.Messages.TWMNoParams" size="16" file="Vcl.Controls.pas" line="476">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1077">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1078">
    </field>
    <field name="Unused" visibility="public" size="8" offset="4" file="Winapi.Messages.pas" line="1079">
      <array name="Unused" visibility="public" low="0" high="3" file="Winapi.Messages.pas" line="1079">
        <element type="Word"/>
      </array>
    </field>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1080">
    </field>
    <field name="UnusedFiller2" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1081">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1082">
    </field>
  </struct>
  <struct name="TCMGotFocus" alias="Winapi.Messages.TWMNoParams" size="16" file="Vcl.Controls.pas" line="477">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1077">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1078">
    </field>
    <field name="Unused" visibility="public" size="8" offset="4" file="Winapi.Messages.pas" line="1079">
      <array name="Unused" visibility="public" low="0" high="3" file="Winapi.Messages.pas" line="1079">
        <element type="Word"/>
      </array>
    </field>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1080">
    </field>
    <field name="UnusedFiller2" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1081">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1082">
    </field>
  </struct>
  <struct name="TCMLostFocus" alias="Winapi.Messages.TWMNoParams" size="16" file="Vcl.Controls.pas" line="478">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1077">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1078">
    </field>
    <field name="Unused" visibility="public" size="8" offset="4" file="Winapi.Messages.pas" line="1079">
      <array name="Unused" visibility="public" low="0" high="3" file="Winapi.Messages.pas" line="1079">
        <element type="Word"/>
      </array>
    </field>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1080">
    </field>
    <field name="UnusedFiller2" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1081">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1082">
    </field>
  </struct>
  <struct name="TCMDialogKey" alias="Winapi.Messages.TWMKey" size="16" file="Vcl.Controls.pas" line="479">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1086">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1087">
    </field>
    <field name="CharCode" type="Word" visibility="public" size="2" offset="4" file="Winapi.Messages.pas" line="1088">
    </field>
    <field name="Unused" type="Word" visibility="public" size="2" offset="6" file="Winapi.Messages.pas" line="1089">
    </field>
    <field name="CharCodeUnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Winapi.Messages.pas" line="1090">
    </field>
    <field name="KeyData" type="Integer" visibility="public" size="4" offset="8" file="Winapi.Messages.pas" line="1091">
    </field>
    <field name="KeyDataFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1092">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1093">
    </field>
  </struct>
  <struct name="TCMDialogChar" alias="Winapi.Messages.TWMKey" size="16" file="Vcl.Controls.pas" line="480">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1086">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1087">
    </field>
    <field name="CharCode" type="Word" visibility="public" size="2" offset="4" file="Winapi.Messages.pas" line="1088">
    </field>
    <field name="Unused" type="Word" visibility="public" size="2" offset="6" file="Winapi.Messages.pas" line="1089">
    </field>
    <field name="CharCodeUnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Winapi.Messages.pas" line="1090">
    </field>
    <field name="KeyData" type="Integer" visibility="public" size="4" offset="8" file="Winapi.Messages.pas" line="1091">
    </field>
    <field name="KeyDataFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1092">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1093">
    </field>
  </struct>
  <struct name="TCMHitTest" alias="Winapi.Messages.TWMNCHitTest" size="16" file="Vcl.Controls.pas" line="481">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1756">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1757">
    </field>
    <field name="Unused" type="NativeUInt" visibility="public" size="4" offset="4" file="Winapi.Messages.pas" line="1758">
    </field>
    <field name="XPos" type="SmallInt" visibility="public" variant="true" size="2" offset="8" file="Winapi.Messages.pas" line="1761">
    </field>
    <field name="YPos" type="SmallInt" visibility="public" variant="true" size="2" offset="10" file="Winapi.Messages.pas" line="1762">
    </field>
    <field name="XYPosFiller" type="TDWordFiller" visibility="public" variant="true" size="0" offset="12" file="Winapi.Messages.pas" line="1763">
    </field>
    <field name="Pos" type="TSmallPoint" visibility="public" variant="true" size="4" offset="8" file="Winapi.Messages.pas" line="1765">
    </field>
    <field name="PosFiller" type="TDWordFiller" visibility="public" variant="true" size="0" offset="12" file="Winapi.Messages.pas" line="1766">
    </field>
    <field name="Result" type="NativeInt" visibility="public" variant="true" size="4" offset="12" file="Winapi.Messages.pas" line="1767">
    </field>
  </struct>
  <struct name="TCMEnter" alias="Winapi.Messages.TWMNoParams" size="16" file="Vcl.Controls.pas" line="482">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1077">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1078">
    </field>
    <field name="Unused" visibility="public" size="8" offset="4" file="Winapi.Messages.pas" line="1079">
      <array name="Unused" visibility="public" low="0" high="3" file="Winapi.Messages.pas" line="1079">
        <element type="Word"/>
      </array>
    </field>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1080">
    </field>
    <field name="UnusedFiller2" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1081">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1082">
    </field>
  </struct>
  <struct name="TCMExit" alias="Winapi.Messages.TWMNoParams" size="16" file="Vcl.Controls.pas" line="483">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1077">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1078">
    </field>
    <field name="Unused" visibility="public" size="8" offset="4" file="Winapi.Messages.pas" line="1079">
      <array name="Unused" visibility="public" low="0" high="3" file="Winapi.Messages.pas" line="1079">
        <element type="Word"/>
      </array>
    </field>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1080">
    </field>
    <field name="UnusedFiller2" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1081">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1082">
    </field>
  </struct>
  <struct name="TCMDesignHitTest" alias="Winapi.Messages.TWMMouse" size="16" file="Vcl.Controls.pas" line="484">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1097">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1098">
    </field>
    <field name="Keys" type="Integer" visibility="public" size="4" offset="4" file="Winapi.Messages.pas" line="1099">
    </field>
    <field name="KeysFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Winapi.Messages.pas" line="1100">
    </field>
    <field name="XPos" type="SmallInt" visibility="public" variant="true" size="2" offset="8" file="Winapi.Messages.pas" line="1103">
    </field>
    <field name="YPos" type="SmallInt" visibility="public" variant="true" size="2" offset="10" file="Winapi.Messages.pas" line="1104">
    </field>
    <field name="XYPosFiller" type="TDWordFiller" visibility="public" variant="true" size="0" offset="12" file="Winapi.Messages.pas" line="1105">
    </field>
    <field name="Pos" type="TSmallPoint" visibility="public" variant="true" size="4" offset="8" file="Winapi.Messages.pas" line="1107">
    </field>
    <field name="PosFiller" type="TDWordFiller" visibility="public" variant="true" size="0" offset="12" file="Winapi.Messages.pas" line="1108">
    </field>
    <field name="Result" type="NativeInt" visibility="public" variant="true" size="4" offset="12" file="Winapi.Messages.pas" line="1109">
    </field>
  </struct>
  <struct name="TCMWantSpecialKey" alias="Winapi.Messages.TWMKey" size="16" file="Vcl.Controls.pas" line="485">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Winapi.Messages.pas" line="1086">
    </field>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Winapi.Messages.pas" line="1087">
    </field>
    <field name="CharCode" type="Word" visibility="public" size="2" offset="4" file="Winapi.Messages.pas" line="1088">
    </field>
    <field name="Unused" type="Word" visibility="public" size="2" offset="6" file="Winapi.Messages.pas" line="1089">
    </field>
    <field name="CharCodeUnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Winapi.Messages.pas" line="1090">
    </field>
    <field name="KeyData" type="Integer" visibility="public" size="4" offset="8" file="Winapi.Messages.pas" line="1091">
    </field>
    <field name="KeyDataFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Winapi.Messages.pas" line="1092">
    </field>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Winapi.Messages.pas" line="1093">
    </field>
  </struct>
  <struct name="TCMMouseWheel" size="16" file="Vcl.Controls.pas" line="526">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="527"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="528"/>
    <field name="ShiftState" type="TShiftState" visibility="public" size="2" offset="4" file="Vcl.Controls.pas" line="529"/>
    <field name="WheelDelta" type="SmallInt" visibility="public" size="2" offset="6" file="Vcl.Controls.pas" line="530"/>
    <field name="ShiftStateWheel" type="TDWordFiller" visibility="public" size="0" offset="8" file="Vcl.Controls.pas" line="531"/>
    <field name="XPos" type="SmallInt" visibility="public" variant="true" size="2" offset="8" file="Vcl.Controls.pas" line="534"/>
    <field name="YPos" type="SmallInt" visibility="public" variant="true" size="2" offset="10" file="Vcl.Controls.pas" line="535"/>
    <field name="XYPos" type="TDWordFiller" visibility="public" variant="true" size="0" offset="12" file="Vcl.Controls.pas" line="536"/>
    <field name="Pos" type="TSmallPoint" visibility="public" variant="true" size="4" offset="8" file="Vcl.Controls.pas" line="538"/>
    <field name="PosFiller" type="TDWordFiller" visibility="public" variant="true" size="0" offset="12" file="Vcl.Controls.pas" line="539"/>
    <field name="Result" type="NativeInt" visibility="public" variant="true" size="4" offset="12" file="Vcl.Controls.pas" line="540"/>
  </struct>
  <struct name="TCMCancelMode" size="16" file="Vcl.Controls.pas" line="555">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="556"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="557"/>
    <field name="Unused" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="558"/>
    <field name="Sender" type="TControl" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="559"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="560"/>
  </struct>
  <struct name="TCMFocusChanged" size="16" file="Vcl.Controls.pas" line="563">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="564"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="565"/>
    <field name="Unused" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="566"/>
    <field name="Sender" type="TWinControl" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="567"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="568"/>
  </struct>
  <struct name="TCMControlListChange" size="16" file="Vcl.Controls.pas" line="571">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="572"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="573"/>
    <field name="Control" type="TControl" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="574"/>
    <field name="Inserting" type="LongBool" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="575"/>
    <field name="InsertingFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Vcl.Controls.pas" line="576"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="577"/>
  </struct>
  <pointer name="PControlListItem" type="TControlListItem" indircnt="1" file="Vcl.Controls.pas" line="580"/>
  <struct name="TControlListItem" size="8" file="Vcl.Controls.pas" line="581">
    <field name="Control" type="TControl" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="582"/>
    <field name="Parent" type="TWinControl" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="583"/>
  </struct>
  <struct name="TCMControlListChanging" size="16" file="Vcl.Controls.pas" line="586">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="587"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="588"/>
    <field name="ControlListItem" type="PControlListItem" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="589"/>
    <field name="Inserting" type="LongBool" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="590"/>
    <field name="InsertingFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Vcl.Controls.pas" line="591"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="592"/>
  </struct>
  <struct name="TCMChildKey" size="16" file="Vcl.Controls.pas" line="603">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="604"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="605"/>
    <field name="CharCode" type="Word" visibility="public" size="2" offset="4" file="Vcl.Controls.pas" line="606"/>
    <field name="CharCodeFiller" type="TWordFiller" visibility="public" size="2" offset="6" file="Vcl.Controls.pas" line="607"/>
    <field name="Sender" type="TWinControl" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="608"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="609"/>
  </struct>
  <struct name="TCMControlChange" size="16" file="Vcl.Controls.pas" line="612">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="613"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="614"/>
    <field name="Control" type="TControl" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="615"/>
    <field name="Inserting" type="LongBool" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="616"/>
    <field name="InsertingFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Vcl.Controls.pas" line="617"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="618"/>
  </struct>
  <struct name="TCMChanged" size="16" file="Vcl.Controls.pas" line="628">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="629"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="630"/>
    <field name="Unused" type="Integer" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="631"/>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Vcl.Controls.pas" line="632"/>
    <field name="Child" type="TControl" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="633"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="634"/>
  </struct>
  <pointer name="PHintInfo" type="THintInfo" indircnt="1" file="Vcl.Controls.pas" line="640"/>
  <struct name="THintInfo" size="64" file="Vcl.Controls.pas" line="642">
    <field name="HintControl" type="TControl" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="643"/>
    <field name="HintWindowClass" type="THintWindowClass" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="644"/>
    <field name="HintPos" type="TPoint" visibility="public" size="8" offset="8" file="Vcl.Controls.pas" line="645"/>
    <field name="HintMaxWidth" type="Integer" visibility="public" size="4" offset="16" file="Vcl.Controls.pas" line="646"/>
    <field name="HintColor" type="TColor" visibility="public" size="4" offset="20" file="Vcl.Controls.pas" line="647"/>
    <field name="CursorRect" type="TRect" visibility="public" size="16" offset="24" file="Vcl.Controls.pas" line="648"/>
    <field name="CursorPos" type="TPoint" visibility="public" size="8" offset="40" file="Vcl.Controls.pas" line="649"/>
    <field name="ReshowTimeout" type="Integer" visibility="public" size="4" offset="48" file="Vcl.Controls.pas" line="650"/>
    <field name="HideTimeout" type="Integer" visibility="public" size="4" offset="52" file="Vcl.Controls.pas" line="651"/>
    <field name="HintStr" type="string" visibility="public" size="4" offset="56" file="Vcl.Controls.pas" line="652"/>
    <field name="HintData" type="Pointer" visibility="public" size="4" offset="60" file="Vcl.Controls.pas" line="653"/>
  </struct>
  <struct name="TCMHintShow" size="16" file="Vcl.Controls.pas" line="669">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="670"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="671"/>
    <field name="Reserved" type="NativeInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="672"/>
    <field name="HintInfo" type="PHintInfo" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="673"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="674"/>
  </struct>
  <struct name="TCMParentFontChanged" size="16" file="Vcl.Controls.pas" line="688">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="689"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="690"/>
    <field name="WParam" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="691"/>
    <field name="LParam" type="NativeInt" visibility="public" variant="true" size="4" offset="8" file="Vcl.Controls.pas" line="693"/>
    <field name="Font" type="TFont" visibility="public" variant="true" size="4" offset="8" file="Vcl.Controls.pas" line="694"/>
    <field name="Result" type="NativeInt" visibility="public" variant="true" size="4" offset="12" file="Vcl.Controls.pas" line="695"/>
  </struct>
  <enum name="TDragMessage" file="Vcl.Controls.pas" line="700">
    <element value="0" name="dmDragEnter" file="Vcl.Controls.pas" line="700"/>
    <element value="1" name="dmDragLeave" file="Vcl.Controls.pas" line="700"/>
    <element value="2" name="dmDragMove" file="Vcl.Controls.pas" line="700"/>
    <element value="3" name="dmDragDrop" file="Vcl.Controls.pas" line="700"/>
    <element value="4" name="dmDragCancel" file="Vcl.Controls.pas" line="700"/>
    <element value="5" name="dmFindTarget" file="Vcl.Controls.pas" line="701"/>
  </enum>
  <pointer name="PDragRec" type="TDragRec" indircnt="1" file="Vcl.Controls.pas" line="723"/>
  <struct name="TDragRec" size="20" file="Vcl.Controls.pas" line="724">
    <field name="Pos" type="TPoint" visibility="public" size="8" offset="0" file="Vcl.Controls.pas" line="725"/>
    <field name="Source" type="TDragObject" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="726"/>
    <field name="Target" type="Pointer" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="727"/>
    <field name="Docking" type="Boolean" visibility="public" size="1" offset="16" file="Vcl.Controls.pas" line="728"/>
  </struct>
  <struct name="TCMDrag" size="16" file="Vcl.Controls.pas" line="731">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="732"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="733"/>
    <field name="DragMessage" type="TDragMessage" visibility="public" size="1" offset="4" file="Vcl.Controls.pas" line="734"/>
    <field name="Unused1" type="Byte" visibility="public" size="1" offset="5" file="Vcl.Controls.pas" line="735"/>
    <field name="Unused2" type="TWordFiller" visibility="public" size="2" offset="6" file="Vcl.Controls.pas" line="736"/>
    <field name="DragRec" type="PDragRec" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="737"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="738"/>
  </struct>
  <pointer name="PDockNotifyRec" type="TDockNotifyRec" indircnt="1" file="Vcl.Controls.pas" line="746"/>
  <struct name="TDockNotifyRec" size="12" file="Vcl.Controls.pas" line="748">
    <field name="ClientMsg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="749"/>
    <field name="ClientMsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="750"/>
    <field name="MsgWParam" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="751"/>
    <field name="MsgLParam" type="NativeInt" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="752"/>
  </struct>
  <struct name="TCMDockClient" size="16" file="Vcl.Controls.pas" line="768">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="769"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="770"/>
    <field name="DockSource" type="TDragDockObject" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="771"/>
    <field name="MousePos" type="TSmallPoint" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="772"/>
    <field name="MousePosFiller" type="TDWordFiller" visibility="public" size="0" offset="12" file="Vcl.Controls.pas" line="773"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="774"/>
  </struct>
  <struct name="TCMUnDockClient" size="16" file="Vcl.Controls.pas" line="777">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="778"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="779"/>
    <field name="NewTarget" type="TControl" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="780"/>
    <field name="Client" type="TControl" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="781"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="782"/>
  </struct>
  <struct name="TCMFloat" size="16" file="Vcl.Controls.pas" line="785">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="786"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="787"/>
    <field name="Reserved" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="788"/>
    <field name="DockSource" type="TDragDockObject" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="789"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="790"/>
  </struct>
  <struct name="TCMDockNotification" size="16" file="Vcl.Controls.pas" line="793">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="794"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="795"/>
    <field name="Client" type="TControl" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="796"/>
    <field name="NotifyRec" type="PDockNotifyRec" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="797"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="798"/>
  </struct>
  <pointer name="PPopupFormInfo" type="TPopupFormInfo" indircnt="1" file="Vcl.Controls.pas" line="803"/>
  <struct name="TPopupFormInfo" size="12" file="Vcl.Controls.pas" line="806">
    <field name="PopupID" type="Integer" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="807"/>
    <field name="PopupWnd" type="HWND" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="808"/>
    <field name="IsPopup" type="Boolean" visibility="public" size="1" offset="8" file="Vcl.Controls.pas" line="809"/>
  </struct>
  <struct name="TCMPopupHWndDestroy" size="16" file="Vcl.Controls.pas" line="832">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="833"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="834"/>
    <field name="PopupFormInfo" type="PPopupFormInfo" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="835"/>
    <field name="PopupControlWnd" type="HWND" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="836"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="837"/>
  </struct>
  <struct name="TCMCreatePopup" size="16" file="Vcl.Controls.pas" line="840">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="841"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="842"/>
    <field name="PopupID" type="Integer" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="843"/>
    <field name="PopupUDFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Vcl.Controls.pas" line="844"/>
    <field name="OwnerWnd" type="HWND" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="845"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="846"/>
  </struct>
  <struct name="TCMRemoteSessionStatusChanged" size="16" file="Vcl.Controls.pas" line="849">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="850"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="851"/>
    <field name="InRemoteSession" type="LongBool" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="852"/>
    <field name="UnusedFiller" type="TDWordFiller" visibility="public" size="0" offset="8" file="Vcl.Controls.pas" line="853"/>
    <field name="Unused" type="NativeInt" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="854"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="855"/>
  </struct>
  <enum name="TAlign" file="Vcl.Controls.pas" line="859">
    <element value="0" name="alNone" file="Vcl.Controls.pas" line="859"/>
    <element value="1" name="alTop" file="Vcl.Controls.pas" line="859"/>
    <element value="2" name="alBottom" file="Vcl.Controls.pas" line="859"/>
    <element value="3" name="alLeft" file="Vcl.Controls.pas" line="859"/>
    <element value="4" name="alRight" file="Vcl.Controls.pas" line="859"/>
    <element value="5" name="alClient" file="Vcl.Controls.pas" line="859"/>
    <element value="6" name="alCustom" file="Vcl.Controls.pas" line="859"/>
  </enum>
  <set name="TAlignSet" type="TAlign" file="Vcl.Controls.pas" line="861">
    <element name="alNone"/>
    <element name="alTop"/>
    <element name="alBottom"/>
    <element name="alLeft"/>
    <element name="alRight"/>
    <element name="alClient"/>
    <element name="alCustom"/>
  </set>
  <pointer name="TDragTarget" alias="System.Pointer" type="Pointer" indircnt="1" file="System.pas" line="12"/>
  <class name="TDragObject" file="Vcl.Controls.pas" line="871">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="FAlwaysShowDragImages" type="Boolean" visibility="private" size="1" offset="4" file="Vcl.Controls.pas" line="873"/>
      <field name="FCancelling" type="Boolean" visibility="private" size="1" offset="5" file="Vcl.Controls.pas" line="874"/>
      <field name="FDragHandle" type="HWND" visibility="private" size="4" offset="8" file="Vcl.Controls.pas" line="875"/>
      <field name="FDragPos" type="TPoint" visibility="private" size="8" offset="12" file="Vcl.Controls.pas" line="876"/>
      <field name="FDragTarget" type="Pointer" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="877"/>
      <field name="FDragTargetPos" type="TPoint" visibility="private" size="8" offset="24" file="Vcl.Controls.pas" line="878"/>
      <field name="FDropped" type="Boolean" visibility="private" size="1" offset="32" file="Vcl.Controls.pas" line="879"/>
      <field name="FMouseDeltaX" type="Double" visibility="private" size="8" offset="40" file="Vcl.Controls.pas" line="880"/>
      <field name="FMouseDeltaY" type="Double" visibility="private" size="8" offset="48" file="Vcl.Controls.pas" line="881"/>
      <field name="FRightClickCancels" type="Boolean" visibility="private" size="1" offset="56" file="Vcl.Controls.pas" line="882"/>
      <function name="Capture" visibility="private" file="Vcl.Controls.pas" line="883">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      </function>
      <procedure name="ReleaseCapture" visibility="private" file="Vcl.Controls.pas" line="884">
        <parameters>
          <parameter name="Handle" type="HWND"/>
        </parameters>
      </procedure>
      <procedure name="Finished" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="886">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="Accepted" type="Boolean"/>
        </parameters>
      </procedure>
      <function name="GetDragCursor" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="887">
        <parameters>
          <parameter name="Accepted" type="Boolean"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <retval type="TCursor"/>
        </parameters>
      </function>
      <function name="GetDragImages" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="888">
        <parameters>
          <retval type="TDragImageList"/>
        </parameters>
      </function>
      <procedure name="WndProc" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="889">
        <parameters>
          <parameter name="Msg" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="MainWndProc" visibility="protected" file="Vcl.Controls.pas" line="890">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="Assign" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="892">
        <parameters>
          <parameter name="Source" type="TDragObject"/>
        </parameters>
      </procedure>
      <function name="GetName" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="893">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <procedure name="HideDragImage" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="894">
      </procedure>
      <function name="Instance" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="895">
        <parameters>
          <retval type="NativeUInt"/>
        </parameters>
      </function>
      <procedure name="ShowDragImage" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="896">
      </procedure>
      <procedure name="AfterConstruction" visibility="public" procflags="override" file="Vcl.Controls.pas" line="898">
      </procedure>
      <procedure name="BeforeDestruction" visibility="public" procflags="override" file="Vcl.Controls.pas" line="899">
      </procedure>
      <property name="AlwaysShowDragImages" visibility="public" read="FAlwaysShowDragImages" write="FAlwaysShowDragImages" type="Boolean" file="Vcl.Controls.pas" line="901"/>
      <property name="Cancelling" visibility="public" read="FCancelling" write="FCancelling" type="Boolean" file="Vcl.Controls.pas" line="902"/>
      <property name="DragHandle" visibility="public" read="FDragHandle" write="FDragHandle" type="HWND" file="Vcl.Controls.pas" line="903"/>
      <property name="DragPos" visibility="public" read="FDragPos" write="FDragPos" type="TPoint" file="Vcl.Controls.pas" line="904"/>
      <property name="DragTarget" visibility="public" read="FDragTarget" write="FDragTarget" type="Pointer" file="Vcl.Controls.pas" line="905"/>
      <property name="DragTargetPos" visibility="public" read="FDragTargetPos" write="FDragTargetPos" type="TPoint" file="Vcl.Controls.pas" line="906"/>
      <property name="Dropped" visibility="public" read="FDropped" type="Boolean" file="Vcl.Controls.pas" line="907"/>
      <property name="MouseDeltaX" visibility="public" read="FMouseDeltaX" type="Double" default="0" file="Vcl.Controls.pas" line="908"/>
      <property name="MouseDeltaY" visibility="public" read="FMouseDeltaY" type="Double" default="0" file="Vcl.Controls.pas" line="909"/>
      <property name="RightClickCancels" visibility="public" read="FRightClickCancels" write="FRightClickCancels" type="Boolean" file="Vcl.Controls.pas" line="910"/>
    </members>
  </class>
  <classref name="TDragObjectClass" ref="TDragObject" file="Vcl.Controls.pas" line="913"/>
  <class name="TDragObjectEx" file="Vcl.Controls.pas" line="916">
    <ancestor name="TDragObject" namespace="Vcl.Controls">
      <methodref name="Capture" visibility="private"/>
      <methodref name="ReleaseCapture" visibility="private"/>
      <methodref name="Finished" visibility="protected" procflags="virtual"/>
      <methodref name="GetDragCursor" visibility="protected" procflags="virtual"/>
      <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
      <methodref name="WndProc" visibility="protected" procflags="virtual"/>
      <methodref name="MainWndProc" visibility="protected"/>
      <methodref name="Assign" visibility="public" procflags="virtual"/>
      <methodref name="GetName" visibility="public" procflags="virtual"/>
      <methodref name="HideDragImage" visibility="public" procflags="virtual"/>
      <methodref name="Instance" visibility="public" procflags="virtual"/>
      <methodref name="ShowDragImage" visibility="public" procflags="virtual"/>
      <methodref name="AfterConstruction" visibility="public" procflags="override"/>
      <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
      <propertyref name="AlwaysShowDragImages" visibility="public"/>
      <propertyref name="Cancelling" visibility="public"/>
      <propertyref name="DragHandle" visibility="public"/>
      <propertyref name="DragPos" visibility="public"/>
      <propertyref name="DragTarget" visibility="public"/>
      <propertyref name="DragTargetPos" visibility="public"/>
      <propertyref name="Dropped" visibility="public"/>
      <propertyref name="MouseDeltaX" visibility="public"/>
      <propertyref name="MouseDeltaY" visibility="public"/>
      <propertyref name="RightClickCancels" visibility="public"/>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="BeforeDestruction" visibility="public" procflags="override" file="Vcl.Controls.pas" line="918">
      </procedure>
    </members>
  </class>
  <class name="TBaseDragControlObject" file="Vcl.Controls.pas" line="922">
    <ancestor name="TDragObject" namespace="Vcl.Controls">
      <methodref name="Capture" visibility="private"/>
      <methodref name="ReleaseCapture" visibility="private"/>
      <methodref name="Finished" visibility="protected" procflags="virtual"/>
      <methodref name="GetDragCursor" visibility="protected" procflags="virtual"/>
      <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
      <methodref name="WndProc" visibility="protected" procflags="virtual"/>
      <methodref name="MainWndProc" visibility="protected"/>
      <methodref name="Assign" visibility="public" procflags="virtual"/>
      <methodref name="GetName" visibility="public" procflags="virtual"/>
      <methodref name="HideDragImage" visibility="public" procflags="virtual"/>
      <methodref name="Instance" visibility="public" procflags="virtual"/>
      <methodref name="ShowDragImage" visibility="public" procflags="virtual"/>
      <methodref name="AfterConstruction" visibility="public" procflags="override"/>
      <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
      <propertyref name="AlwaysShowDragImages" visibility="public"/>
      <propertyref name="Cancelling" visibility="public"/>
      <propertyref name="DragHandle" visibility="public"/>
      <propertyref name="DragPos" visibility="public"/>
      <propertyref name="DragTarget" visibility="public"/>
      <propertyref name="DragTargetPos" visibility="public"/>
      <propertyref name="Dropped" visibility="public"/>
      <propertyref name="MouseDeltaX" visibility="public"/>
      <propertyref name="MouseDeltaY" visibility="public"/>
      <propertyref name="RightClickCancels" visibility="public"/>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FControl" type="TControl" visibility="private" size="4" offset="64" file="Vcl.Controls.pas" line="924"/>
      <procedure name="EndDrag" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="926">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="Finished" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="927">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="Accepted" type="Boolean"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="929">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </constructor>
      <procedure name="Assign" visibility="public" procflags="override" file="Vcl.Controls.pas" line="930">
        <parameters>
          <parameter name="Source" type="TDragObject"/>
        </parameters>
      </procedure>
      <property name="Control" visibility="public" read="FControl" write="FControl" type="TControl" file="Vcl.Controls.pas" line="931"/>
    </members>
  </class>
  <class name="TDragControlObject" file="Vcl.Controls.pas" line="934">
    <ancestor name="TBaseDragControlObject" namespace="Vcl.Controls">
      <methodref name="EndDrag" visibility="protected" procflags="virtual"/>
      <methodref name="Finished" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor virtual"/>
      <methodref name="Assign" visibility="public" procflags="override"/>
      <propertyref name="Control" visibility="public"/>
      <ancestor name="TDragObject" namespace="Vcl.Controls">
        <methodref name="Capture" visibility="private"/>
        <methodref name="ReleaseCapture" visibility="private"/>
        <methodref name="Finished" visibility="protected" procflags="virtual"/>
        <methodref name="GetDragCursor" visibility="protected" procflags="virtual"/>
        <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
        <methodref name="WndProc" visibility="protected" procflags="virtual"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Assign" visibility="public" procflags="virtual"/>
        <methodref name="GetName" visibility="public" procflags="virtual"/>
        <methodref name="HideDragImage" visibility="public" procflags="virtual"/>
        <methodref name="Instance" visibility="public" procflags="virtual"/>
        <methodref name="ShowDragImage" visibility="public" procflags="virtual"/>
        <methodref name="AfterConstruction" visibility="public" procflags="override"/>
        <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
        <propertyref name="AlwaysShowDragImages" visibility="public"/>
        <propertyref name="Cancelling" visibility="public"/>
        <propertyref name="DragHandle" visibility="public"/>
        <propertyref name="DragPos" visibility="public"/>
        <propertyref name="DragTarget" visibility="public"/>
        <propertyref name="DragTargetPos" visibility="public"/>
        <propertyref name="Dropped" visibility="public"/>
        <propertyref name="MouseDeltaX" visibility="public"/>
        <propertyref name="MouseDeltaY" visibility="public"/>
        <propertyref name="RightClickCancels" visibility="public"/>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetDragCursor" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="936">
        <parameters>
          <parameter name="Accepted" type="Boolean"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <retval type="TCursor"/>
        </parameters>
      </function>
      <function name="GetDragImages" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="937">
        <parameters>
          <retval type="TDragImageList"/>
        </parameters>
      </function>
      <procedure name="HideDragImage" visibility="public" procflags="override" file="Vcl.Controls.pas" line="939">
      </procedure>
      <procedure name="ShowDragImage" visibility="public" procflags="override" file="Vcl.Controls.pas" line="940">
      </procedure>
    </members>
  </class>
  <class name="TDragControlObjectEx" file="Vcl.Controls.pas" line="944">
    <ancestor name="TDragControlObject" namespace="Vcl.Controls">
      <methodref name="GetDragCursor" visibility="protected" procflags="override"/>
      <methodref name="GetDragImages" visibility="protected" procflags="override"/>
      <methodref name="HideDragImage" visibility="public" procflags="override"/>
      <methodref name="ShowDragImage" visibility="public" procflags="override"/>
      <ancestor name="TBaseDragControlObject" namespace="Vcl.Controls">
        <methodref name="EndDrag" visibility="protected" procflags="virtual"/>
        <methodref name="Finished" visibility="protected" procflags="override"/>
        <methodref name="Create" visibility="public" procflags="constructor virtual"/>
        <methodref name="Assign" visibility="public" procflags="override"/>
        <propertyref name="Control" visibility="public"/>
        <ancestor name="TDragObject" namespace="Vcl.Controls">
          <methodref name="Capture" visibility="private"/>
          <methodref name="ReleaseCapture" visibility="private"/>
          <methodref name="Finished" visibility="protected" procflags="virtual"/>
          <methodref name="GetDragCursor" visibility="protected" procflags="virtual"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="MainWndProc" visibility="protected"/>
          <methodref name="Assign" visibility="public" procflags="virtual"/>
          <methodref name="GetName" visibility="public" procflags="virtual"/>
          <methodref name="HideDragImage" visibility="public" procflags="virtual"/>
          <methodref name="Instance" visibility="public" procflags="virtual"/>
          <methodref name="ShowDragImage" visibility="public" procflags="virtual"/>
          <methodref name="AfterConstruction" visibility="public" procflags="override"/>
          <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
          <propertyref name="AlwaysShowDragImages" visibility="public"/>
          <propertyref name="Cancelling" visibility="public"/>
          <propertyref name="DragHandle" visibility="public"/>
          <propertyref name="DragPos" visibility="public"/>
          <propertyref name="DragTarget" visibility="public"/>
          <propertyref name="DragTargetPos" visibility="public"/>
          <propertyref name="Dropped" visibility="public"/>
          <propertyref name="MouseDeltaX" visibility="public"/>
          <propertyref name="MouseDeltaY" visibility="public"/>
          <propertyref name="RightClickCancels" visibility="public"/>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="BeforeDestruction" visibility="public" procflags="override" file="Vcl.Controls.pas" line="946">
      </procedure>
    </members>
  </class>
  <class name="TDragDockObject" file="Vcl.Controls.pas" line="950">
    <ancestor name="TBaseDragControlObject" namespace="Vcl.Controls">
      <methodref name="EndDrag" visibility="protected" procflags="virtual"/>
      <methodref name="Finished" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor virtual"/>
      <methodref name="Assign" visibility="public" procflags="override"/>
      <propertyref name="Control" visibility="public"/>
      <ancestor name="TDragObject" namespace="Vcl.Controls">
        <methodref name="Capture" visibility="private"/>
        <methodref name="ReleaseCapture" visibility="private"/>
        <methodref name="Finished" visibility="protected" procflags="virtual"/>
        <methodref name="GetDragCursor" visibility="protected" procflags="virtual"/>
        <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
        <methodref name="WndProc" visibility="protected" procflags="virtual"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Assign" visibility="public" procflags="virtual"/>
        <methodref name="GetName" visibility="public" procflags="virtual"/>
        <methodref name="HideDragImage" visibility="public" procflags="virtual"/>
        <methodref name="Instance" visibility="public" procflags="virtual"/>
        <methodref name="ShowDragImage" visibility="public" procflags="virtual"/>
        <methodref name="AfterConstruction" visibility="public" procflags="override"/>
        <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
        <propertyref name="AlwaysShowDragImages" visibility="public"/>
        <propertyref name="Cancelling" visibility="public"/>
        <propertyref name="DragHandle" visibility="public"/>
        <propertyref name="DragPos" visibility="public"/>
        <propertyref name="DragTarget" visibility="public"/>
        <propertyref name="DragTargetPos" visibility="public"/>
        <propertyref name="Dropped" visibility="public"/>
        <propertyref name="MouseDeltaX" visibility="public"/>
        <propertyref name="MouseDeltaY" visibility="public"/>
        <propertyref name="RightClickCancels" visibility="public"/>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FBrush" type="TBrush" visibility="private" size="4" offset="72" file="Vcl.Controls.pas" line="952"/>
      <field name="FDockRect" type="TRect" visibility="private" size="16" offset="76" file="Vcl.Controls.pas" line="953"/>
      <field name="FDropAlign" type="TAlign" visibility="private" size="1" offset="92" file="Vcl.Controls.pas" line="954"/>
      <field name="FDropOnControl" type="TControl" visibility="private" size="4" offset="96" file="Vcl.Controls.pas" line="955"/>
      <field name="FEraseDockRect" type="TRect" visibility="private" size="16" offset="100" file="Vcl.Controls.pas" line="956"/>
      <field name="FFloating" type="Boolean" visibility="private" size="1" offset="116" file="Vcl.Controls.pas" line="957"/>
      <procedure name="SetBrush" visibility="private" file="Vcl.Controls.pas" line="958">
        <parameters>
          <parameter name="Value" type="TBrush"/>
        </parameters>
      </procedure>
      <procedure name="AdjustDockRect" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="960">
        <parameters>
          <parameter name="ARect" type="TRect"/>
        </parameters>
      </procedure>
      <procedure name="DrawDragDockImage" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="961">
      </procedure>
      <procedure name="EndDrag" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="962">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="EraseDragDockImage" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="963">
      </procedure>
      <function name="GetDragCursor" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="964">
        <parameters>
          <parameter name="Accepted" type="Boolean"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <retval type="TCursor"/>
        </parameters>
      </function>
      <function name="GetFrameWidth" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="965">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetEraseWhenMoving" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="966">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="968">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="969">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="Assign" visibility="public" procflags="override" file="Vcl.Controls.pas" line="970">
        <parameters>
          <parameter name="Source" type="TDragObject"/>
        </parameters>
      </procedure>
      <property name="Brush" visibility="public" read="FBrush" write="SetBrush" type="TBrush" file="Vcl.Controls.pas" line="971"/>
      <property name="DockRect" visibility="public" read="FDockRect" write="FDockRect" type="TRect" file="Vcl.Controls.pas" line="972"/>
      <property name="DropAlign" visibility="public" read="FDropAlign" type="TAlign" file="Vcl.Controls.pas" line="973"/>
      <property name="DropOnControl" visibility="public" read="FDropOnControl" type="TControl" file="Vcl.Controls.pas" line="974"/>
      <property name="EraseDockRect" visibility="public" read="FEraseDockRect" write="FEraseDockRect" type="TRect" file="Vcl.Controls.pas" line="975"/>
      <property name="EraseWhenMoving" visibility="public" read="GetEraseWhenMoving" type="Boolean" file="Vcl.Controls.pas" line="976"/>
      <property name="Floating" visibility="public" read="FFloating" write="FFloating" type="Boolean" file="Vcl.Controls.pas" line="977"/>
      <property name="FrameWidth" visibility="public" read="GetFrameWidth" type="Integer" file="Vcl.Controls.pas" line="978"/>
    </members>
  </class>
  <class name="TDragDockObjectEx" file="Vcl.Controls.pas" line="982">
    <ancestor name="TDragDockObject" namespace="Vcl.Controls">
      <methodref name="SetBrush" visibility="private"/>
      <methodref name="AdjustDockRect" visibility="protected" procflags="virtual"/>
      <methodref name="DrawDragDockImage" visibility="protected" procflags="virtual"/>
      <methodref name="EndDrag" visibility="protected" procflags="override"/>
      <methodref name="EraseDragDockImage" visibility="protected" procflags="virtual"/>
      <methodref name="GetDragCursor" visibility="protected" procflags="override"/>
      <methodref name="GetFrameWidth" visibility="protected" procflags="virtual"/>
      <methodref name="GetEraseWhenMoving" visibility="protected" procflags="virtual"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="Assign" visibility="public" procflags="override"/>
      <propertyref name="Brush" visibility="public"/>
      <propertyref name="DockRect" visibility="public"/>
      <propertyref name="DropAlign" visibility="public"/>
      <propertyref name="DropOnControl" visibility="public"/>
      <propertyref name="EraseDockRect" visibility="public"/>
      <propertyref name="EraseWhenMoving" visibility="public"/>
      <propertyref name="Floating" visibility="public"/>
      <propertyref name="FrameWidth" visibility="public"/>
      <ancestor name="TBaseDragControlObject" namespace="Vcl.Controls">
        <methodref name="EndDrag" visibility="protected" procflags="virtual"/>
        <methodref name="Finished" visibility="protected" procflags="override"/>
        <methodref name="Create" visibility="public" procflags="constructor virtual"/>
        <methodref name="Assign" visibility="public" procflags="override"/>
        <propertyref name="Control" visibility="public"/>
        <ancestor name="TDragObject" namespace="Vcl.Controls">
          <methodref name="Capture" visibility="private"/>
          <methodref name="ReleaseCapture" visibility="private"/>
          <methodref name="Finished" visibility="protected" procflags="virtual"/>
          <methodref name="GetDragCursor" visibility="protected" procflags="virtual"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="MainWndProc" visibility="protected"/>
          <methodref name="Assign" visibility="public" procflags="virtual"/>
          <methodref name="GetName" visibility="public" procflags="virtual"/>
          <methodref name="HideDragImage" visibility="public" procflags="virtual"/>
          <methodref name="Instance" visibility="public" procflags="virtual"/>
          <methodref name="ShowDragImage" visibility="public" procflags="virtual"/>
          <methodref name="AfterConstruction" visibility="public" procflags="override"/>
          <methodref name="BeforeDestruction" visibility="public" procflags="override"/>
          <propertyref name="AlwaysShowDragImages" visibility="public"/>
          <propertyref name="Cancelling" visibility="public"/>
          <propertyref name="DragHandle" visibility="public"/>
          <propertyref name="DragPos" visibility="public"/>
          <propertyref name="DragTarget" visibility="public"/>
          <propertyref name="DragTargetPos" visibility="public"/>
          <propertyref name="Dropped" visibility="public"/>
          <propertyref name="MouseDeltaX" visibility="public"/>
          <propertyref name="MouseDeltaY" visibility="public"/>
          <propertyref name="RightClickCancels" visibility="public"/>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="BeforeDestruction" visibility="public" procflags="override" file="Vcl.Controls.pas" line="984">
      </procedure>
    </members>
  </class>
  <type name="TCanvasDC" type="cardinal" loBound="0" hiBound="-1" file="Winapi.Windows.pas" line="4040"/>
  <class name="TControlCanvas" file="Vcl.Controls.pas" line="1027">
    <ancestor name="TCanvas" namespace="Vcl.Graphics">
      <methodref name="CreateBrush" visibility="private"/>
      <methodref name="CreateFont" visibility="private"/>
      <methodref name="CreatePen" visibility="private"/>
      <methodref name="BrushChanged" visibility="private"/>
      <methodref name="DeselectHandles" visibility="private"/>
      <methodref name="FontChanged" visibility="private"/>
      <methodref name="PenChanged" visibility="private"/>
      <methodref name="GetCanvasOrientation" visibility="protected" procflags="override"/>
      <methodref name="GetClipRect" visibility="protected" procflags="override"/>
      <methodref name="GetPenPos" visibility="protected" procflags="override"/>
      <methodref name="GetPixel" visibility="protected" procflags="override"/>
      <methodref name="GetHandle" visibility="protected"/>
      <methodref name="SetBrush" visibility="protected"/>
      <methodref name="SetFont" visibility="protected"/>
      <methodref name="SetHandle" visibility="protected"/>
      <methodref name="SetPen" visibility="protected"/>
      <methodref name="SetPenPos" visibility="protected" procflags="override"/>
      <methodref name="SetPixel" visibility="protected" procflags="override"/>
      <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
      <methodref name="RequiredState" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="Arc" visibility="public" procflags="override"/>
      <methodref name="ArcTo" visibility="public" procflags="override"/>
      <methodref name="AngleArc" visibility="public" procflags="override"/>
      <methodref name="BrushCopy" visibility="public" procflags="override"/>
      <methodref name="Chord" visibility="public" procflags="override"/>
      <methodref name="CopyRect" visibility="public"/>
      <methodref name="Draw" visibility="public" procflags="overload override"/>
      <methodref name="Draw" visibility="public" procflags="overload override"/>
      <methodref name="DrawFocusRect" visibility="public" procflags="override"/>
      <methodref name="Ellipse" visibility="public" procflags="overload override"/>
      <methodref name="FillRect" visibility="public" procflags="override"/>
      <methodref name="FloodFill" visibility="public" procflags="override"/>
      <methodref name="FrameRect" visibility="public" procflags="override"/>
      <methodref name="HandleAllocated" visibility="public"/>
      <methodref name="LineTo" visibility="public" procflags="override"/>
      <methodref name="MoveTo" visibility="public" procflags="override"/>
      <methodref name="Pie" visibility="public" procflags="override"/>
      <methodref name="Polygon" visibility="public" procflags="override"/>
      <methodref name="Polyline" visibility="public" procflags="override"/>
      <methodref name="PolyBezier" visibility="public" procflags="override"/>
      <methodref name="PolyBezierTo" visibility="public" procflags="override"/>
      <methodref name="Rectangle" visibility="public" procflags="overload override"/>
      <methodref name="Refresh" visibility="public" procflags="override"/>
      <methodref name="RoundRect" visibility="public" procflags="overload override"/>
      <methodref name="StretchDraw" visibility="public" procflags="override"/>
      <methodref name="TextExtent" visibility="public" procflags="override"/>
      <methodref name="TextOut" visibility="public" procflags="override"/>
      <methodref name="TextRect" visibility="public" procflags="overload override"/>
      <methodref name="TextRect" visibility="public" procflags="overload override"/>
      <propertyref name="Handle" visibility="public"/>
      <propertyref name="Brush" visibility="published"/>
      <propertyref name="CopyMode" visibility="published"/>
      <propertyref name="Font" visibility="published"/>
      <propertyref name="Pen" visibility="published"/>
      <ancestor name="TCustomCanvas" namespace="Vcl.Graphics">
        <methodref name="GetCanvasOrientation" visibility="protected" procflags="abstract virtual"/>
        <methodref name="GetClipRect" visibility="protected" procflags="abstract virtual"/>
        <methodref name="GetPenPos" visibility="protected" procflags="abstract virtual"/>
        <methodref name="GetPixel" visibility="protected" procflags="abstract virtual"/>
        <methodref name="SetPenPos" visibility="protected" procflags="abstract virtual"/>
        <methodref name="SetPixel" visibility="protected" procflags="abstract virtual"/>
        <methodref name="Changed" visibility="protected" procflags="virtual"/>
        <methodref name="Changing" visibility="protected" procflags="virtual"/>
        <methodref name="RequiredState" visibility="protected" procflags="abstract virtual"/>
        <methodref name="Arc" visibility="public" procflags="abstract virtual"/>
        <methodref name="ArcTo" visibility="public" procflags="abstract virtual"/>
        <methodref name="AngleArc" visibility="public" procflags="abstract virtual"/>
        <methodref name="BrushCopy" visibility="public" procflags="abstract virtual"/>
        <methodref name="Chord" visibility="public" procflags="abstract virtual"/>
        <methodref name="Draw" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="Draw" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="DrawFocusRect" visibility="public" procflags="abstract virtual"/>
        <methodref name="Ellipse" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="Ellipse" visibility="public" procflags="overload"/>
        <methodref name="FillRect" visibility="public" procflags="abstract virtual"/>
        <methodref name="FloodFill" visibility="public" procflags="abstract virtual"/>
        <methodref name="FrameRect" visibility="public" procflags="abstract virtual"/>
        <methodref name="LineTo" visibility="public" procflags="abstract virtual"/>
        <methodref name="Lock" visibility="public"/>
        <methodref name="MoveTo" visibility="public" procflags="abstract virtual"/>
        <methodref name="Pie" visibility="public" procflags="abstract virtual"/>
        <methodref name="Polygon" visibility="public" procflags="abstract virtual"/>
        <methodref name="Polyline" visibility="public" procflags="abstract virtual"/>
        <methodref name="PolyBezier" visibility="public" procflags="abstract virtual"/>
        <methodref name="PolyBezierTo" visibility="public" procflags="abstract virtual"/>
        <methodref name="Rectangle" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="Rectangle" visibility="public" procflags="overload"/>
        <methodref name="Refresh" visibility="public" procflags="abstract virtual"/>
        <methodref name="RoundRect" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="RoundRect" visibility="public" procflags="overload"/>
        <methodref name="StretchDraw" visibility="public" procflags="abstract virtual"/>
        <methodref name="TextExtent" visibility="public" procflags="abstract virtual"/>
        <methodref name="TextHeight" visibility="public"/>
        <methodref name="TextOut" visibility="public" procflags="abstract virtual"/>
        <methodref name="TextRect" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="TextRect" visibility="public" procflags="abstract overload virtual"/>
        <methodref name="TextWidth" visibility="public"/>
        <methodref name="TryLock" visibility="public"/>
        <methodref name="Unlock" visibility="public"/>
        <propertyref name="ClipRect" visibility="public"/>
        <propertyref name="LockCount" visibility="public"/>
        <propertyref name="CanvasOrientation" visibility="public"/>
        <propertyref name="PenPos" visibility="public"/>
        <propertyref name="Pixels" visibility="public"/>
        <propertyref name="TextFlags" visibility="public"/>
        <eventref name="OnChange" visibility="public"/>
        <eventref name="OnChanging" visibility="public"/>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FControl" type="TControl" visibility="private" size="4" offset="88" file="Vcl.Controls.pas" line="1029"/>
      <field name="FDeviceContext" type="HDC" visibility="private" size="4" offset="92" file="Vcl.Controls.pas" line="1030"/>
      <field name="FWindowHandle" type="HWND" visibility="private" size="4" offset="96" file="Vcl.Controls.pas" line="1032"/>
      <procedure name="SetControl" visibility="private" file="Vcl.Controls.pas" line="1034">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="CreateHandle" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1036">
      </procedure>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="1038">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="FreeHandle" visibility="public" file="Vcl.Controls.pas" line="1039">
      </procedure>
      <procedure name="UpdateTextFlags" visibility="public" file="Vcl.Controls.pas" line="1040">
      </procedure>
      <property name="Control" visibility="public" read="FControl" write="SetControl" type="TControl" file="Vcl.Controls.pas" line="1041"/>
    </members>
  </class>
  <class name="TCustomControlAction" file="Vcl.Controls.pas" line="1046">
    <ancestor name="TCustomAction" namespace="Vcl.ActnList">
      <methodref name="SetImageName" visibility="private"/>
      <methodref name="GetCustomActionList" visibility="private" procflags="inline"/>
      <methodref name="SetCustomActionList" visibility="private" procflags="inline"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="CreateShortCutList" visibility="protected" procflags="override"/>
      <methodref name="SetImageIndex" visibility="protected" procflags="override"/>
      <methodref name="Change" visibility="protected" procflags="override"/>
      <methodref name="GetImages" visibility="protected" procflags="virtual"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="Execute" visibility="public" procflags="override"/>
      <methodref name="Update" visibility="public" procflags="override"/>
      <propertyref name="Images" visibility="public"/>
      <propertyref name="ImageName" visibility="public"/>
      <propertyref name="ActionList" visibility="public"/>
      <ancestor name="TContainedAction" namespace="System.Actions">
        <methodref name="GetIndex" visibility="private">
        </methodref>
        <methodref name="SetIndex" visibility="private">
        </methodref>
        <methodref name="SetCategory" visibility="private">
        </methodref>
        <methodref name="GetSecondaryShortCuts" visibility="private">
        </methodref>
        <methodref name="SetSecondaryShortCuts" visibility="private">
        </methodref>
        <methodref name="IsSecondaryShortCutsStored" visibility="private">
        </methodref>
        <methodref name="SetActionList" visibility="private">
        </methodref>
        <methodref name="ReadState" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SecondaryShortCutsCreated" visibility="protected">
        </methodref>
        <methodref name="CreateShortCutList" visibility="protected" procflags="virtual">
        </methodref>
        <propertyref name="SavedEnabledState" visibility="protected">
        </propertyref>
        <methodref name="AssignTo" visibility="protected" procflags="override">
        </methodref>
        <methodref name="HandleShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetCaption" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetName" visibility="protected" procflags="override">
        </methodref>
        <methodref name="SetChecked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHint" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetVisible" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Create" visibility="public" procflags="constructor override">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="GetParentComponent" visibility="public" procflags="override">
        </methodref>
        <methodref name="HasParent" visibility="public" procflags="override">
        </methodref>
        <methodref name="SetParentComponent" visibility="public" procflags="override">
        </methodref>
        <propertyref name="ActionList" visibility="public">
        </propertyref>
        <methodref name="Suspended" visibility="public" procflags="override">
        </methodref>
        <propertyref name="Index" visibility="public">
        </propertyref>
        <propertyref name="DisableIfNoHandler" visibility="public">
        </propertyref>
        <propertyref name="AutoCheck" visibility="public">
        </propertyref>
        <propertyref name="Caption" visibility="public">
        </propertyref>
        <propertyref name="Checked" visibility="public">
        </propertyref>
        <propertyref name="Enabled" visibility="public">
        </propertyref>
        <propertyref name="GroupIndex" visibility="public">
        </propertyref>
        <propertyref name="HelpContext" visibility="public">
        </propertyref>
        <propertyref name="HelpKeyword" visibility="public">
        </propertyref>
        <propertyref name="HelpType" visibility="public">
        </propertyref>
        <propertyref name="Hint" visibility="public">
        </propertyref>
        <propertyref name="Visible" visibility="public">
        </propertyref>
        <propertyref name="ShortCut" visibility="public">
        </propertyref>
        <propertyref name="SecondaryShortCuts" visibility="public">
        </propertyref>
        <propertyref name="ImageIndex" visibility="public">
        </propertyref>
        <methodref name="DoHint" visibility="public" procflags="dynamic">
        </methodref>
        <eventref name="OnHint" visibility="public">
        </eventref>
        <propertyref name="StatusAction" visibility="public">
        </propertyref>
        <propertyref name="Category" visibility="published">
        </propertyref>
        <ancestor name="TBasicAction" namespace="System.Classes">
          <methodref name="GetClientCount" visibility="private">
          </methodref>
          <methodref name="GetClient" visibility="private">
          </methodref>
          <methodref name="SetActionComponent" visibility="private">
          </methodref>
          <methodref name="Change" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
          </methodref>
          <eventref name="OnChange" visibility="protected">
          </eventref>
          <methodref name="Notification" visibility="protected" procflags="override">
          </methodref>
          <propertyref name="ClientCount" visibility="protected">
          </propertyref>
          <propertyref name="Clients" visibility="protected">
          </propertyref>
          <methodref name="RegisterChanges" visibility="protected">
          </methodref>
          <methodref name="UnRegisterChanges" visibility="protected">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor override">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Suspended" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="HandlesTarget" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="UpdateTarget" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ExecuteTarget" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Execute" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="Update" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="ActionComponent" visibility="public">
          </propertyref>
          <eventref name="OnExecute" visibility="public">
          </eventref>
          <eventref name="OnUpdate" visibility="public">
          </eventref>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FDropdownMenu" type="TPopupMenu" visibility="private" size="4" offset="176" file="Vcl.Controls.pas" line="1048"/>
      <field name="FPopupMenu" type="TPopupMenu" visibility="private" size="4" offset="180" file="Vcl.Controls.pas" line="1049"/>
      <field name="FEnableDropdown" type="Boolean" visibility="private" size="1" offset="184" file="Vcl.Controls.pas" line="1050"/>
      <procedure name="SetDropdownMenu" visibility="private" file="Vcl.Controls.pas" line="1051">
        <parameters>
          <parameter name="Value" type="TPopupMenu"/>
        </parameters>
      </procedure>
      <procedure name="SetEnableDropdown" visibility="private" file="Vcl.Controls.pas" line="1052">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetPopupMenu" visibility="private" file="Vcl.Controls.pas" line="1053">
        <parameters>
          <parameter name="Value" type="TPopupMenu"/>
        </parameters>
      </procedure>
      <property name="DropdownMenu" visibility="public" read="FDropdownMenu" write="SetDropdownMenu" type="TPopupMenu" file="Vcl.Controls.pas" line="1055"/>
      <property name="EnableDropdown" visibility="public" read="FEnableDropdown" write="SetEnableDropdown" type="Boolean" default="0" file="Vcl.Controls.pas" line="1056"/>
      <property name="PopupMenu" visibility="public" read="FPopupMenu" write="SetPopupMenu" type="TPopupMenu" file="Vcl.Controls.pas" line="1057"/>
    </members>
  </class>
  <class name="TControlAction" file="Vcl.Controls.pas" line="1062">
    <ancestor name="TCustomControlAction" namespace="Vcl.Controls">
      <methodref name="SetDropdownMenu" visibility="private"/>
      <methodref name="SetEnableDropdown" visibility="private"/>
      <methodref name="SetPopupMenu" visibility="private"/>
      <propertyref name="DropdownMenu" visibility="public"/>
      <propertyref name="EnableDropdown" visibility="public"/>
      <propertyref name="PopupMenu" visibility="public"/>
      <ancestor name="TCustomAction" namespace="Vcl.ActnList">
        <methodref name="SetImageName" visibility="private"/>
        <methodref name="GetCustomActionList" visibility="private" procflags="inline"/>
        <methodref name="SetCustomActionList" visibility="private" procflags="inline"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="CreateShortCutList" visibility="protected" procflags="override"/>
        <methodref name="SetImageIndex" visibility="protected" procflags="override"/>
        <methodref name="Change" visibility="protected" procflags="override"/>
        <methodref name="GetImages" visibility="protected" procflags="virtual"/>
        <methodref name="Loaded" visibility="protected" procflags="override"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="Execute" visibility="public" procflags="override"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <propertyref name="Images" visibility="public"/>
        <propertyref name="ImageName" visibility="public"/>
        <propertyref name="ActionList" visibility="public"/>
        <ancestor name="TContainedAction" namespace="System.Actions">
          <methodref name="GetIndex" visibility="private">
          </methodref>
          <methodref name="SetIndex" visibility="private">
          </methodref>
          <methodref name="SetCategory" visibility="private">
          </methodref>
          <methodref name="GetSecondaryShortCuts" visibility="private">
          </methodref>
          <methodref name="SetSecondaryShortCuts" visibility="private">
          </methodref>
          <methodref name="IsSecondaryShortCutsStored" visibility="private">
          </methodref>
          <methodref name="SetActionList" visibility="private">
          </methodref>
          <methodref name="ReadState" visibility="protected" procflags="override">
          </methodref>
          <methodref name="SecondaryShortCutsCreated" visibility="protected">
          </methodref>
          <methodref name="CreateShortCutList" visibility="protected" procflags="virtual">
          </methodref>
          <propertyref name="SavedEnabledState" visibility="protected">
          </propertyref>
          <methodref name="AssignTo" visibility="protected" procflags="override">
          </methodref>
          <methodref name="HandleShortCut" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetCaption" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetName" visibility="protected" procflags="override">
          </methodref>
          <methodref name="SetChecked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpType" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetVisible" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetShortCut" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor override">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="GetParentComponent" visibility="public" procflags="override">
          </methodref>
          <methodref name="HasParent" visibility="public" procflags="override">
          </methodref>
          <methodref name="SetParentComponent" visibility="public" procflags="override">
          </methodref>
          <propertyref name="ActionList" visibility="public">
          </propertyref>
          <methodref name="Suspended" visibility="public" procflags="override">
          </methodref>
          <propertyref name="Index" visibility="public">
          </propertyref>
          <propertyref name="DisableIfNoHandler" visibility="public">
          </propertyref>
          <propertyref name="AutoCheck" visibility="public">
          </propertyref>
          <propertyref name="Caption" visibility="public">
          </propertyref>
          <propertyref name="Checked" visibility="public">
          </propertyref>
          <propertyref name="Enabled" visibility="public">
          </propertyref>
          <propertyref name="GroupIndex" visibility="public">
          </propertyref>
          <propertyref name="HelpContext" visibility="public">
          </propertyref>
          <propertyref name="HelpKeyword" visibility="public">
          </propertyref>
          <propertyref name="HelpType" visibility="public">
          </propertyref>
          <propertyref name="Hint" visibility="public">
          </propertyref>
          <propertyref name="Visible" visibility="public">
          </propertyref>
          <propertyref name="ShortCut" visibility="public">
          </propertyref>
          <propertyref name="SecondaryShortCuts" visibility="public">
          </propertyref>
          <propertyref name="ImageIndex" visibility="public">
          </propertyref>
          <methodref name="DoHint" visibility="public" procflags="dynamic">
          </methodref>
          <eventref name="OnHint" visibility="public">
          </eventref>
          <propertyref name="StatusAction" visibility="public">
          </propertyref>
          <propertyref name="Category" visibility="published">
          </propertyref>
          <ancestor name="TBasicAction" namespace="System.Classes">
            <methodref name="GetClientCount" visibility="private">
            </methodref>
            <methodref name="GetClient" visibility="private">
            </methodref>
            <methodref name="SetActionComponent" visibility="private">
            </methodref>
            <methodref name="Change" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
            </methodref>
            <eventref name="OnChange" visibility="protected">
            </eventref>
            <methodref name="Notification" visibility="protected" procflags="override">
            </methodref>
            <propertyref name="ClientCount" visibility="protected">
            </propertyref>
            <propertyref name="Clients" visibility="protected">
            </propertyref>
            <methodref name="RegisterChanges" visibility="protected">
            </methodref>
            <methodref name="UnRegisterChanges" visibility="protected">
            </methodref>
            <methodref name="Create" visibility="public" procflags="constructor override">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Suspended" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="HandlesTarget" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="UpdateTarget" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ExecuteTarget" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Execute" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="Update" visibility="public" procflags="virtual">
            </methodref>
            <propertyref name="ActionComponent" visibility="public">
            </propertyref>
            <eventref name="OnExecute" visibility="public">
            </eventref>
            <eventref name="OnUpdate" visibility="public">
            </eventref>
            <ancestor name="TComponent" namespace="System.Classes">
              <interfaces>
                <implements name="IInterfaceComponentReference"/>
                <implements name="IInterface"/>
              </interfaces>
              <methodref name="GetComObject" visibility="private">
              </methodref>
              <methodref name="GetComponent" visibility="private">
              </methodref>
              <methodref name="GetComponentCount" visibility="private">
              </methodref>
              <methodref name="GetComponentIndex" visibility="private">
              </methodref>
              <methodref name="Insert" visibility="private">
              </methodref>
              <methodref name="ReadLeft" visibility="private">
              </methodref>
              <methodref name="ReadTop" visibility="private">
              </methodref>
              <methodref name="Remove" visibility="private">
              </methodref>
              <methodref name="RemoveNotification" visibility="private">
              </methodref>
              <methodref name="SetComponentIndex" visibility="private">
              </methodref>
              <methodref name="SetReference" visibility="private">
              </methodref>
              <methodref name="WriteLeft" visibility="private">
              </methodref>
              <methodref name="WriteTop" visibility="private">
              </methodref>
              <methodref name="IntfGetComponent" visibility="private">
              </methodref>
              <methodref name="DoGetDeltaStreams" visibility="private">
              </methodref>
              <methodref name="ReadDeltaStream" visibility="private">
              </methodref>
              <methodref name="ReadDeltaState" visibility="private">
              </methodref>
              <methodref name="FindSortedComponent" visibility="private">
              </methodref>
              <methodref name="AddSortedComponent" visibility="private">
              </methodref>
              <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
              </methodref>
              <methodref name="Create@" visibility="class private" procflags="class constructor noself">
              </methodref>
              <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ChangeName" visibility="protected">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="override">
              </methodref>
              <methodref name="GetChildren" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="override">
              </methodref>
              <methodref name="Loaded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="Notification" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ReadState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="CanObserve" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetObservers" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetAncestor" visibility="protected">
              </methodref>
              <methodref name="SetDesigning" visibility="protected">
              </methodref>
              <methodref name="SetInline" visibility="protected">
              </methodref>
              <methodref name="SetDesignInstance" visibility="protected">
              </methodref>
              <methodref name="SetName" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updating" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Updated" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
              </methodref>
              <methodref name="ValidateRename" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="WriteState" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="RemoveFreeNotifications" visibility="protected">
              </methodref>
              <methodref name="QueryInterface" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="_AddRef" visibility="protected">
              </methodref>
              <methodref name="_Release" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfoCount" visibility="protected">
              </methodref>
              <methodref name="GetTypeInfo" visibility="protected">
              </methodref>
              <methodref name="GetIDsOfNames" visibility="protected">
              </methodref>
              <methodref name="Invoke" visibility="protected">
              </methodref>
              <eventref name="OnGetDeltaStreams" visibility="protected">
              </eventref>
              <methodref name="Create" visibility="public" procflags="constructor virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="override">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="BeginInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndInvoke" visibility="public" procflags="overload">
              </methodref>
              <methodref name="EndFunctionInvoke" visibility="public">
              </methodref>
              <methodref name="DestroyComponents" visibility="public">
              </methodref>
              <methodref name="Destroying" visibility="public">
              </methodref>
              <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="FindComponent" visibility="public">
              </methodref>
              <methodref name="FreeNotification" visibility="public">
              </methodref>
              <methodref name="RemoveFreeNotification" visibility="public">
              </methodref>
              <methodref name="FreeOnRelease" visibility="public">
              </methodref>
              <methodref name="GetEnumerator" visibility="public" procflags="inline">
              </methodref>
              <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="override">
              </methodref>
              <methodref name="HasParent" visibility="public" procflags="dynamic">
              </methodref>
              <methodref name="InsertComponent" visibility="public">
              </methodref>
              <methodref name="RemoveComponent" visibility="public">
              </methodref>
              <methodref name="SetSubComponent" visibility="public">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="override">
              </methodref>
              <methodref name="UpdateAction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="IsImplementorOf" visibility="public">
              </methodref>
              <methodref name="ReferenceInterface" visibility="public">
              </methodref>
              <propertyref name="ComObject" visibility="public">
              </propertyref>
              <propertyref name="Components" visibility="public">
              </propertyref>
              <propertyref name="ComponentCount" visibility="public">
              </propertyref>
              <propertyref name="ComponentIndex" visibility="public">
              </propertyref>
              <propertyref name="ComponentState" visibility="public">
              </propertyref>
              <propertyref name="ComponentStyle" visibility="public">
              </propertyref>
              <propertyref name="DesignInfo" visibility="public">
              </propertyref>
              <propertyref name="Owner" visibility="public">
              </propertyref>
              <propertyref name="VCLComObject" visibility="public">
              </propertyref>
              <propertyref name="Observers" visibility="public">
              </propertyref>
              <propertyref name="Name" visibility="published">
              </propertyref>
              <propertyref name="Tag" visibility="published">
              </propertyref>
              <ancestor name="TPersistent" namespace="System.Classes">
                <methodref name="AssignError" visibility="private">
                </methodref>
                <methodref name="AssignTo" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="DefineProperties" visibility="protected" procflags="virtual">
                </methodref>
                <methodref name="GetOwner" visibility="protected" procflags="dynamic">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor override">
                </methodref>
                <methodref name="Assign" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetNamePath" visibility="public" procflags="dynamic">
                </methodref>
                <ancestor name="TObject" namespace="System">
                  <methodref name="Create" visibility="public" procflags="constructor">
                  </methodref>
                  <methodref name="Free" visibility="public">
                  </methodref>
                  <methodref name="DisposeOf" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="InitInstance" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="CleanupInstance" visibility="public">
                  </methodref>
                  <methodref name="ClassType" visibility="public" procflags="inline">
                  </methodref>
                  <methodref name="ClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassNameIs" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="ClassParent" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="ClassInfo" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InstanceSize" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="InheritsFrom" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodAddress" visibility="public" procflags="class overload">
                  </methodref>
                  <methodref name="MethodName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="QualifiedClassName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="FieldAddress" visibility="public" procflags="overload">
                  </methodref>
                  <methodref name="GetInterface" visibility="public">
                  </methodref>
                  <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                  </methodref>
                  <methodref name="UnitName" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="UnitScope" visibility="public" procflags="class">
                  </methodref>
                  <methodref name="Equals" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="GetHashCode" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="ToString" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="SafeCallException" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Dispatch" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="NewInstance" visibility="public" procflags="class virtual">
                  </methodref>
                  <methodref name="FreeInstance" visibility="public" procflags="virtual">
                  </methodref>
                  <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                  </methodref>
                  <methodref name="GetDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                  </methodref>
                  <propertyref name="Disposed" visibility="protected">
                  </propertyref>
                </ancestor>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <property name="AutoCheck" visibility="published" read="FAutoCheck" write="SetAutoCheck" type="Boolean" default="0" hoisted="true" file="Vcl.Controls.pas" line="1064"/>
      <property name="Caption" visibility="published" read="FCaption" write="SetCaption" type="string" default="0" hoisted="true" file="Vcl.Controls.pas" line="1065"/>
      <property name="Checked" visibility="published" read="FChecked" write="SetChecked" type="Boolean" default="0" hoisted="true" file="Vcl.Controls.pas" line="1066"/>
      <property name="DropdownMenu" visibility="published" read="FDropdownMenu" write="SetDropdownMenu" type="TPopupMenu" hoisted="true" file="Vcl.Controls.pas" line="1067"/>
      <property name="Enabled" visibility="published" read="FEnabled" write="SetEnabled" type="Boolean" default="1" hoisted="true" file="Vcl.Controls.pas" line="1068"/>
      <property name="EnableDropdown" visibility="published" read="FEnableDropdown" write="SetEnableDropdown" type="Boolean" default="0" hoisted="true" file="Vcl.Controls.pas" line="1069"/>
      <property name="GroupIndex" visibility="published" read="FGroupIndex" write="SetGroupIndex" type="Integer" default="0" hoisted="true" file="Vcl.Controls.pas" line="1070"/>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" type="THelpContext" default="0" hoisted="true" file="Vcl.Controls.pas" line="1071"/>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" type="string" default="0" hoisted="true" file="Vcl.Controls.pas" line="1072"/>
      <property name="HelpType" visibility="published" read="FHelpType" write="SetHelpType" type="THelpType" default="0" hoisted="true" file="Vcl.Controls.pas" line="1073"/>
      <property name="Hint" visibility="published" read="FHint" write="SetHint" type="string" default="0" hoisted="true" file="Vcl.Controls.pas" line="1074"/>
      <property name="ImageIndex" visibility="published" read="FImageIndex" write="SetImageIndex" type="TImageIndex" default="-1" hoisted="true" file="Vcl.Controls.pas" line="1075"/>
      <property name="PopupMenu" visibility="published" read="FPopupMenu" write="SetPopupMenu" type="TPopupMenu" hoisted="true" file="Vcl.Controls.pas" line="1076"/>
      <property name="ShortCut" visibility="published" read="FShortCut" write="SetShortCut" type="TShortCut" default="0" hoisted="true" file="Vcl.Controls.pas" line="1077"/>
      <property name="SecondaryShortCuts" visibility="published" read="GetSecondaryShortCuts" write="SetSecondaryShortCuts" stored="IsSecondaryShortCutsStored" type="TCustomShortCutList" hoisted="true" file="Vcl.Controls.pas" line="1078"/>
      <property name="Visible" visibility="published" read="FVisible" write="SetVisible" type="Boolean" default="1" hoisted="true" file="Vcl.Controls.pas" line="1079"/>
      <event name="OnExecute" visibility="published" read="FOnExecute" write="SetOnExecute" type="TNotifyEvent" hoisted="true" file="Vcl.Controls.pas" line="1080"/>
      <event name="OnHint" visibility="published" read="FOnHint" write="FOnHint" type="THintEvent" hoisted="true" file="Vcl.Controls.pas" line="1081"/>
      <event name="OnUpdate" visibility="published" read="FOnUpdate" write="FOnUpdate" type="TNotifyEvent" hoisted="true" file="Vcl.Controls.pas" line="1082"/>
    </members>
  </class>
  <class name="TControlActionLink" file="Vcl.Controls.pas" line="1087">
    <ancestor name="TActionLink" namespace="Vcl.ActnList">
      <methodref name="IsImageNameLinked" visibility="protected" procflags="virtual"/>
      <ancestor name="TContainedActionLink" namespace="System.Actions">
        <methodref name="DefaultIsLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsCaptionLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsCheckedLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsEnabledLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsGroupIndexLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHelpContextLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHelpLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsHintLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsImageIndexLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsShortCutLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsVisibleLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="IsStatusActionLinked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetCaption" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetChecked" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHelpType" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetHint" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetShortCut" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetVisible" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
        </methodref>
        <ancestor name="TBasicActionLink" namespace="System.Classes">
          <methodref name="AssignClient" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Change" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsOnExecuteLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAction" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Create" visibility="public" procflags="constructor virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Execute" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Update" visibility="public" procflags="virtual">
          </methodref>
          <propertyref name="Action" visibility="public">
          </propertyref>
          <eventref name="OnChange" visibility="public">
          </eventref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FClient" type="TControl" visibility="protected" size="4" offset="24" file="Vcl.Controls.pas" line="1089"/>
      <procedure name="AssignClient" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1090">
        <parameters>
          <parameter name="AClient" type="TObject"/>
        </parameters>
      </procedure>
      <function name="IsCaptionLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1091">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsDropdownMenuLinked" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1092">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsEnabledLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1093">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsEnableDropdownLinked" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1094">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHelpLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1095">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHintLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1096">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsVisibleLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1097">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsOnExecuteLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1098">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsPopupMenuLinked" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1099">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="DoShowHint" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1100">
        <parameters>
          <parameter name="HintStr" type="string" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetCaption" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1101">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDropdownMenu" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1102">
        <parameters>
          <parameter name="Value" type="TPopupMenu"/>
        </parameters>
      </procedure>
      <procedure name="SetEnabled" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1103">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetEnableDropdown" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1104">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetHint" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1105">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpContext" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1106">
        <parameters>
          <parameter name="Value" type="THelpContext"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpKeyword" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1107">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpType" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1108">
        <parameters>
          <parameter name="Value" type="THelpType"/>
        </parameters>
      </procedure>
      <procedure name="SetVisible" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1109">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetOnExecute" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1110">
        <parameters>
          <parameter name="Value" type="TNotifyEvent"/>
        </parameters>
      </procedure>
      <procedure name="SetPopupMenu" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1111">
        <parameters>
          <parameter name="Value" type="TPopupMenu"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <classref name="TControlActionLinkClass" ref="TControlActionLink" file="Vcl.Controls.pas" line="1114"/>
  <set name="TControlState" file="Vcl.Controls.pas" line="1118">
    <element name="csLButtonDown"/>
    <element name="csClicked"/>
    <element name="csPalette"/>
    <element name="csReadingState"/>
    <element name="csAlignmentNeeded"/>
    <element name="csFocusing"/>
    <element name="csCreating"/>
    <element name="csPaintCopy"/>
    <element name="csCustomPaint"/>
    <element name="csDestroyingHandle"/>
    <element name="csDocking"/>
    <element name="csDesignerHide"/>
    <element name="csPanning"/>
    <element name="csRecreating"/>
    <element name="csAligning"/>
    <element name="csGlassPaint"/>
    <element name="csPrintClient"/>
  </set>
  <set name="TControlStyle" file="Vcl.Controls.pas" line="1136">
    <element name="csAcceptsControls"/>
    <element name="csCaptureMouse"/>
    <element name="csDesignInteractive"/>
    <element name="csClickEvents"/>
    <element name="csFramed"/>
    <element name="csSetCaption"/>
    <element name="csOpaque"/>
    <element name="csDoubleClicks"/>
    <element name="csFixedWidth"/>
    <element name="csFixedHeight"/>
    <element name="csNoDesignVisible"/>
    <element name="csReplicatable"/>
    <element name="csNoStdEvents"/>
    <element name="csDisplayDragImage"/>
    <element name="csReflector"/>
    <element name="csActionClient"/>
    <element name="csMenuEvents"/>
    <element name="csNeedsBorderPaint"/>
    <element name="csParentBackground"/>
    <element name="csPannable"/>
    <element name="csAlignWithMargins"/>
    <element name="csGestures"/>
    <element name="csPaintBlackOpaqueOnGlass"/>
    <element name="csOverrideStylePaint"/>
    <element name="csNeedsDesignDisabledState"/>
  </set>
  <enum name="TMouseButton" alias="System.UITypes.TMouseButton" file="Vcl.Controls.pas" line="1144">
    <element value="0" name="mbLeft"/>
    <element value="1" name="mbRight"/>
    <element value="2" name="mbMiddle"/>
  </enum>
  <enum name="TMouseActivate" alias="System.UITypes.TMouseActivate" file="Vcl.Controls.pas" line="1147">
    <element value="0" name="maDefault"/>
    <element value="1" name="maActivate"/>
    <element value="2" name="maActivateAndEat"/>
    <element value="3" name="maNoActivate"/>
    <element value="4" name="maNoActivateAndEat"/>
  </enum>
  <enum name="TDragMode" alias="System.UITypes.TDragMode" file="Vcl.Controls.pas" line="1150">
    <element value="0" name="dmManual"/>
    <element value="1" name="dmAutomatic"/>
  </enum>
  <enum name="TDragState" alias="System.UITypes.TDragState" file="Vcl.Controls.pas" line="1153">
    <element value="0" name="dsDragEnter"/>
    <element value="1" name="dsDragLeave"/>
    <element value="2" name="dsDragMove"/>
  </enum>
  <enum name="TDragKind" alias="System.UITypes.TDragKind" file="Vcl.Controls.pas" line="1156">
    <element value="0" name="dkDrag"/>
    <element value="1" name="dkDock"/>
  </enum>
  <type name="TTabOrder" type="shortint" loBound="-1" hiBound="32767" file="System.UITypes.pas" line="111"/>
  <type name="TCaption" type="UnicodeString" file="Vcl.Controls.pas" line="1170"/>
  <pointer name="PMouseActivateRec" type="TMouseActivateRec" indircnt="1" file="Vcl.Controls.pas" line="1173"/>
  <struct name="TMouseActivateRec" size="20" file="Vcl.Controls.pas" line="1176">
    <field name="MousePos" type="TPoint" visibility="public" size="8" offset="0" file="Vcl.Controls.pas" line="1177"/>
    <field name="HitTest" type="Integer" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="1178"/>
    <field name="Button" type="TMouseButton" visibility="public" size="1" offset="12" file="Vcl.Controls.pas" line="1179"/>
    <field name="ShiftState" type="TShiftState" visibility="public" size="2" offset="13" file="Vcl.Controls.pas" line="1180"/>
    <field name="TopLevel" type="HWND" visibility="public" size="4" offset="16" file="Vcl.Controls.pas" line="1181"/>
  </struct>
  <struct name="TCMMouseActivate" size="16" file="Vcl.Controls.pas" line="1194">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="1195"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="1196"/>
    <field name="Reserved" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="1197"/>
    <field name="MouseActivateRec" type="PMouseActivateRec" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="1198"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="1199"/>
  </struct>
  <set name="TScalingFlags" file="Vcl.Controls.pas" line="1203">
    <element name="sfLeft"/>
    <element name="sfTop"/>
    <element name="sfWidth"/>
    <element name="sfHeight"/>
    <element name="sfFont"/>
    <element name="sfDesignSize"/>
  </set>
  <enum name="TAnchorKind" alias="System.UITypes.TAnchorKind" file="Vcl.Controls.pas" line="1206">
    <element value="0" name="akLeft"/>
    <element value="1" name="akTop"/>
    <element value="2" name="akRight"/>
    <element value="3" name="akBottom"/>
  </enum>
  <set name="TAnchors" alias="System.UITypes.TAnchors" type="TAnchorKind" file="Vcl.Controls.pas" line="1208">
    <element name="akLeft"/>
    <element name="akTop"/>
    <element name="akRight"/>
    <element name="akBottom"/>
  </set>
  <type name="TConstraintSize" type="cardinal" loBound="0" hiBound="2147483647" file="Vcl.Controls.pas" line="1215"/>
  <class name="TSizeConstraints" file="Vcl.Controls.pas" line="1217">
    <ancestor name="TPersistent" namespace="System.Classes">
      <methodref name="AssignError" visibility="private">
      </methodref>
      <methodref name="AssignTo" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Assign" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="dynamic">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FControl" type="TControl" visibility="private" size="4" offset="4" file="Vcl.Controls.pas" line="1219"/>
      <field name="FMaxHeight" type="TConstraintSize" visibility="private" size="4" offset="8" file="Vcl.Controls.pas" line="1220"/>
      <field name="FMaxWidth" type="TConstraintSize" visibility="private" size="4" offset="12" file="Vcl.Controls.pas" line="1221"/>
      <field name="FMinHeight" type="TConstraintSize" visibility="private" size="4" offset="16" file="Vcl.Controls.pas" line="1222"/>
      <field name="FMinWidth" type="TConstraintSize" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="1223"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="24" file="Vcl.Controls.pas" line="1224"/>
      <procedure name="SetConstraints" visibility="private" file="Vcl.Controls.pas" line="1225">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="Value" type="TConstraintSize"/>
        </parameters>
      </procedure>
      <procedure name="Change" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1227">
      </procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1228">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      </procedure>
      <procedure name="ScaleBy" visibility="protected" file="Vcl.Controls.pas" line="1229">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
          <parameter name="AUpdate" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <property name="Control" visibility="protected" read="FControl" type="TControl" file="Vcl.Controls.pas" line="1230"/>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="1232">
        <parameters>
          <parameter name="Control" type="TControl"/>
        </parameters>
      </constructor>
      <event name="OnChange" visibility="public" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="Vcl.Controls.pas" line="1233"/>
      <property name="MaxHeight" visibility="published" read="FMaxHeight" write="SetConstraints" type="TConstraintSize" default="0" index="0" file="Vcl.Controls.pas" line="1235"/>
      <property name="MaxWidth" visibility="published" read="FMaxWidth" write="SetConstraints" type="TConstraintSize" default="0" index="1" file="Vcl.Controls.pas" line="1236"/>
      <property name="MinHeight" visibility="published" read="FMinHeight" write="SetConstraints" type="TConstraintSize" default="0" index="2" file="Vcl.Controls.pas" line="1237"/>
      <property name="MinWidth" visibility="published" read="FMinWidth" write="SetConstraints" type="TConstraintSize" default="0" index="3" file="Vcl.Controls.pas" line="1238"/>
    </members>
  </class>
  <type name="TMarginSize" type="cardinal" loBound="0" hiBound="2147483647" file="Vcl.Controls.pas" line="1241"/>
  <class name="TMargins" file="Vcl.Controls.pas" line="1243">
    <ancestor name="TPersistent" namespace="System.Classes">
      <methodref name="AssignError" visibility="private">
      </methodref>
      <methodref name="AssignTo" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Assign" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="dynamic">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FControl" type="TControl" visibility="private" size="4" offset="4" file="Vcl.Controls.pas" line="1245"/>
      <field name="FLeft" type="TMarginSize" visibility="private" size="4" offset="8" file="Vcl.Controls.pas" line="1246"/>
      <field name="FTop" type="TMarginSize" visibility="private" size="4" offset="12" file="Vcl.Controls.pas" line="1246"/>
      <field name="FRight" type="TMarginSize" visibility="private" size="4" offset="16" file="Vcl.Controls.pas" line="1246"/>
      <field name="FBottom" type="TMarginSize" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="1246"/>
      <field name="FOnChange" type="TNotifyEvent" visibility="private" size="8" offset="24" file="Vcl.Controls.pas" line="1247"/>
      <procedure name="SetMargin" visibility="private" file="Vcl.Controls.pas" line="1248">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="Value" type="TMarginSize"/>
        </parameters>
      </procedure>
      <procedure name="Change" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1250">
      </procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1251">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      </procedure>
      <function name="GetControlBound" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1252">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="InitDefaults" visibility="protected" procflags="class virtual" file="Vcl.Controls.pas" line="1253">
        <parameters>
          <parameter name="Margins" type="TMargins"/>
        </parameters>
      </procedure>
      <property name="Control" visibility="protected" read="FControl" type="TControl" file="Vcl.Controls.pas" line="1254"/>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="1256">
        <parameters>
          <parameter name="Control" type="TControl"/>
        </parameters>
      </constructor>
      <procedure name="SetControlBounds" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="1257">
        <parameters>
          <parameter name="ALeft" type="Integer"/>
          <parameter name="ATop" type="Integer"/>
          <parameter name="AWidth" type="Integer"/>
          <parameter name="AHeight" type="Integer"/>
          <parameter name="Aligning" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SetControlBounds" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="1258">
        <parameters>
          <parameter name="ARect" type="TRect" paramflags="const"/>
          <parameter name="Aligning" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      </procedure>
      <procedure name="SetBounds" visibility="public" file="Vcl.Controls.pas" line="1259">
        <parameters>
          <parameter name="ALeft" type="Integer"/>
          <parameter name="ATop" type="Integer"/>
          <parameter name="ARight" type="Integer"/>
          <parameter name="ABottom" type="Integer"/>
        </parameters>
      </procedure>
      <property name="ControlLeft" visibility="public" read="GetControlBound" type="Integer" index="0" file="Vcl.Controls.pas" line="1260"/>
      <property name="ControlTop" visibility="public" read="GetControlBound" type="Integer" index="1" file="Vcl.Controls.pas" line="1261"/>
      <property name="ControlWidth" visibility="public" read="GetControlBound" type="Integer" index="2" file="Vcl.Controls.pas" line="1262"/>
      <property name="ControlHeight" visibility="public" read="GetControlBound" type="Integer" index="3" file="Vcl.Controls.pas" line="1263"/>
      <property name="ExplicitLeft" visibility="public" read="GetControlBound" type="Integer" index="4" file="Vcl.Controls.pas" line="1264"/>
      <property name="ExplicitTop" visibility="public" read="GetControlBound" type="Integer" index="5" file="Vcl.Controls.pas" line="1265"/>
      <property name="ExplicitWidth" visibility="public" read="GetControlBound" type="Integer" index="6" file="Vcl.Controls.pas" line="1266"/>
      <property name="ExplicitHeight" visibility="public" read="GetControlBound" type="Integer" index="7" file="Vcl.Controls.pas" line="1267"/>
      <event name="OnChange" visibility="public" read="FOnChange" write="FOnChange" type="TNotifyEvent" file="Vcl.Controls.pas" line="1268"/>
      <property name="Left" visibility="published" read="FLeft" write="SetMargin" type="TMarginSize" default="3" index="0" file="Vcl.Controls.pas" line="1270"/>
      <property name="Top" visibility="published" read="FTop" write="SetMargin" type="TMarginSize" default="3" index="1" file="Vcl.Controls.pas" line="1271"/>
      <property name="Right" visibility="published" read="FRight" write="SetMargin" type="TMarginSize" default="3" index="2" file="Vcl.Controls.pas" line="1272"/>
      <property name="Bottom" visibility="published" read="FBottom" write="SetMargin" type="TMarginSize" default="3" index="3" file="Vcl.Controls.pas" line="1273"/>
    </members>
  </class>
  <class name="TPadding" file="Vcl.Controls.pas" line="1276">
    <ancestor name="TMargins" namespace="Vcl.Controls">
      <methodref name="SetMargin" visibility="private"/>
      <methodref name="Change" visibility="protected" procflags="virtual"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="GetControlBound" visibility="protected" procflags="virtual"/>
      <methodref name="InitDefaults" visibility="protected" procflags="class virtual"/>
      <propertyref name="Control" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor virtual"/>
      <methodref name="SetControlBounds" visibility="public" procflags="overload"/>
      <methodref name="SetControlBounds" visibility="public" procflags="overload"/>
      <methodref name="SetBounds" visibility="public"/>
      <propertyref name="ControlLeft" visibility="public"/>
      <propertyref name="ControlTop" visibility="public"/>
      <propertyref name="ControlWidth" visibility="public"/>
      <propertyref name="ControlHeight" visibility="public"/>
      <propertyref name="ExplicitLeft" visibility="public"/>
      <propertyref name="ExplicitTop" visibility="public"/>
      <propertyref name="ExplicitWidth" visibility="public"/>
      <propertyref name="ExplicitHeight" visibility="public"/>
      <eventref name="OnChange" visibility="public"/>
      <propertyref name="Left" visibility="published"/>
      <propertyref name="Top" visibility="published"/>
      <propertyref name="Right" visibility="published"/>
      <propertyref name="Bottom" visibility="published"/>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="InitDefaults" visibility="protected" procflags="class override" file="Vcl.Controls.pas" line="1278">
        <parameters>
          <parameter name="Margins" type="TMargins"/>
        </parameters>
      </procedure>
      <property name="Left" visibility="published" read="FLeft" write="SetMargin" type="TMarginSize" default="0" index="0" hoisted="true" file="Vcl.Controls.pas" line="1280"/>
      <property name="Top" visibility="published" read="FTop" write="SetMargin" type="TMarginSize" default="0" index="1" hoisted="true" file="Vcl.Controls.pas" line="1281"/>
      <property name="Right" visibility="published" read="FRight" write="SetMargin" type="TMarginSize" default="0" index="2" hoisted="true" file="Vcl.Controls.pas" line="1282"/>
      <property name="Bottom" visibility="published" read="FBottom" write="SetMargin" type="TMarginSize" default="0" index="3" hoisted="true" file="Vcl.Controls.pas" line="1283"/>
    </members>
  </class>
  <type name="TGestureID" type="shortint" loBound="-1024" hiBound="511" file="Vcl.Controls.pas" line="1286"/>
  <pointer name="PGestureEventInfo" type="TGestureEventInfo" indircnt="1" file="Vcl.Controls.pas" line="1299"/>
  <struct name="TGestureEventInfo" size="32" file="Vcl.Controls.pas" line="1300">
    <field name="GestureID" type="TGestureID" visibility="public" size="2" offset="0" file="Vcl.Controls.pas" line="1301"/>
    <field name="Location" type="TPoint" visibility="public" size="8" offset="4" file="Vcl.Controls.pas" line="1302"/>
    <field name="Flags" type="TInteractiveGestureFlags" visibility="public" size="1" offset="12" file="Vcl.Controls.pas" line="1303"/>
    <field name="Angle" type="Double" visibility="public" size="8" offset="16" file="Vcl.Controls.pas" line="1304"/>
    <field name="InertiaVector" type="TSmallPoint" visibility="public" size="4" offset="24" file="Vcl.Controls.pas" line="1305"/>
    <field name="Distance" type="Integer" visibility="public" variant="true" size="4" offset="28" file="Vcl.Controls.pas" line="1307"/>
    <field name="TapLocation" type="TSmallPoint" visibility="public" variant="true" size="4" offset="28" file="Vcl.Controls.pas" line="1308"/>
  </struct>
  <struct name="TCMGesture" size="16" file="Vcl.Controls.pas" line="1315">
    <field name="Msg" type="Cardinal" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="1316"/>
    <field name="MsgFiller" type="TDWordFiller" visibility="public" size="0" offset="4" file="Vcl.Controls.pas" line="1317"/>
    <field name="Reserved" type="NativeUInt" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="1318"/>
    <field name="Info" type="PGestureEventInfo" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="1319"/>
    <field name="Result" type="NativeInt" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="1320"/>
  </struct>
  <type name="TGestureEvent" file="Vcl.Controls.pas" line="1324" procflags="closure">
  </type>
  <enum name="TStandardGesture" file="Vcl.Controls.pas" line="1327">
    <element value="1" name="sgLeft" file="Vcl.Controls.pas" line="1328"/>
    <element value="2" name="sgRight" file="Vcl.Controls.pas" line="1329"/>
    <element value="3" name="sgUp" file="Vcl.Controls.pas" line="1330"/>
    <element value="4" name="sgDown" file="Vcl.Controls.pas" line="1331"/>
    <element value="5" name="sgUpLeft" file="Vcl.Controls.pas" line="1332"/>
    <element value="6" name="sgUpRight" file="Vcl.Controls.pas" line="1333"/>
    <element value="7" name="sgDownLeft" file="Vcl.Controls.pas" line="1334"/>
    <element value="8" name="sgDownRight" file="Vcl.Controls.pas" line="1335"/>
    <element value="9" name="sgLeftUp" file="Vcl.Controls.pas" line="1336"/>
    <element value="10" name="sgLeftDown" file="Vcl.Controls.pas" line="1337"/>
    <element value="11" name="sgRightUp" file="Vcl.Controls.pas" line="1338"/>
    <element value="12" name="sgRightDown" file="Vcl.Controls.pas" line="1339"/>
    <element value="13" name="sgUpDown" file="Vcl.Controls.pas" line="1340"/>
    <element value="14" name="sgDownUp" file="Vcl.Controls.pas" line="1341"/>
    <element value="15" name="sgLeftRight" file="Vcl.Controls.pas" line="1342"/>
    <element value="16" name="sgRightLeft" file="Vcl.Controls.pas" line="1343"/>
    <element value="17" name="sgUpLeftLong" file="Vcl.Controls.pas" line="1344"/>
    <element value="18" name="sgUpRightLong" file="Vcl.Controls.pas" line="1345"/>
    <element value="19" name="sgDownLeftLong" file="Vcl.Controls.pas" line="1346"/>
    <element value="20" name="sgDownRightLong" file="Vcl.Controls.pas" line="1347"/>
    <element value="21" name="sgScratchout" file="Vcl.Controls.pas" line="1348"/>
    <element value="22" name="sgTriangle" file="Vcl.Controls.pas" line="1349"/>
    <element value="23" name="sgSquare" file="Vcl.Controls.pas" line="1350"/>
    <element value="24" name="sgCheck" file="Vcl.Controls.pas" line="1351"/>
    <element value="25" name="sgCurlicue" file="Vcl.Controls.pas" line="1352"/>
    <element value="26" name="sgDoubleCurlicue" file="Vcl.Controls.pas" line="1353"/>
    <element value="27" name="sgCircle" file="Vcl.Controls.pas" line="1354"/>
    <element value="28" name="sgDoubleCircle" file="Vcl.Controls.pas" line="1355"/>
    <element value="29" name="sgSemiCircleLeft" file="Vcl.Controls.pas" line="1356"/>
    <element value="30" name="sgSemiCircleRight" file="Vcl.Controls.pas" line="1357"/>
    <element value="31" name="sgChevronUp" file="Vcl.Controls.pas" line="1358"/>
    <element value="32" name="sgChevronDown" file="Vcl.Controls.pas" line="1359"/>
    <element value="33" name="sgChevronLeft" file="Vcl.Controls.pas" line="1360"/>
    <element value="34" name="sgChevronRight" file="Vcl.Controls.pas" line="1361"/>
  </enum>
  <set name="TStandardGestures" type="TStandardGesture" file="Vcl.Controls.pas" line="1363">
    <element name="sgLeft"/>
    <element name="sgRight"/>
    <element name="sgUp"/>
    <element name="sgDown"/>
    <element name="sgUpLeft"/>
    <element name="sgUpRight"/>
    <element name="sgDownLeft"/>
    <element name="sgDownRight"/>
    <element name="sgLeftUp"/>
    <element name="sgLeftDown"/>
    <element name="sgRightUp"/>
    <element name="sgRightDown"/>
    <element name="sgUpDown"/>
    <element name="sgDownUp"/>
    <element name="sgLeftRight"/>
    <element name="sgRightLeft"/>
    <element name="sgUpLeftLong"/>
    <element name="sgUpRightLong"/>
    <element name="sgDownLeftLong"/>
    <element name="sgDownRightLong"/>
    <element name="sgScratchout"/>
    <element name="sgTriangle"/>
    <element name="sgSquare"/>
    <element name="sgCheck"/>
    <element name="sgCurlicue"/>
    <element name="sgDoubleCurlicue"/>
    <element name="sgCircle"/>
    <element name="sgDoubleCircle"/>
    <element name="sgSemiCircleLeft"/>
    <element name="sgSemiCircleRight"/>
    <element name="sgChevronUp"/>
    <element name="sgChevronDown"/>
    <element name="sgChevronLeft"/>
    <element name="sgChevronRight"/>
  </set>
  <enum name="TTabletOption" file="Vcl.Controls.pas" line="1369">
    <element value="0" name="toPressAndHold" file="Vcl.Controls.pas" line="1369"/>
    <element value="1" name="toPenTapFeedback" file="Vcl.Controls.pas" line="1369"/>
    <element value="2" name="toPenBarrelFeedback" file="Vcl.Controls.pas" line="1369"/>
    <element value="3" name="toTouchUIForceOn" file="Vcl.Controls.pas" line="1370"/>
    <element value="4" name="toTouchUIForceOff" file="Vcl.Controls.pas" line="1370"/>
    <element value="5" name="toTouchSwitch" file="Vcl.Controls.pas" line="1370"/>
    <element value="6" name="toFlicks" file="Vcl.Controls.pas" line="1370"/>
    <element value="7" name="toSmoothScrolling" file="Vcl.Controls.pas" line="1371"/>
    <element value="8" name="toFlickFallbackKeys" file="Vcl.Controls.pas" line="1371"/>
  </enum>
  <set name="TTabletOptions" type="TTabletOption" file="Vcl.Controls.pas" line="1373">
    <element name="toPressAndHold"/>
    <element name="toPenTapFeedback"/>
    <element name="toPenBarrelFeedback"/>
    <element name="toTouchUIForceOn"/>
    <element name="toTouchUIForceOff"/>
    <element name="toTouchSwitch"/>
    <element name="toFlicks"/>
    <element name="toSmoothScrolling"/>
    <element name="toFlickFallbackKeys"/>
  </set>
  <enum name="TGestureType" file="Vcl.Controls.pas" line="1375">
    <element value="0" name="gtStandard" file="Vcl.Controls.pas" line="1375"/>
    <element value="1" name="gtRecorded" file="Vcl.Controls.pas" line="1375"/>
    <element value="2" name="gtRegistered" file="Vcl.Controls.pas" line="1375"/>
    <element value="3" name="gtNone" file="Vcl.Controls.pas" line="1375"/>
  </enum>
  <set name="TGestureTypes" type="TGestureType" file="Vcl.Controls.pas" line="1376">
    <element name="gtStandard"/>
    <element name="gtRecorded"/>
    <element name="gtRegistered"/>
    <element name="gtNone"/>
  </set>
  <enum name="TGestureOption" file="Vcl.Controls.pas" line="1378">
    <element value="0" name="goUniDirectional" file="Vcl.Controls.pas" line="1378"/>
    <element value="1" name="goSkew" file="Vcl.Controls.pas" line="1378"/>
    <element value="2" name="goEndpoint" file="Vcl.Controls.pas" line="1378"/>
    <element value="3" name="goRotate" file="Vcl.Controls.pas" line="1378"/>
  </enum>
  <set name="TGestureOptions" type="TGestureOption" file="Vcl.Controls.pas" line="1379">
    <element name="goUniDirectional"/>
    <element name="goSkew"/>
    <element name="goEndpoint"/>
    <element name="goRotate"/>
  </set>
  <array name="TGestureArray" file="Vcl.Controls.pas" line="1381">
    <element type="TCustomGestureCollectionItem"/>
  </array>
  <array name="TGesturePointArray" file="Vcl.Controls.pas" line="1382">
    <element type="TPoint"/>
  </array>
  <class name="EGestureException" file="Vcl.Controls.pas" line="1384">
    <ancestor name="Exception" namespace="System.SysUtils">
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="Destroy@" visibility="class private" procflags="class destructor noself">
      </methodref>
      <methodref name="SetInnerException" visibility="protected">
      </methodref>
      <methodref name="SetStackInfo" visibility="protected">
      </methodref>
      <methodref name="GetStackTrace" visibility="protected">
      </methodref>
      <methodref name="RaisingException" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateFmt" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateRes" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateRes" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmt" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmt" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateHelp" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateFmtHelp" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="CreateResHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="CreateResFmtHelp" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="GetBaseException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="override">
      </methodref>
      <propertyref name="BaseException" visibility="public">
      </propertyref>
      <propertyref name="HelpContext" visibility="public">
      </propertyref>
      <propertyref name="InnerException" visibility="public">
      </propertyref>
      <propertyref name="Message" visibility="public">
      </propertyref>
      <propertyref name="StackTrace" visibility="public">
      </propertyref>
      <propertyref name="StackInfo" visibility="public">
      </propertyref>
      <methodref name="RaiseOuterException" visibility="public" procflags="static">
      </methodref>
      <methodref name="ThrowOuterException" visibility="public" procflags="static">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
  </class>
  <class name="TCustomGestureCollectionItem" file="Vcl.Controls.pas" line="1386">
    <ancestor name="TCollectionItem" namespace="System.Classes">
      <methodref name="GetIndex" visibility="private">
      </methodref>
      <methodref name="Changed" visibility="protected">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetDisplayName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetCollection" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetIndex" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetDisplayName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Release" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="override">
      </methodref>
      <propertyref name="Collection" visibility="public">
      </propertyref>
      <propertyref name="ID" visibility="public">
      </propertyref>
      <propertyref name="Index" visibility="public">
      </propertyref>
      <propertyref name="DisplayName" visibility="public">
      </propertyref>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetAction" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1388">
        <parameters>
          <retval type="TBasicAction"/>
        </parameters>
      </function>
      <function name="GetDeviation" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1389">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetErrorMargin" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1390">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetGestureID" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1391">
        <parameters>
          <retval type="TGestureID"/>
        </parameters>
      </function>
      <function name="GetGestureType" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1392">
        <parameters>
          <retval type="TGestureType"/>
        </parameters>
      </function>
      <function name="GetOptions" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1393">
        <parameters>
          <retval type="TGestureOptions"/>
        </parameters>
      </function>
      <function name="GetName" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1394">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetPoints" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1395">
        <parameters>
          <retval type="TGesturePointArray"/>
        </parameters>
      </function>
      <procedure name="SetAction" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1396">
        <parameters>
          <parameter name="Value" type="TBasicAction" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetDeviation" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1397">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetErrorMargin" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1398">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetGestureID" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1399">
        <parameters>
          <parameter name="Value" type="TGestureID" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetName" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1400">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetOptions" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1401">
        <parameters>
          <parameter name="Value" type="TGestureOptions" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetPoints" visibility="class protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1402">
        <parameters>
          <parameter name="Value" type="TGesturePointArray" paramflags="const"/>
        </parameters>
      </procedure>
      <property name="Deviation" visibility="public" read="GetDeviation" write="SetDeviation" type="Integer" default="20" file="Vcl.Controls.pas" line="1404"/>
      <property name="ErrorMargin" visibility="public" read="GetErrorMargin" write="SetErrorMargin" type="Integer" default="20" file="Vcl.Controls.pas" line="1405"/>
      <property name="GestureID" visibility="public" read="GetGestureID" write="SetGestureID" type="TGestureID" file="Vcl.Controls.pas" line="1406"/>
      <property name="GestureType" visibility="public" read="GetGestureType" type="TGestureType" file="Vcl.Controls.pas" line="1407"/>
      <property name="Options" visibility="public" read="GetOptions" write="SetOptions" type="TGestureOptions" default="9" file="Vcl.Controls.pas" line="1408"/>
      <property name="Name" visibility="public" read="GetName" write="SetName" type="string" default="0" file="Vcl.Controls.pas" line="1409"/>
      <property name="Points" visibility="public" read="GetPoints" write="SetPoints" type="TGesturePointArray" file="Vcl.Controls.pas" line="1410"/>
      <property name="Action" visibility="public" read="GetAction" write="SetAction" type="TBasicAction" file="Vcl.Controls.pas" line="1411"/>
    </members>
  </class>
  <class name="TCustomGestureCollection" file="Vcl.Controls.pas" line="1414">
    <ancestor name="TCollection" namespace="System.Classes">
      <methodref name="GetCapacity" visibility="private">
      </methodref>
      <methodref name="GetCount" visibility="private" procflags="inline">
      </methodref>
      <methodref name="GetPropName" visibility="private">
      </methodref>
      <methodref name="InsertItem" visibility="private">
      </methodref>
      <methodref name="RemoveItem" visibility="private">
      </methodref>
      <methodref name="SetCapacity" visibility="private">
      </methodref>
      <methodref name="Added" visibility="protected" procflags="virtual" symflags="deprecated">
      </methodref>
      <methodref name="Deleting" visibility="protected" procflags="virtual" symflags="deprecated">
      </methodref>
      <propertyref name="NextID" visibility="protected">
      </propertyref>
      <methodref name="Notify" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetAttrCount" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetAttr" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetItemAttr" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Changed" visibility="protected">
      </methodref>
      <methodref name="GetItem" visibility="protected">
      </methodref>
      <methodref name="SetItem" visibility="protected">
      </methodref>
      <methodref name="SetItemName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Update" visibility="protected" procflags="virtual">
      </methodref>
      <propertyref name="PropName" visibility="protected">
      </propertyref>
      <propertyref name="UpdateCount" visibility="protected">
      </propertyref>
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Owner" visibility="public">
      </methodref>
      <methodref name="Add" visibility="public">
      </methodref>
      <methodref name="Assign" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeginUpdate" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Clear" visibility="public">
      </methodref>
      <methodref name="ClearAndResetID" visibility="public">
      </methodref>
      <methodref name="Delete" visibility="public">
      </methodref>
      <methodref name="EndUpdate" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Sort" visibility="public">
      </methodref>
      <methodref name="FindItemID" visibility="public">
      </methodref>
      <methodref name="GetEnumerator" visibility="public" procflags="inline">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="override">
      </methodref>
      <methodref name="Insert" visibility="public">
      </methodref>
      <propertyref name="Capacity" visibility="public">
      </propertyref>
      <propertyref name="Count" visibility="public">
      </propertyref>
      <propertyref name="ItemClass" visibility="public">
      </propertyref>
      <propertyref name="Items" visibility="public">
      </propertyref>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetGestureManager" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1416">
        <parameters>
          <retval type="TCustomGestureManager"/>
        </parameters>
      </function>
      <function name="GetItem" visibility="protected" file="Vcl.Controls.pas" line="1417">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <procedure name="SetItem" visibility="protected" file="Vcl.Controls.pas" line="1418">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="Value" type="TCustomGestureCollectionItem" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="AddGesture" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1420">
        <parameters>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="FindGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1421">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="FindGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1422">
        <parameters>
          <parameter name="AName" type="string" paramflags="const"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="GetUniqueGestureID" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1423">
        <parameters>
          <retval type="TGestureID"/>
        </parameters>
      </function>
      <procedure name="RemoveGesture" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1424">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
        </parameters>
      </procedure>
      <property name="GestureManager" visibility="public" read="GetGestureManager" type="TCustomGestureManager" file="Vcl.Controls.pas" line="1425"/>
      <property name="Items[Index]" visibility="public" read="GetItem" write="SetItem" type="TCustomGestureCollectionItem" file="Vcl.Controls.pas" line="1426"/>
    </members>
  </class>
  <class name="TCustomGestureManager" file="Vcl.Controls.pas" line="1429">
    <ancestor name="TComponent" namespace="System.Classes">
      <interfaces>
        <implements name="IInterfaceComponentReference"/>
        <implements name="IInterface"/>
      </interfaces>
      <methodref name="GetComObject" visibility="private">
      </methodref>
      <methodref name="GetComponent" visibility="private">
      </methodref>
      <methodref name="GetComponentCount" visibility="private">
      </methodref>
      <methodref name="GetComponentIndex" visibility="private">
      </methodref>
      <methodref name="Insert" visibility="private">
      </methodref>
      <methodref name="ReadLeft" visibility="private">
      </methodref>
      <methodref name="ReadTop" visibility="private">
      </methodref>
      <methodref name="Remove" visibility="private">
      </methodref>
      <methodref name="RemoveNotification" visibility="private">
      </methodref>
      <methodref name="SetComponentIndex" visibility="private">
      </methodref>
      <methodref name="SetReference" visibility="private">
      </methodref>
      <methodref name="WriteLeft" visibility="private">
      </methodref>
      <methodref name="WriteTop" visibility="private">
      </methodref>
      <methodref name="IntfGetComponent" visibility="private">
      </methodref>
      <methodref name="DoGetDeltaStreams" visibility="private">
      </methodref>
      <methodref name="ReadDeltaStream" visibility="private">
      </methodref>
      <methodref name="ReadDeltaState" visibility="private">
      </methodref>
      <methodref name="FindSortedComponent" visibility="private">
      </methodref>
      <methodref name="AddSortedComponent" visibility="private">
      </methodref>
      <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
      </methodref>
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ChangeName" visibility="protected">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetChildren" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="override">
      </methodref>
      <methodref name="Loaded" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Notification" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="ReadState" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="CanObserve" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetObservers" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetAncestor" visibility="protected">
      </methodref>
      <methodref name="SetDesigning" visibility="protected">
      </methodref>
      <methodref name="SetInline" visibility="protected">
      </methodref>
      <methodref name="SetDesignInstance" visibility="protected">
      </methodref>
      <methodref name="SetName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Updating" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Updated" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
      </methodref>
      <methodref name="ValidateRename" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="WriteState" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="RemoveFreeNotifications" visibility="protected">
      </methodref>
      <methodref name="QueryInterface" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="_AddRef" visibility="protected">
      </methodref>
      <methodref name="_Release" visibility="protected">
      </methodref>
      <methodref name="GetTypeInfoCount" visibility="protected">
      </methodref>
      <methodref name="GetTypeInfo" visibility="protected">
      </methodref>
      <methodref name="GetIDsOfNames" visibility="protected">
      </methodref>
      <methodref name="Invoke" visibility="protected">
      </methodref>
      <eventref name="OnGetDeltaStreams" visibility="protected">
      </eventref>
      <methodref name="Create" visibility="public" procflags="constructor virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndFunctionInvoke" visibility="public">
      </methodref>
      <methodref name="DestroyComponents" visibility="public">
      </methodref>
      <methodref name="Destroying" visibility="public">
      </methodref>
      <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="FindComponent" visibility="public">
      </methodref>
      <methodref name="FreeNotification" visibility="public">
      </methodref>
      <methodref name="RemoveFreeNotification" visibility="public">
      </methodref>
      <methodref name="FreeOnRelease" visibility="public">
      </methodref>
      <methodref name="GetEnumerator" visibility="public" procflags="inline">
      </methodref>
      <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="override">
      </methodref>
      <methodref name="HasParent" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="InsertComponent" visibility="public">
      </methodref>
      <methodref name="RemoveComponent" visibility="public">
      </methodref>
      <methodref name="SetSubComponent" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="override">
      </methodref>
      <methodref name="UpdateAction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="IsImplementorOf" visibility="public">
      </methodref>
      <methodref name="ReferenceInterface" visibility="public">
      </methodref>
      <propertyref name="ComObject" visibility="public">
      </propertyref>
      <propertyref name="Components" visibility="public">
      </propertyref>
      <propertyref name="ComponentCount" visibility="public">
      </propertyref>
      <propertyref name="ComponentIndex" visibility="public">
      </propertyref>
      <propertyref name="ComponentState" visibility="public">
      </propertyref>
      <propertyref name="ComponentStyle" visibility="public">
      </propertyref>
      <propertyref name="DesignInfo" visibility="public">
      </propertyref>
      <propertyref name="Owner" visibility="public">
      </propertyref>
      <propertyref name="VCLComObject" visibility="public">
      </propertyref>
      <propertyref name="Observers" visibility="public">
      </propertyref>
      <propertyref name="Name" visibility="published">
      </propertyref>
      <propertyref name="Tag" visibility="published">
      </propertyref>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetGestureList" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1431">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <retval type="TGestureArray"/>
        </parameters>
      </function>
      <function name="GetStandardGestures" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1432">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <retval type="TStandardGestures"/>
        </parameters>
      </function>
      <procedure name="SetStandardGestures" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1433">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AStandardGestures" type="TStandardGestures"/>
        </parameters>
      </procedure>
      <function name="AddRecordedGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1435">
        <parameters>
          <parameter name="Item" type="TCustomGestureCollectionItem"/>
          <retval type="TGestureID"/>
        </parameters>
      </function>
      <function name="FindCustomGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1436">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="FindCustomGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1437">
        <parameters>
          <parameter name="AName" type="string" paramflags="const"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="FindGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1438">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AGestureID" type="TGestureID"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="FindGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1439">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AName" type="string" paramflags="const"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <procedure name="RegisterControl" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1440">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="RemoveRecordedGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1441">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
        </parameters>
      </procedure>
      <procedure name="RemoveRecordedGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1442">
        <parameters>
          <parameter name="AGesture" type="TCustomGestureCollectionItem"/>
        </parameters>
      </procedure>
      <function name="SelectGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1443">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AGestureID" type="TGestureID"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="SelectGesture" visibility="public" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="1444">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AName" type="string" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="UnregisterControl" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1445">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="UnselectGesture" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1446">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AGestureID" type="TGestureID"/>
        </parameters>
      </procedure>
      <property name="GestureList[AControl]" visibility="public" read="GetGestureList" type="TGestureArray" file="Vcl.Controls.pas" line="1447"/>
      <property name="StandardGestures[AControl]" visibility="public" read="GetStandardGestures" write="SetStandardGestures" type="TStandardGestures" file="Vcl.Controls.pas" line="1448"/>
    </members>
  </class>
  <class name="TCustomGestureEngine" file="Vcl.Controls.pas" line="1452">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <enum name="TGestureEngineFlag" visibility="public" alias="Vcl.Controls.TGestureEngineFlag" file="Vcl.Controls.pas" line="1454">
        <element value="0" name="efMouseEvents" file="Vcl.Controls.pas" line="1454"/>
        <element value="1" name="efTouchEvents" file="Vcl.Controls.pas" line="1454"/>
      </enum>
      <set name="TGestureEngineFlags" visibility="public" alias="Vcl.Controls.TGestureEngineFlags" type="TCustomGestureEngine.TGestureEngineFlag" file="Vcl.Controls.pas" line="1455">
        <element name="efMouseEvents"/>
        <element name="efTouchEvents"/>
      </set>
      <function name="GetActive" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1457">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetFlags" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1458">
        <parameters>
          <retval type="TCustomGestureEngine.TGestureEngineFlags"/>
        </parameters>
      </function>
      <procedure name="SetActive" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="1459">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="1461">
        <parameters>
          <parameter name="AControl" type="TWinControl"/>
        </parameters>
      </constructor>
      <procedure name="Notification" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="1462">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="Supported" visibility="public" procflags="class virtual" file="Vcl.Controls.pas" line="1463">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="Active" visibility="public" read="GetActive" write="SetActive" type="Boolean" file="Vcl.Controls.pas" line="1464"/>
      <property name="Flags" visibility="public" read="GetFlags" type="TCustomGestureEngine.TGestureEngineFlags" file="Vcl.Controls.pas" line="1465"/>
    </members>
  </class>
  <enum name="TTouchProperty" file="Vcl.Controls.pas" line="1468">
    <element value="0" name="tpInteractiveGestures" file="Vcl.Controls.pas" line="1468"/>
    <element value="1" name="tpInteractiveGestureOptions" file="Vcl.Controls.pas" line="1468"/>
    <element value="2" name="tpParentTabletOptions" file="Vcl.Controls.pas" line="1469"/>
    <element value="3" name="tpTabletOptions" file="Vcl.Controls.pas" line="1469"/>
  </enum>
  <class name="TCustomTouchManager" file="Vcl.Controls.pas" line="1471">
    <ancestor name="TPersistent" namespace="System.Classes">
      <methodref name="AssignError" visibility="private">
      </methodref>
      <methodref name="AssignTo" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="Assign" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="dynamic">
      </methodref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FControl" type="TControl" visibility="private" size="4" offset="4" file="Vcl.Controls.pas" line="1473"/>
      <field name="FGestureEngine" type="TCustomGestureEngine" visibility="private" size="4" offset="8" file="Vcl.Controls.pas" line="1474"/>
      <field name="FGestureManager" type="TCustomGestureManager" visibility="private" size="4" offset="12" file="Vcl.Controls.pas" line="1475"/>
      <field name="FInteractiveGestures" type="TInteractiveGestures" visibility="private" size="1" offset="16" file="Vcl.Controls.pas" line="1476"/>
      <field name="FInteractiveGestureOptions" type="TInteractiveGestureOptions" visibility="private" size="1" offset="17" file="Vcl.Controls.pas" line="1477"/>
      <field name="FNotifyList" type="TList" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="1478"/>
      <field name="FParentTabletOptions" type="Boolean" visibility="private" size="1" offset="24" file="Vcl.Controls.pas" line="1479"/>
      <field name="FStandardGestures" type="TStandardGestures" visibility="private" size="5" offset="25" file="Vcl.Controls.pas" line="1480"/>
      <field name="FTabletOptions" type="TTabletOptions" visibility="private" size="2" offset="30" file="Vcl.Controls.pas" line="1481"/>
      <function name="GetGestureList" visibility="private" file="Vcl.Controls.pas" line="1482">
        <parameters>
          <retval type="TGestureArray"/>
        </parameters>
      </function>
      <function name="GetStandardGestures" visibility="private" file="Vcl.Controls.pas" line="1483">
        <parameters>
          <retval type="TStandardGestures"/>
        </parameters>
      </function>
      <function name="IsInteractiveGestureOptionsStored" visibility="private" file="Vcl.Controls.pas" line="1484">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsInteractiveGesturesStored" visibility="private" file="Vcl.Controls.pas" line="1485">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsParentTabletOptionsStored" visibility="private" file="Vcl.Controls.pas" line="1486">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsTabletOptionsStored" visibility="private" file="Vcl.Controls.pas" line="1487">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetGestureEngine" visibility="private" file="Vcl.Controls.pas" line="1488">
        <parameters>
          <parameter name="Value" type="TCustomGestureEngine" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetGestureManager" visibility="private" file="Vcl.Controls.pas" line="1489">
        <parameters>
          <parameter name="Value" type="TCustomGestureManager" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetStandardGestures" visibility="private" file="Vcl.Controls.pas" line="1490">
        <parameters>
          <parameter name="Value" type="TStandardGestures" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetParentTabletOptions" visibility="private" file="Vcl.Controls.pas" line="1491">
        <parameters>
          <parameter name="Value" type="Boolean" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTabletOptions" visibility="private" file="Vcl.Controls.pas" line="1492">
        <parameters>
          <parameter name="Value" type="TTabletOptions" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1494">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      </procedure>
      <function name="IsDefault" visibility="protected" file="Vcl.Controls.pas" line="1495">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="1497">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="1498">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="ChangeNotification" visibility="public" file="Vcl.Controls.pas" line="1499">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <function name="FindGesture" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="1500">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <function name="FindGesture" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="1501">
        <parameters>
          <parameter name="AName" type="string" paramflags="const"/>
          <retval type="TCustomGestureCollectionItem"/>
        </parameters>
      </function>
      <procedure name="RemoveChangeNotification" visibility="public" file="Vcl.Controls.pas" line="1502">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <function name="SelectGesture" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="1503">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="SelectGesture" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="1504">
        <parameters>
          <parameter name="AName" type="string" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="UnselectGesture" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="1505">
        <parameters>
          <parameter name="AGestureID" type="TGestureID"/>
        </parameters>
      </procedure>
      <property name="GestureEngine" visibility="public" read="FGestureEngine" write="SetGestureEngine" type="TCustomGestureEngine" file="Vcl.Controls.pas" line="1506"/>
      <property name="GestureList" visibility="public" read="GetGestureList" type="TGestureArray" file="Vcl.Controls.pas" line="1507"/>
      <property name="GestureManager" visibility="public" read="FGestureManager" write="SetGestureManager" type="TCustomGestureManager" file="Vcl.Controls.pas" line="1508"/>
      <property name="InteractiveGestures" visibility="public" read="FInteractiveGestures" write="FInteractiveGestures" stored="IsInteractiveGesturesStored" type="TInteractiveGestures" file="Vcl.Controls.pas" line="1509"/>
      <property name="InteractiveGestureOptions" visibility="public" read="FInteractiveGestureOptions" write="FInteractiveGestureOptions" stored="IsInteractiveGestureOptionsStored" type="TInteractiveGestureOptions" file="Vcl.Controls.pas" line="1511"/>
      <property name="ParentTabletOptions" visibility="public" read="FParentTabletOptions" write="SetParentTabletOptions" stored="IsParentTabletOptionsStored" type="Boolean" file="Vcl.Controls.pas" line="1514"/>
      <property name="StandardGestures" visibility="public" read="GetStandardGestures" write="SetStandardGestures" type="TStandardGestures" file="Vcl.Controls.pas" line="1516"/>
      <property name="TabletOptions" visibility="public" read="FTabletOptions" write="SetTabletOptions" stored="IsTabletOptionsStored" type="TTabletOptions" file="Vcl.Controls.pas" line="1517"/>
    </members>
  </class>
  <class name="TTouchManager" file="Vcl.Controls.pas" line="1521">
    <ancestor name="TCustomTouchManager" namespace="Vcl.Controls">
      <methodref name="GetGestureList" visibility="private"/>
      <methodref name="GetStandardGestures" visibility="private"/>
      <methodref name="IsInteractiveGestureOptionsStored" visibility="private"/>
      <methodref name="IsInteractiveGesturesStored" visibility="private"/>
      <methodref name="IsParentTabletOptionsStored" visibility="private"/>
      <methodref name="IsTabletOptionsStored" visibility="private"/>
      <methodref name="SetGestureEngine" visibility="private"/>
      <methodref name="SetGestureManager" visibility="private"/>
      <methodref name="SetStandardGestures" visibility="private"/>
      <methodref name="SetParentTabletOptions" visibility="private"/>
      <methodref name="SetTabletOptions" visibility="private"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="IsDefault" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="ChangeNotification" visibility="public"/>
      <methodref name="FindGesture" visibility="public" procflags="overload"/>
      <methodref name="FindGesture" visibility="public" procflags="overload"/>
      <methodref name="RemoveChangeNotification" visibility="public"/>
      <methodref name="SelectGesture" visibility="public" procflags="overload"/>
      <methodref name="SelectGesture" visibility="public" procflags="overload"/>
      <methodref name="UnselectGesture" visibility="public" procflags="inline"/>
      <propertyref name="GestureEngine" visibility="public"/>
      <propertyref name="GestureList" visibility="public"/>
      <propertyref name="GestureManager" visibility="public"/>
      <propertyref name="InteractiveGestures" visibility="public"/>
      <propertyref name="InteractiveGestureOptions" visibility="public"/>
      <propertyref name="ParentTabletOptions" visibility="public"/>
      <propertyref name="StandardGestures" visibility="public"/>
      <propertyref name="TabletOptions" visibility="public"/>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <property name="GestureManager" visibility="published" read="FGestureManager" write="SetGestureManager" type="TCustomGestureManager" hoisted="true" file="Vcl.Controls.pas" line="1523"/>
      <property name="InteractiveGestures" visibility="published" read="FInteractiveGestures" write="FInteractiveGestures" stored="IsInteractiveGesturesStored" type="TInteractiveGestures" hoisted="true" file="Vcl.Controls.pas" line="1524"/>
      <property name="InteractiveGestureOptions" visibility="published" read="FInteractiveGestureOptions" write="FInteractiveGestureOptions" stored="IsInteractiveGestureOptionsStored" type="TInteractiveGestureOptions" hoisted="true" file="Vcl.Controls.pas" line="1525"/>
      <property name="ParentTabletOptions" visibility="published" read="FParentTabletOptions" write="SetParentTabletOptions" stored="IsParentTabletOptionsStored" type="Boolean" hoisted="true" file="Vcl.Controls.pas" line="1526"/>
      <property name="TabletOptions" visibility="published" read="FTabletOptions" write="SetTabletOptions" stored="IsTabletOptionsStored" type="TTabletOptions" hoisted="true" file="Vcl.Controls.pas" line="1527"/>
    </members>
  </class>
  <set name="TStyleElements" file="Vcl.Controls.pas" line="1530">
    <element name="seFont"/>
    <element name="seClient"/>
    <element name="seBorder"/>
  </set>
  <type name="TMouseEvent" file="Vcl.Controls.pas" line="1532" procflags="closure">
  </type>
  <type name="TMouseMoveEvent" file="Vcl.Controls.pas" line="1534" procflags="closure">
  </type>
  <type name="TMouseActivateEvent" file="Vcl.Controls.pas" line="1536" procflags="closure">
  </type>
  <type name="TKeyEvent" file="Vcl.Controls.pas" line="1538" procflags="closure">
  </type>
  <type name="TKeyPressEvent" file="Vcl.Controls.pas" line="1540" procflags="closure">
  </type>
  <type name="TDragOverEvent" file="Vcl.Controls.pas" line="1541" procflags="closure">
  </type>
  <type name="TDragDropEvent" file="Vcl.Controls.pas" line="1543" procflags="closure">
  </type>
  <type name="TStartDragEvent" file="Vcl.Controls.pas" line="1545" procflags="closure">
  </type>
  <type name="TEndDragEvent" file="Vcl.Controls.pas" line="1547" procflags="closure">
  </type>
  <type name="TDockDropEvent" file="Vcl.Controls.pas" line="1549" procflags="closure">
  </type>
  <type name="TDockOverEvent" file="Vcl.Controls.pas" line="1551" procflags="closure">
  </type>
  <type name="TUnDockEvent" file="Vcl.Controls.pas" line="1553" procflags="closure">
  </type>
  <type name="TStartDockEvent" file="Vcl.Controls.pas" line="1555" procflags="closure">
  </type>
  <type name="TGetSiteInfoEvent" file="Vcl.Controls.pas" line="1557" procflags="closure">
  </type>
  <type name="TCanResizeEvent" file="Vcl.Controls.pas" line="1559" procflags="closure">
  </type>
  <type name="TConstrainedResizeEvent" file="Vcl.Controls.pas" line="1561" procflags="closure">
  </type>
  <type name="TMouseWheelEvent" file="Vcl.Controls.pas" line="1563" procflags="closure">
  </type>
  <type name="TMouseWheelUpDownEvent" file="Vcl.Controls.pas" line="1565" procflags="closure">
  </type>
  <type name="TContextPopupEvent" file="Vcl.Controls.pas" line="1567" procflags="closure">
  </type>
  <type name="TWndMethod" file="System.Classes.pas" line="2925" procflags="closure">
  </type>
  <pointer name="TReservedControlData" alias="System.Pointer" type="Pointer" indircnt="1" file="System.pas" line="12"/>
  <enum name="TDockOrientation" file="Vcl.Controls.pas" line="1590">
    <element value="0" name="doNoOrient" file="Vcl.Controls.pas" line="1590"/>
    <element value="1" name="doHorizontal" file="Vcl.Controls.pas" line="1590"/>
    <element value="2" name="doVertical" file="Vcl.Controls.pas" line="1590"/>
  </enum>
  <enum name="TOriginalParentCalcType" file="Vcl.Controls.pas" line="1597">
    <element value="0" name="ctWinApi" file="Vcl.Controls.pas" line="1597"/>
    <element value="1" name="ctNative" file="Vcl.Controls.pas" line="1597"/>
  </enum>
  <class name="TControl" file="Vcl.Controls.pas" line="1629">
    <ancestor name="TComponent" namespace="System.Classes">
      <interfaces>
        <implements name="IInterfaceComponentReference"/>
        <implements name="IInterface"/>
      </interfaces>
      <methodref name="GetComObject" visibility="private">
      </methodref>
      <methodref name="GetComponent" visibility="private">
      </methodref>
      <methodref name="GetComponentCount" visibility="private">
      </methodref>
      <methodref name="GetComponentIndex" visibility="private">
      </methodref>
      <methodref name="Insert" visibility="private">
      </methodref>
      <methodref name="ReadLeft" visibility="private">
      </methodref>
      <methodref name="ReadTop" visibility="private">
      </methodref>
      <methodref name="Remove" visibility="private">
      </methodref>
      <methodref name="RemoveNotification" visibility="private">
      </methodref>
      <methodref name="SetComponentIndex" visibility="private">
      </methodref>
      <methodref name="SetReference" visibility="private">
      </methodref>
      <methodref name="WriteLeft" visibility="private">
      </methodref>
      <methodref name="WriteTop" visibility="private">
      </methodref>
      <methodref name="IntfGetComponent" visibility="private">
      </methodref>
      <methodref name="DoGetDeltaStreams" visibility="private">
      </methodref>
      <methodref name="ReadDeltaStream" visibility="private">
      </methodref>
      <methodref name="ReadDeltaState" visibility="private">
      </methodref>
      <methodref name="FindSortedComponent" visibility="private">
      </methodref>
      <methodref name="AddSortedComponent" visibility="private">
      </methodref>
      <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
      </methodref>
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ChangeName" visibility="protected">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetChildren" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="override">
      </methodref>
      <methodref name="Loaded" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Notification" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="ReadState" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="CanObserve" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetObservers" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetAncestor" visibility="protected">
      </methodref>
      <methodref name="SetDesigning" visibility="protected">
      </methodref>
      <methodref name="SetInline" visibility="protected">
      </methodref>
      <methodref name="SetDesignInstance" visibility="protected">
      </methodref>
      <methodref name="SetName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Updating" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Updated" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
      </methodref>
      <methodref name="ValidateRename" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="WriteState" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="RemoveFreeNotifications" visibility="protected">
      </methodref>
      <methodref name="QueryInterface" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="_AddRef" visibility="protected">
      </methodref>
      <methodref name="_Release" visibility="protected">
      </methodref>
      <methodref name="GetTypeInfoCount" visibility="protected">
      </methodref>
      <methodref name="GetTypeInfo" visibility="protected">
      </methodref>
      <methodref name="GetIDsOfNames" visibility="protected">
      </methodref>
      <methodref name="Invoke" visibility="protected">
      </methodref>
      <eventref name="OnGetDeltaStreams" visibility="protected">
      </eventref>
      <methodref name="Create" visibility="public" procflags="constructor virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndFunctionInvoke" visibility="public">
      </methodref>
      <methodref name="DestroyComponents" visibility="public">
      </methodref>
      <methodref name="Destroying" visibility="public">
      </methodref>
      <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="FindComponent" visibility="public">
      </methodref>
      <methodref name="FreeNotification" visibility="public">
      </methodref>
      <methodref name="RemoveFreeNotification" visibility="public">
      </methodref>
      <methodref name="FreeOnRelease" visibility="public">
      </methodref>
      <methodref name="GetEnumerator" visibility="public" procflags="inline">
      </methodref>
      <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="override">
      </methodref>
      <methodref name="HasParent" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="InsertComponent" visibility="public">
      </methodref>
      <methodref name="RemoveComponent" visibility="public">
      </methodref>
      <methodref name="SetSubComponent" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="override">
      </methodref>
      <methodref name="UpdateAction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="IsImplementorOf" visibility="public">
      </methodref>
      <methodref name="ReferenceInterface" visibility="public">
      </methodref>
      <propertyref name="ComObject" visibility="public">
      </propertyref>
      <propertyref name="Components" visibility="public">
      </propertyref>
      <propertyref name="ComponentCount" visibility="public">
      </propertyref>
      <propertyref name="ComponentIndex" visibility="public">
      </propertyref>
      <propertyref name="ComponentState" visibility="public">
      </propertyref>
      <propertyref name="ComponentStyle" visibility="public">
      </propertyref>
      <propertyref name="DesignInfo" visibility="public">
      </propertyref>
      <propertyref name="Owner" visibility="public">
      </propertyref>
      <propertyref name="VCLComObject" visibility="public">
      </propertyref>
      <propertyref name="Observers" visibility="public">
      </propertyref>
      <propertyref name="Name" visibility="published">
      </propertyref>
      <propertyref name="Tag" visibility="published">
      </propertyref>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FRaiseOnNonMainThreadUsage" type="Boolean" visibility="private" varflags="class" file="Vcl.Controls.pas" line="1632"/>
      <field name="FParent" type="TWinControl" visibility="private" size="4" offset="64" file="Vcl.Controls.pas" line="1634"/>
      <field name="FWindowProc" type="TWndMethod" visibility="private" size="8" offset="72" file="Vcl.Controls.pas" line="1635"/>
      <field name="FLeft" type="Integer" visibility="private" size="4" offset="80" file="Vcl.Controls.pas" line="1636"/>
      <field name="FTop" type="Integer" visibility="private" size="4" offset="84" file="Vcl.Controls.pas" line="1637"/>
      <field name="FWidth" type="Integer" visibility="private" size="4" offset="88" file="Vcl.Controls.pas" line="1638"/>
      <field name="FHeight" type="Integer" visibility="private" size="4" offset="92" file="Vcl.Controls.pas" line="1639"/>
      <field name="FControlStyle" type="TControlStyle" visibility="private" size="4" offset="96" file="Vcl.Controls.pas" line="1640"/>
      <field name="FControlState" type="TControlState" visibility="private" size="4" offset="100" file="Vcl.Controls.pas" line="1641"/>
      <field name="FDesktopFont" type="Boolean" visibility="private" size="1" offset="104" file="Vcl.Controls.pas" line="1642"/>
      <field name="FVisible" type="Boolean" visibility="private" size="1" offset="105" file="Vcl.Controls.pas" line="1643"/>
      <field name="FEnabled" type="Boolean" visibility="private" size="1" offset="106" file="Vcl.Controls.pas" line="1644"/>
      <field name="FParentFont" type="Boolean" visibility="private" size="1" offset="107" file="Vcl.Controls.pas" line="1645"/>
      <field name="FParentColor" type="Boolean" visibility="private" size="1" offset="108" file="Vcl.Controls.pas" line="1646"/>
      <field name="FAlign" type="TAlign" visibility="private" size="1" offset="109" file="Vcl.Controls.pas" line="1647"/>
      <field name="FAutoSize" type="Boolean" visibility="private" size="1" offset="110" file="Vcl.Controls.pas" line="1648"/>
      <field name="FDragMode" type="TDragMode" visibility="private" size="1" offset="111" file="Vcl.Controls.pas" line="1649"/>
      <field name="FIsControl" type="Boolean" visibility="private" size="1" offset="112" file="Vcl.Controls.pas" line="1650"/>
      <field name="FBiDiMode" type="TBiDiMode" visibility="private" size="1" offset="113" file="Vcl.Controls.pas" line="1651"/>
      <field name="FParentBiDiMode" type="Boolean" visibility="private" size="1" offset="114" file="Vcl.Controls.pas" line="1652"/>
      <field name="FAnchors" type="TAnchors" visibility="private" size="1" offset="115" file="Vcl.Controls.pas" line="1653"/>
      <field name="FFont" type="TFont" visibility="private" size="4" offset="116" file="Vcl.Controls.pas" line="1654"/>
      <field name="FActionLink" type="TControlActionLink" visibility="private" size="4" offset="120" file="Vcl.Controls.pas" line="1655"/>
      <field name="FColor" type="TColor" visibility="private" size="4" offset="124" file="Vcl.Controls.pas" line="1656"/>
      <field name="FConstraints" type="TSizeConstraints" visibility="private" size="4" offset="128" file="Vcl.Controls.pas" line="1657"/>
      <field name="FMargins" type="TMargins" visibility="private" size="4" offset="132" file="Vcl.Controls.pas" line="1658"/>
      <field name="FCursor" type="TCursor" visibility="private" size="2" offset="136" file="Vcl.Controls.pas" line="1659"/>
      <field name="FDragCursor" type="TCursor" visibility="private" size="2" offset="138" file="Vcl.Controls.pas" line="1660"/>
      <field name="FPopupMenu" type="TPopupMenu" visibility="private" size="4" offset="140" file="Vcl.Controls.pas" line="1661"/>
      <field name="FHint" type="string" visibility="private" size="4" offset="144" file="Vcl.Controls.pas" line="1662"/>
      <field name="FFontHeight" type="Integer" visibility="private" size="4" offset="148" file="Vcl.Controls.pas" line="1663"/>
      <field name="FScalingFlags" type="TScalingFlags" visibility="private" size="1" offset="152" file="Vcl.Controls.pas" line="1664"/>
      <field name="FShowHint" type="Boolean" visibility="private" size="1" offset="153" file="Vcl.Controls.pas" line="1665"/>
      <field name="FParentShowHint" type="Boolean" visibility="private" size="1" offset="154" file="Vcl.Controls.pas" line="1666"/>
      <field name="FDragKind" type="TDragKind" visibility="private" size="1" offset="155" file="Vcl.Controls.pas" line="1667"/>
      <field name="FDockOrientation" type="TDockOrientation" visibility="private" size="1" offset="156" file="Vcl.Controls.pas" line="1668"/>
      <field name="FHostDockSite" type="TWinControl" visibility="private" size="4" offset="160" file="Vcl.Controls.pas" line="1669"/>
      <field name="FWheelAccumulator" type="Integer" visibility="private" size="4" offset="164" file="Vcl.Controls.pas" line="1670"/>
      <field name="FUndockWidth" type="Integer" visibility="private" size="4" offset="168" file="Vcl.Controls.pas" line="1671"/>
      <field name="FUndockHeight" type="Integer" visibility="private" size="4" offset="172" file="Vcl.Controls.pas" line="1672"/>
      <field name="FLRDockWidth" type="Integer" visibility="private" size="4" offset="176" file="Vcl.Controls.pas" line="1673"/>
      <field name="FTBDockHeight" type="Integer" visibility="private" size="4" offset="180" file="Vcl.Controls.pas" line="1674"/>
      <field name="FFloatingDockSiteClass" type="TWinControlClass" visibility="private" size="4" offset="184" file="Vcl.Controls.pas" line="1675"/>
      <field name="FTouchManager" type="TTouchManager" visibility="private" size="4" offset="188" file="Vcl.Controls.pas" line="1676"/>
      <field name="FOnCanResize" type="TCanResizeEvent" visibility="private" size="8" offset="192" file="Vcl.Controls.pas" line="1677"/>
      <field name="FOnConstrainedResize" type="TConstrainedResizeEvent" visibility="private" size="8" offset="200" file="Vcl.Controls.pas" line="1678"/>
      <field name="FOnMouseDown" type="TMouseEvent" visibility="private" size="8" offset="208" file="Vcl.Controls.pas" line="1679"/>
      <field name="FOnMouseMove" type="TMouseMoveEvent" visibility="private" size="8" offset="216" file="Vcl.Controls.pas" line="1680"/>
      <field name="FOnMouseUp" type="TMouseEvent" visibility="private" size="8" offset="224" file="Vcl.Controls.pas" line="1681"/>
      <field name="FOnDragDrop" type="TDragDropEvent" visibility="private" size="8" offset="232" file="Vcl.Controls.pas" line="1682"/>
      <field name="FOnDragOver" type="TDragOverEvent" visibility="private" size="8" offset="240" file="Vcl.Controls.pas" line="1683"/>
      <field name="FOnResize" type="TNotifyEvent" visibility="private" size="8" offset="248" file="Vcl.Controls.pas" line="1684"/>
      <field name="FOnStartDock" type="TStartDockEvent" visibility="private" size="8" offset="256" file="Vcl.Controls.pas" line="1685"/>
      <field name="FOnEndDock" type="TEndDragEvent" visibility="private" size="8" offset="264" file="Vcl.Controls.pas" line="1686"/>
      <field name="FOnStartDrag" type="TStartDragEvent" visibility="private" size="8" offset="272" file="Vcl.Controls.pas" line="1687"/>
      <field name="FOnEndDrag" type="TEndDragEvent" visibility="private" size="8" offset="280" file="Vcl.Controls.pas" line="1688"/>
      <field name="FOnClick" type="TNotifyEvent" visibility="private" size="8" offset="288" file="Vcl.Controls.pas" line="1689"/>
      <field name="FOnDblClick" type="TNotifyEvent" visibility="private" size="8" offset="296" file="Vcl.Controls.pas" line="1690"/>
      <field name="FOnContextPopup" type="TContextPopupEvent" visibility="private" size="8" offset="304" file="Vcl.Controls.pas" line="1691"/>
      <field name="FOnMouseActivate" type="TMouseActivateEvent" visibility="private" size="8" offset="312" file="Vcl.Controls.pas" line="1692"/>
      <field name="FOnMouseLeave" type="TNotifyEvent" visibility="private" size="8" offset="320" file="Vcl.Controls.pas" line="1693"/>
      <field name="FOnMouseEnter" type="TNotifyEvent" visibility="private" size="8" offset="328" file="Vcl.Controls.pas" line="1694"/>
      <field name="FOnMouseWheel" type="TMouseWheelEvent" visibility="private" size="8" offset="336" file="Vcl.Controls.pas" line="1695"/>
      <field name="FOnMouseWheelDown" type="TMouseWheelUpDownEvent" visibility="private" size="8" offset="344" file="Vcl.Controls.pas" line="1696"/>
      <field name="FOnMouseWheelUp" type="TMouseWheelUpDownEvent" visibility="private" size="8" offset="352" file="Vcl.Controls.pas" line="1697"/>
      <field name="FOnGesture" type="TGestureEvent" visibility="private" size="8" offset="360" file="Vcl.Controls.pas" line="1698"/>
      <field name="FHelpType" type="THelpType" visibility="private" size="1" offset="368" file="Vcl.Controls.pas" line="1699"/>
      <field name="FHelpKeyword" type="string" visibility="private" size="4" offset="372" file="Vcl.Controls.pas" line="1700"/>
      <field name="FHelpContext" type="THelpContext" visibility="private" size="4" offset="376" file="Vcl.Controls.pas" line="1701"/>
      <field name="FCustomHint" type="TCustomHint" visibility="private" size="4" offset="380" file="Vcl.Controls.pas" line="1702"/>
      <field name="FParentCustomHint" type="Boolean" visibility="private" size="1" offset="384" file="Vcl.Controls.pas" line="1703"/>
      <field name="FText" type="PWideChar" visibility="private" size="4" offset="388" file="Vcl.Controls.pas" line="1707"/>
      <field name="FStyleElements" type="TStyleElements" visibility="private" size="1" offset="392" file="Vcl.Controls.pas" line="1709"/>
      <field name="FStyleName" type="string" visibility="private" size="4" offset="396" file="Vcl.Controls.pas" line="1710"/>
      <function name="GetCustomHint" visibility="private" file="Vcl.Controls.pas" line="1711">
        <parameters>
          <retval type="TCustomHint"/>
        </parameters>
      </function>
      <procedure name="CalcDockSizes" visibility="private" file="Vcl.Controls.pas" line="1712">
      </procedure>
      <function name="CheckNewSize" visibility="private" file="Vcl.Controls.pas" line="1713">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="CreateFloatingDockSite" visibility="private" file="Vcl.Controls.pas" line="1714">
        <parameters>
          <parameter name="Bounds" type="TRect"/>
          <retval type="TWinControl"/>
        </parameters>
      </function>
      <procedure name="DoActionChange" visibility="private" file="Vcl.Controls.pas" line="1715">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="DoCanAutoSize" visibility="private" file="Vcl.Controls.pas" line="1716">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="DoCanResize" visibility="private" file="Vcl.Controls.pas" line="1717">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DoConstraintsChange" visibility="private" file="Vcl.Controls.pas" line="1718">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="DoConstrainedResize" visibility="private" file="Vcl.Controls.pas" line="1719">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="DoDragMsg" visibility="private" file="Vcl.Controls.pas" line="1720">
        <parameters>
          <parameter name="DragMsg" type="TCMDrag" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="DoMouseActivate" visibility="private" file="Vcl.Controls.pas" line="1721">
        <parameters>
          <parameter name="Message" type="TCMMouseActivate" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="DoMouseDown" visibility="private" file="Vcl.Controls.pas" line="1722">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      </procedure>
      <procedure name="DoMouseUp" visibility="private" file="Vcl.Controls.pas" line="1724">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
          <parameter name="Button" type="TMouseButton"/>
        </parameters>
      </procedure>
      <procedure name="DoMarginChange" visibility="private" file="Vcl.Controls.pas" line="1725">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="FontChanged" visibility="private" file="Vcl.Controls.pas" line="1726">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="GetAlignWithMargins" visibility="private" procflags="inline" file="Vcl.Controls.pas" line="1727">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetBoundsRect" visibility="private" file="Vcl.Controls.pas" line="1728">
        <parameters>
          <retval type="TRect"/>
        </parameters>
      </function>
      <function name="GetClientHeight" visibility="private" file="Vcl.Controls.pas" line="1729">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetClientWidth" visibility="private" file="Vcl.Controls.pas" line="1730">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetLRDockWidth" visibility="private" file="Vcl.Controls.pas" line="1731">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetMouseCapture" visibility="private" file="Vcl.Controls.pas" line="1732">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetTBDockHeight" visibility="private" file="Vcl.Controls.pas" line="1733">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetUndockWidth" visibility="private" file="Vcl.Controls.pas" line="1734">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetUndockHeight" visibility="private" file="Vcl.Controls.pas" line="1735">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="InvalidateControl" visibility="private" file="Vcl.Controls.pas" line="1736">
        <parameters>
          <parameter name="IsVisible" type="Boolean"/>
          <parameter name="IsOpaque" type="Boolean"/>
        </parameters>
      </procedure>
      <function name="IsAnchorsStored" visibility="private" file="Vcl.Controls.pas" line="1737">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsBiDiModeStored" visibility="private" file="Vcl.Controls.pas" line="1738">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsCaptionStored" visibility="private" file="Vcl.Controls.pas" line="1739">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsColorStored" visibility="private" file="Vcl.Controls.pas" line="1740">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsEnabledStored" visibility="private" file="Vcl.Controls.pas" line="1741">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsFontStored" visibility="private" file="Vcl.Controls.pas" line="1742">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHintStored" visibility="private" file="Vcl.Controls.pas" line="1743">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsHelpContextStored" visibility="private" file="Vcl.Controls.pas" line="1744">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsOnClickStored" visibility="private" file="Vcl.Controls.pas" line="1745">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsShowHintStored" visibility="private" file="Vcl.Controls.pas" line="1746">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsVisibleStored" visibility="private" file="Vcl.Controls.pas" line="1747">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ReadIsControl" visibility="private" file="Vcl.Controls.pas" line="1748">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadExplicitLeft" visibility="private" file="Vcl.Controls.pas" line="1749">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadExplicitTop" visibility="private" file="Vcl.Controls.pas" line="1750">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadExplicitWidth" visibility="private" file="Vcl.Controls.pas" line="1751">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadExplicitHeight" visibility="private" file="Vcl.Controls.pas" line="1752">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="SetAlignWithMargins" visibility="private" file="Vcl.Controls.pas" line="1753">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetAnchors" visibility="private" file="Vcl.Controls.pas" line="1754">
        <parameters>
          <parameter name="Value" type="TAnchors"/>
        </parameters>
      </procedure>
      <procedure name="SetAction" visibility="private" file="Vcl.Controls.pas" line="1755">
        <parameters>
          <parameter name="Value" type="TBasicAction"/>
        </parameters>
      </procedure>
      <procedure name="SetAlign" visibility="private" file="Vcl.Controls.pas" line="1756">
        <parameters>
          <parameter name="Value" type="TAlign"/>
        </parameters>
      </procedure>
      <procedure name="SetBoundsRect" visibility="private" file="Vcl.Controls.pas" line="1757">
        <parameters>
          <parameter name="Rect" type="TRect" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetClientHeight" visibility="private" file="Vcl.Controls.pas" line="1758">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetClientSize" visibility="private" file="Vcl.Controls.pas" line="1759">
        <parameters>
          <parameter name="Value" type="TPoint"/>
        </parameters>
      </procedure>
      <procedure name="SetClientWidth" visibility="private" file="Vcl.Controls.pas" line="1760">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetColor" visibility="private" file="Vcl.Controls.pas" line="1761">
        <parameters>
          <parameter name="Value" type="TColor"/>
        </parameters>
      </procedure>
      <procedure name="SetCursor" visibility="private" file="Vcl.Controls.pas" line="1762">
        <parameters>
          <parameter name="Value" type="TCursor"/>
        </parameters>
      </procedure>
      <procedure name="SetDesktopFont" visibility="private" file="Vcl.Controls.pas" line="1763">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetFont" visibility="private" file="Vcl.Controls.pas" line="1764">
        <parameters>
          <parameter name="Value" type="TFont"/>
        </parameters>
      </procedure>
      <procedure name="SetHeight" visibility="private" file="Vcl.Controls.pas" line="1765">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpContext" visibility="private" file="Vcl.Controls.pas" line="1766">
        <parameters>
          <parameter name="Value" type="THelpContext" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHelpKeyword" visibility="private" file="Vcl.Controls.pas" line="1767">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetHostDockSite" visibility="private" file="Vcl.Controls.pas" line="1768">
        <parameters>
          <parameter name="Value" type="TWinControl"/>
        </parameters>
      </procedure>
      <procedure name="SetLeft" visibility="private" file="Vcl.Controls.pas" line="1769">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetMouseCapture" visibility="private" file="Vcl.Controls.pas" line="1770">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetParentColor" visibility="private" file="Vcl.Controls.pas" line="1771">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetParentFont" visibility="private" file="Vcl.Controls.pas" line="1772">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetShowHint" visibility="private" file="Vcl.Controls.pas" line="1773">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetParentShowHint" visibility="private" file="Vcl.Controls.pas" line="1774">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetParentCustomHint" visibility="private" file="Vcl.Controls.pas" line="1775">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetPopupMenu" visibility="private" file="Vcl.Controls.pas" line="1776">
        <parameters>
          <parameter name="Value" type="TPopupMenu"/>
        </parameters>
      </procedure>
      <procedure name="SetTop" visibility="private" file="Vcl.Controls.pas" line="1777">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetVisible" visibility="private" file="Vcl.Controls.pas" line="1778">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetWidth" visibility="private" file="Vcl.Controls.pas" line="1779">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="SetZOrderPosition" visibility="private" file="Vcl.Controls.pas" line="1780">
        <parameters>
          <parameter name="Position" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="UpdateAnchorRules" visibility="private" file="Vcl.Controls.pas" line="1781">
      </procedure>
      <procedure name="WriteIsControl" visibility="private" file="Vcl.Controls.pas" line="1782">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WriteExplicitLeft" visibility="private" file="Vcl.Controls.pas" line="1783">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WriteExplicitTop" visibility="private" file="Vcl.Controls.pas" line="1784">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WriteExplicitWidth" visibility="private" file="Vcl.Controls.pas" line="1785">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WriteExplicitHeight" visibility="private" file="Vcl.Controls.pas" line="1786">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WMLButtonDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1787">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCLButtonDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1788">
        <parameters>
          <parameter name="Message" type="TWMNCHitMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMRButtonDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1789">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMButtonDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1790">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMLButtonDblClk" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1791">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMRButtonDblClk" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1792">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMButtonDblClk" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1793">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMouseMove" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1794">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMLButtonUp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1795">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMRButtonUp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1796">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMButtonUp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1797">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMouseWheel" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1798">
        <parameters>
          <parameter name="Message" type="TWMMouseWheel" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMCancelMode" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1799">
        <parameters>
          <parameter name="Message" type="TWMNoParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMWindowPosChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1800">
        <parameters>
          <parameter name="Message" type="TWMWindowPosMsg" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMVisibleChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1801">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMEnabledChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1802">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMFontChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1803">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMColorChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1804">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMMouseActivate" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1805">
        <parameters>
          <parameter name="Message" type="TCMMouseActivate" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentFontChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1806">
        <parameters>
          <parameter name="Message" type="TCMParentFontChanged" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMSysFontChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1807">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentColorChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1808">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentShowHintChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1809">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMHintShow" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1810">
        <parameters>
          <parameter name="Message" type="TCMHintShow" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMHitTest" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1811">
        <parameters>
          <parameter name="Message" type="TWMNCHitTest" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMMouseEnter" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1812">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMMouseLeave" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1813">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDesignHitTest" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1814">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMBiDiModeChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1815">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentBiDiModeChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1816">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMMouseWheel" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1817">
        <parameters>
          <parameter name="Message" type="TCMMouseWheel" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMGesture" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1818">
        <parameters>
          <parameter name="Message" type="TCMGesture" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMContextMenu" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1819">
        <parameters>
          <parameter name="Message" type="TWMContextMenu" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentTabletOptionsChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1820">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="SetConstraints" visibility="private" file="Vcl.Controls.pas" line="1821">
        <parameters>
          <parameter name="Value" type="TSizeConstraints" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetMargins" visibility="private" file="Vcl.Controls.pas" line="1822">
        <parameters>
          <parameter name="Value" type="TMargins" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetTouchManager" visibility="private" file="Vcl.Controls.pas" line="1823">
        <parameters>
          <parameter name="Value" type="TTouchManager" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetText" visibility="private" file="Vcl.Controls.pas" line="1830">
        <parameters>
          <retval type="TCaption"/>
        </parameters>
      </function>
      <procedure name="SetText" visibility="private" file="Vcl.Controls.pas" line="1831">
        <parameters>
          <parameter name="Value" type="TCaption" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="CMFloat" visibility="private" procflags="message" file="Vcl.Controls.pas" line="1832">
        <parameters>
          <parameter name="Message" type="TCMFloat" paramflags="var"/>
        </parameters>
      </procedure>
      <field name="FCurrentPPI" type="Integer" visibility="protected" size="4" offset="400" file="Vcl.Controls.pas" line="1845">
        <devnotes>
           <summary>   Indicates current PPI value for the control </summary>
        </devnotes>
      </field>
      <field name="FIScaling" type="Boolean" visibility="protected" size="1" offset="404" file="Vcl.Controls.pas" line="1846"/>
      <field name="FAnchorMove" type="Boolean" visibility="protected" size="1" offset="405" file="Vcl.Controls.pas" line="1847"/>
      <field name="FAnchorRules" type="TPoint" visibility="protected" size="8" offset="408" file="Vcl.Controls.pas" line="1848"/>
      <field name="FAnchorOrigin" type="TPoint" visibility="protected" size="8" offset="416" file="Vcl.Controls.pas" line="1849"/>
      <field name="FOriginalParentCalcType" type="TOriginalParentCalcType" visibility="protected" size="1" offset="424" file="Vcl.Controls.pas" line="1850"/>
      <field name="FOriginalParentSize" type="TPoint" visibility="protected" size="8" offset="428" file="Vcl.Controls.pas" line="1851"/>
      <field name="FExplicitLeft" type="Integer" visibility="protected" size="4" offset="436" file="Vcl.Controls.pas" line="1852"/>
      <field name="FExplicitTop" type="Integer" visibility="protected" size="4" offset="440" file="Vcl.Controls.pas" line="1853"/>
      <field name="FExplicitWidth" type="Integer" visibility="protected" size="4" offset="444" file="Vcl.Controls.pas" line="1854"/>
      <field name="FExplicitHeight" type="Integer" visibility="protected" size="4" offset="448" file="Vcl.Controls.pas" line="1855"/>
      <field name="FReserved" type="Pointer" visibility="protected" size="4" offset="452" file="Vcl.Controls.pas" line="1856"/>
      <field name="FScaleFactor" type="Single" visibility="protected" size="4" offset="456" file="Vcl.Controls.pas" line="1858">
        <devnotes>
           <summary>   Indicates current scale factor for the control </summary>
        </devnotes>
      </field>
      <function name="GetDesignDpi" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1860">
        <devnotes><summary>
Obtains the design Dpi for the form where the control was designed. 


</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetParentCurrentDpi" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1864">
        <devnotes><summary>
Obtains the current Dpi for parent control, or the current control Dpi if there is no parent. 


</summary></devnotes>
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetCurrentPPI" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1865">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetDPIForDesigner" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1866">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="AsyncSchedule" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1867">
        <parameters>
          <parameter name="AsyncResult" type="TBaseAsyncResult" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Schedules asynch method calls.
Vcl.Controls.TControl.AsyncSchedule inherits from System.Classes.TComponent.AsyncSchedule. All content below this line refers to System.Classes.TComponent.AsyncSchedule.
Schedules asynch method calls.
By default, AsyncSchedule uses Queue in order to queue the asynch method call with the main thread.
Override AsyncSchedule in descendant components in order to modify the management of the asynchronous scheduling.

 See Also
System.Classes.TComponent.BeginInvoke
System.Classes.TBaseAsyncResult
System.Classes.TBaseAsyncResult.Schedule

</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1868">
        <parameters>
          <parameter name="Sender" type="TObject"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Responds when the action associated with the control changes.
ActionChange is called automatically when the action object specified by the Action property, or any of its properties, changes. By default, the control action link's OnChange event handler calls ActionChange.
ActionChange updates the control properties that correspond to properties of the associated action. These properties include the Caption, Enabled, Hint, and Visible properties and the OnClick event handler.
The Sender parameter is the action object that changed. 
The CheckDefaults parameter indicates whether the control's properties should all be updated or only those that have not been explicitly changed from their default values. When CheckDefaults is true, only those properties and event handlers that have not been changed from the default values are updated.
</summary></devnotes></procedure>
      <procedure name="AdjustSize" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1869">
      <devnotes><summary>
Sets the size of the control as determined by the AutoSize property.
If the AutoSize property is true, AdjustSize is called automatically when the control needs to automatically resize itself to its contents. As implemented in TControl, AdjustSize calls SetBounds with the values of its Left, Top, Width, and Height properties. This call can result in a change of size if these values are altered in the control's OnCanResize or OnConstrainedResize event handlers, or if the control's OnResize event handler makes any final adjustments.
Descendent classes override AdjustSize to change the size of the control to adjust to its contents.
Other controls can call AdjustSize after changing the control's contents. Do not call AdjustSize in application code.
</summary></devnotes></procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1870">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      <devnotes><summary>
Overrides the inherited AssignTo function to enable assignments to TAction objects.
Do not call the protected AssignTo method in application code. The Assign method of a persistent object calls AssignTo if it is passed the control as a Source and the persistent object does not know how to copy the properties of the control. The Dest parameter is the persistent object that should have its properties copied from the control.
As implemented in TControl, AssignTo checks whether the Dest parameter is a TCustomAction object, and if so, assigns values to its Enabled, Hint, Caption, and Visible properties and its OnExecute event. This allows arbitrary controls to assign these to an associated action object.
</summary></devnotes></procedure>
      <procedure name="BeginAutoDrag" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1871">
      <devnotes><summary>
Begins automatic drag.
BeginAutoDrag is called automatically when a user drags a control whose DragMode is dmAutomatic. Do not call BeginAutoDrag in application code.
As implemented in TControl, BeginAutoDrag calls BeginDrag, passing in the global Mouse variable's DragImmediate and DragThreshold properties.
</summary></devnotes></procedure>
      <function name="CanResize" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1872">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
OnCanResize event dispatcher.
CanResize is called automatically when an attempt is made to resize the control, after any autosizing has occurred. The NewWidth and NewHeight arguments specify the attempted new values for the control's height and width. CanResize optionally adjusts the values of NewWidth and NewHeight, and returns true if the control can be resized to the returned values. CanResize returns false if the control cannot be resized.
CanResize generates an OnCanResize event. An OnCanResize event handler may change the values of NewHeight and NewWidth.
</summary></devnotes></function>
      <function name="CanAutoSize" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1873">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether the control can resize itself automatically to accommodate its contents.
CanAutoSize is called automatically when the AutoSize property is true and an attempt is made to resize the control. It allows controls to implement the AutoSize property before the resize sequence that begins with the OnCanResize and OnConstrainedResize events and ends with the OnResize event.
When CanAutoSize is called, the NewWidth and NewHeight parameters indicate the proposed new dimensions of the control. CanAutoSize adjusts these values so that the control's size adjusts to its contents. If the adjustment results in values of NewWidth and NewHeight that differ from the control's current width and height, CanAutoSize returns true, indicating that the resize sequence should proceed. If, after adjustment, NewWidth and NewHeight equal Width and Height, CanAutoSize returns false, and the resize sequence is aborted.
As implemented in TControl, CanAutoSize always returns true without changing NewWidth or NewHeight. Override CanAutoSize to implement the AutoSize property for a particular control class's contents.
</summary></devnotes></function>
      <procedure name="Changed" visibility="protected" file="Vcl.Controls.pas" line="1874">
      <devnotes><summary>
Sends a CM_CHANGED message to the control.
Call Changed after changing the properties of the control in a way that affects the properties of a parent object. Changed sends a CM_CHANGED message back to the control. If the control is a windowed control, this message is sent to the parent so that it can make any necessary adjustments.
</summary></devnotes></procedure>
      <procedure name="ChangeScale" visibility="protected" procflags="overload dynamic" file="Vcl.Controls.pas" line="1875">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
        </parameters>
      <devnotes><summary>
Rescaling event dispatcher.
ChangeScale is called automatically when an event requires that the control resize itself. Most often, this event is a call to the ScaleBy method of the control itself or the control's parent. This allows the control to adjust its own special properties, such as font sizes and display regions. 
ChangeScale parameters have the same meaning as for ScaleBy.

Note:  Because control sizes and coordinates are integers, scaling can result in round-off error. Repeated calls to ChangeScale can make the control gradually get smaller or slowly disappear from the form. Consider destroying and reloading the form after several rescalings.</summary></devnotes></procedure>
      <procedure name="ChangeScale" visibility="protected" procflags="overload dynamic" file="Vcl.Controls.pas" line="1876">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
          <parameter name="isDpiChange" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Rescaling event dispatcher.
ChangeScale is called automatically when an event requires that the control resize itself. Most often, this event is a call to the ScaleBy method of the control itself or the control's parent. This allows the control to adjust its own special properties, such as font sizes and display regions. 
ChangeScale parameters have the same meaning as for ScaleBy.

Note:  Because control sizes and coordinates are integers, scaling can result in round-off error. Repeated calls to ChangeScale can make the control gradually get smaller or slowly disappear from the form. Consider destroying and reloading the form after several rescalings.</summary></devnotes></procedure>
      <procedure name="Click" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1877">
      <devnotes><summary>
Respond to user click.
Click is called automatically when the user left-clicks the control. Component or application code can call Click to simulate a user mouse click. This is often done in menu actions and hotkey handlers.
As implemented in TControl, Click queries whether the OnClick event handler exists and is different from the OnExecute handler for the control's Action. If this is true, the OnClick event handler is called. If this is false, and the Action OnExecute event handler exists, the Action's Execute method is called. Override Click to provide additional behavior.
</summary></devnotes></procedure>
      <procedure name="ConstrainedResize" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1878">
        <parameters>
          <parameter name="MinWidth" type="Integer" paramflags="var"/>
          <parameter name="MinHeight" type="Integer" paramflags="var"/>
          <parameter name="MaxWidth" type="Integer" paramflags="var"/>
          <parameter name="MaxHeight" type="Integer" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Notify control of resize with constraints.
ConstrainedResize is called automatically when a control is resized and has nonzero Constraints. This allows the control to modify the constraints before they are applied.
As implemented in TControl, ConstrainedResize simply calls the OnConstrainedResize event handler.
</summary></devnotes></procedure>
      <function name="CalcCursorPos" visibility="protected" file="Vcl.Controls.pas" line="1879">
        <parameters>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Gives the coordinates of the cursor, with respect to the origin of the control.
Use CalcCursorPos to obtain the current coordinates of the mouse cursor, with respect to the origin of the control. 
</summary></devnotes></function>
      <procedure name="CreateTouchManager" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1880">
      <devnotes><summary>
Instantiates a touch manager.
CreateTouchManager is called automatically in the constructor of the TControl class. By default, it instantiates a TTouchManager class. 
CreateTouchManager can be overridden in descendent classes of TControl to use another touch manager, usually a user-defined one. 
</summary></devnotes></procedure>
      <procedure name="DblClick" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1881">
      <devnotes><summary>
OnDblClick event dispatcher.
DblClick calls any event handler attached to the OnDblClick event. Override DblClick to provide other responses in addition to the inherited event-handler call when the user double-clicks the control.
The DblClick method is triggered by left mouse-button double-click message (WM_LBUTTONDBLCLK) from Windows.
</summary></devnotes></procedure>
      <procedure name="DefaultDockImage" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1882">
        <parameters>
          <parameter name="DragDockObject" type="TDragDockObject"/>
          <parameter name="Erase" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Handles the painting and erasing of a dock image.
The DrawDragDockImage and EraseDragDockImage methods call DefaultDockImage to paint or erase the drag image of a control while the user drags it in a drag-and-dock operation.
DragDockObject contains the drag-and-dock information for the control.
Erase specifies whether to draw or erase the image.
</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1883">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>
Provides methods to read and write the IsControl property to a stream such as a form file.
DefineProperties is called automatically by the streaming system that loads and saves VCL components. It allows persistent objects to read and write properties that are not published. Published properties are loaded and stored automatically.
DefineProperties uses the methods of the filer passed as the Filer parameter to assign methods that can load and save the IsControl property.
Override DefineProperties to persist unpublished properties. Call the DefineBinaryProperty or DefineProperty method of the Filer parameter to assign methods that load or save property values.

Note:  When overriding this method, call the parent class's DefineProperties method first.</summary></devnotes></procedure>
      <procedure name="DockTrackNoTarget" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1884">
        <parameters>
          <parameter name="Source" type="TDragDockObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Handles dragging of the control over an invalid docking target.
DockTrackNoTarget is called automatically when the control is dragged over an invalid docking target. It updates the docking rectangle of the TDragDockObject specified by Source to reflect the current mouse coordinates, as given by X and Y.
</summary></devnotes></procedure>
      <procedure name="DoContextPopup" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1885">
        <parameters>
          <parameter name="MousePos" type="TPoint"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Is an OnContextPopup event dispatcher.
OnContextPopup calls any event handler attached to the OnContextPopup event. When creating a component that descends from TControl override OnContextPopup to provide other responses in addition to the inherited event-handler call when the user invokes the control's context menu.
MousePos indicates the position where the user right-clicked the control. If the user invoked the context menu using the keyboard, MousePos is (-1,-1).
Handled returns a Boolean value indicating whether the control should continue with its default response to the user action.
</summary></devnotes></procedure>
      <procedure name="DoEndDock" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1886">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Is an OnEndDock event dispatcher.
OnEndDock calls any event handler attached to the OnEndDock event. When creating a component that descends from TControl, override OnEndDock to provide other responses in addition to the inherited event-handler call when the user finishes a drag-and-dock operation.
</summary></devnotes></procedure>
      <procedure name="DoDock" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1887">
        <parameters>
          <parameter name="NewDockSite" type="TWinControl"/>
          <parameter name="ARect" type="TRect" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Docking event dispatcher.
DoDock is called automatically as part of the docking process. It updates the control's dimensions and causes it to repaint.
NewDockSite is the control's new dock site. This value can be nil (Delphi) or NULL (C++) or NullDockSite (a constant that indicates no dock site).
ARect specifies the control's new dimensions once it is docked to NewDockSite.
</summary></devnotes></procedure>
      <procedure name="DoStartDock" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1888">
        <parameters>
          <parameter name="DragObject" type="TDragObject" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Is an OnStartDockevent dispatcher.
DoStartDock calls any event handler attached to the OnStartDock event. When creating a component that descends from TControl, override DoStartDock to provide other responses in addition to the inherited event-handler call when the user starts a drag-and-dock operation.
</summary></devnotes></procedure>
      <function name="DoMouseWheel" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1889">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="WheelDelta" type="Integer"/>
          <parameter name="MousePos" type="TPoint"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Processes mouse wheel motion.
DoMouseWheel is called automatically when the user rotates the mouse wheel.
The Shift parameter indicates the current state of the SHIFT, ALT, and CTRL keys.
The WheelDelta parameter indicates the distance the wheel was rotated. WheelDelta is positive if the mouse was rotated upward, negative if the mouse was rotated downward.
The MousePos parameter indicates the current position of the mouse pointer.
DoMouseWheel returns true if an event handler was found and indicated that it handled the event.
As implemented in TControl, DoMouseWheel first attempts to call the OnMouseWheel event handler. If this routine exists and succesfully handles the event, DoMouseWheel returns true. Otherwise, DoMouseWheel repeatedly calls DoMouseWheelDown or DoMouseWheelUp, depending on the direction the user turned the mouse wheel. These routines, in turn, call the OnMouseWheelUp or OnMouseWheelDown event handler.
Before the first call to DoMouseWheelDown or DoMouseWheelUp, DoMouseWheel adds WheelDelta to the WheelAccumulator property. After each call, DoMouseWheel adjusts WheelAccumulator towards zero; each adjustment is by an internal constant that defines the minimum meaningful wheel motion. When the absolute value of of WheelAccumulator drops below the value of this constant, DoMouseWheel exits, returning the value returned by the final call to DoMouseWheelDown or DoMouseWheelUp.
</summary></devnotes></function>
      <function name="DoMouseWheelDown" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1891">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="MousePos" type="TPoint"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Is an OnMouseWheelDown event dispatcher.
The DoMouseWheel method calls DoMouseWheelDown to generate an OnMouseWheelDown event.
The Shift parameter indicates the state of the SHIFT, ALT, and CTRL keys.
The MousePos parameter indicates the position of the mouse pointer.
DoMouseWheelDown returns true if an event handler indicates that it handled the message, and false otherwise.
Override DoMouseWheelDown to perform class-specific tasks in addition to calling the event handler when the mouse wheel is rotated downward.
</summary></devnotes></function>
      <function name="DoMouseWheelUp" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1892">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="MousePos" type="TPoint"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Is an OnMouseWheelUp event dispatcher.
The DoMouseWheel method calls DoMouseWheelUp to generate an OnMouseWheelUp event.
The Shift parameter indicates the state of the SHIFT, ALT, and CTRL keys.
The MousePos parameter indicates the position of the mouse pointer.
DoMouseWheelUp returns true if an event handler indicates that it handled the message, and false otherwise.
Override DoMouseWheelUp to perform class-specific tasks in addition to calling the event handler when the mouse wheel is rotated upward.
</summary></devnotes></function>
      <procedure name="DragCanceled" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1893">
      <devnotes><summary>
Provides the interface for a method that responds to the cancellation of a drag.
DragCanceled is called automatically when a drag operation is canceled. As implemented in TControl, DragCanceled does nothing. When creating a component that descends from TControl, override DragCanceled to provide code that executes when a drag-and-drop or drag-and-dock operation is canceled.
</summary></devnotes></procedure>
      <procedure name="DragOver" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1894">
        <parameters>
          <parameter name="Source" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="State" type="TDragState"/>
          <parameter name="Accept" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Is an OnDragOver event dispatcher.
Override DragOver to add additional code that executes before the OnDragOver event handler is called. 
DragOver sets the Accept parameter to true to indicate that the user can drop the dragged object on the control. It sets Accept to false to indicate that the user cannot drop the dragged object on the control.
The Source parameter is the object being dragged. 
The State parameter indicates how the dragged object is moving in relation to the control. X and Y indicate the current position of the mouse.
</summary></devnotes></procedure>
      <procedure name="DoEndDrag" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1896">
        <parameters>
          <parameter name="Target" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Is an OnEndDrag event dispatcher.
DoEndDrag calls any event handler attached to the OnEndDrag event. When creating a component that descends from TControl, override DoEndDrag to provide other responses in addition to the inherited event-handler call when the user drops an object or cancels a drag-and-drop operation.
</summary></devnotes></procedure>
      <procedure name="DoStartDrag" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1897">
        <parameters>
          <parameter name="DragObject" type="TDragObject" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Is an OnStartDrag event dispatcher.
DoStartDrag calls any event handler attached to the OnStartDrag event. When creating a component that descends from TControl, override DoStartDrag to provide other responses in addition to the inherited event-handler call when the user starts a drag-and-drop operation.
</summary></devnotes></procedure>
      <procedure name="DoGesture" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1898">
        <parameters>
          <parameter name="EventInfo" type="TGestureEventInfo" paramflags="const"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Processes the unhandled gesturing events.
DoGesture is run automatically for all gesturing events that were not handled by the user. DoGesture is run only if OnGesture is not set or if it did not handle the gesture event. 
Override DoGesture in descending classes to support default behavior for gesture events that were not handled by the user. In TControl, the DoGesture method simply returns and does no special processing. 
</summary></devnotes></procedure>
      <procedure name="DoGetGestureOptions" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1899">
        <parameters>
          <parameter name="Gestures" type="TInteractiveGestures" paramflags="var"/>
          <parameter name="Options" type="TInteractiveGestureOptions" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Returns the interactive gestures and their options.
DoGetGestureOptions is used internally to access the interactive gestures and their options associated with a TControl. 
</summary></devnotes></procedure>
      <procedure name="DrawDragDockImage" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1901">
        <parameters>
          <parameter name="DragDockObject" type="TDragDockObject"/>
        </parameters>
      <devnotes><summary>
Draws the dock image for the control.
DrawDragDockImage is called automatically to draw the control (or, more typically, the drag rectangle) when the control is manipulated in drag-and-dock operations.
DrawDragDockImage calls DefaultDockImage to render the image.
</summary></devnotes></procedure>
      <procedure name="EraseDragDockImage" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1902">
        <parameters>
          <parameter name="DragDockObject" type="TDragDockObject"/>
        </parameters>
      <devnotes><summary>
Erases the dock image for the control.
DrawDragDockImage is called automatically to erase the control (or, more typically, the drag rectangle) when the control is manipulated in drag-and-dock operations.
</summary></devnotes></procedure>
      <function name="GetAction" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1903">
        <parameters>
          <retval type="TBasicAction"/>
        </parameters>
      <devnotes><summary>
Returns the value of the Action property.
GetAction is a protected method in the TControl class and is used to obtain the current value of the Action property. 
</summary></devnotes></function>
      <function name="GetActionLinkClass" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1904">
        <parameters>
          <retval type="TControlActionLinkClass"/>
        </parameters>
      <devnotes><summary>
Returns the appropriate action link class that is associated with the control class.
GetActionLinkClass returns the appropriate class type for the action link used with a control. This class is used internally to create an action link object for the control when it has an associated action. The action link links the action to the control client. Each Action link class is designed to link specific properties and event handlers of the action to its client, based on the types of properties the client supports.
As implemented in TControl, GetActionLinkClass returns the TControlActionLink class type, which associates the ShowHint, Caption, Enabled, and Visible properties with the OnClick event handler. Descendants of TControl override this method to specify a descendant of TControlActionLink that handles their configuration of properties and events.
</summary></devnotes></function>
      <function name="GetClientOrigin" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1905">
        <parameters>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Returns the screen coordinates of the upper-left corner of the control's client area.
Override GetClientOrigin to change how the ClientOrigin is calculated.
The GetClientOrigin method is the protected method for reading the ClientOrigin property. GetClientOrigin calculates the ClientOrigin by adding the control's Left and Top values to the ClientOrigin coordinates of its parent.
</summary></devnotes></function>
      <function name="GetClientRect" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1906">
        <parameters>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Returns a rectangle defining the client area of the control.
Override GetClientRect to change how the client area is calculated.
The GetClientRect method is the protected method for reading the ClientRect property. GetClientRect returns a rectangle with the rectangle's Top and Left fields set to zero, and its Bottom and Right fields set to the control's ClientHeight and ClientWidth, respectively.
</summary></devnotes></function>
      <function name="GetDeviceContext" visibility="protected" procflags="overload virtual" file="Vcl.Controls.pas" line="1907">
        <parameters>
          <parameter name="WindowHandle" type="HWND" paramflags="var"/>
          <retval type="HDC"/>
        </parameters>
      <devnotes><summary>
Returns a device context for the control.
Call GetDeviceContext to obtain a device context and window handle. Override GetDeviceContext to change how the device context is obtained.
The window handle used by the control is returned in the WindowHandle parameter. GetDeviceContext returns the device context of this, the parent control's window.
</summary></devnotes></function>
      <function name="GetDockEdge" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1908">
        <parameters>
          <parameter name="MousePos" type="TPoint"/>
          <retval type="TAlign"/>
        </parameters>
      <devnotes><summary>
Returns the edge on which another control should be docked when it is dragged over the control.
Use GetDockEdge to get the edge on which another control should be docked when it is dragged over the control.
MousePos is the position of the mouse.
GetDockEdge is called automatically during drag-and-dock operations involving the control.
</summary></devnotes></function>
      <function name="GetEnabled" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1909">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns the value of the Enabled property.
GetEnabled is the read implementation of the Enabled property.
Override GetEnabled and SetEnabled to change the implementation of the Enabled property. For example, a descendant of TControl might change the way the Enabled property interacts with an associated action.
</summary></devnotes></function>
      <function name="GetFloating" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1910">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns the value of the Floating property.
GetFloating is the implementation of the read-only Floating property. GetFloating returns true if the HostDockSite property is either nil (Delphi) or NULL (C++), or of type FloatingDockSiteClass.
Override this method to change the way a control determines if it is floating.
</summary></devnotes></function>
      <function name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1911">
        <parameters>
          <retval type="TWinControlClass"/>
        </parameters>
      <devnotes><summary>
Returns the class used for the control when it is floating.
GetFloatingDockSiteClass is the read implementation of the FloatingDockSiteClass property. Override this method to change the implementation of FloatingDockSiteClass.
</summary></devnotes></function>
      <function name="GetPalette" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1912">
        <parameters>
          <retval type="HPALETTE"/>
        </parameters>
      <devnotes><summary>
Returns the handle to a palette for use by the control.
As implemented in TControl, GetPalette returns a null handle, indicating that the control does not have a palette. Override GetPalette to implement derived objects that use a palette. Create a palette handle for the control by a call to the Windows API function CreatePalette. GetPalette should return the palette handle for the control.
Specifying the palette for a control tells the application that the control's palette needs to be realized and designates the palette to use for realization.
GetPalette is called only if the run-time video mode requires color palette support, for example, in 256-color mode.
</summary></devnotes></function>
      <function name="GetPopupMenu" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1913">
        <parameters>
          <retval type="TPopupMenu"/>
        </parameters>
      <devnotes><summary>
Returns the pop-up menu associated with the control.
Call GetPopupMenu to find the pop-up menu associated with the control. Override GetPopupMenu to change which pop-up menu is associated with the control or to specify different pop-up menus depending on the state of the control.
GetPopupMenu returns the value of the Popup property.
</summary></devnotes></function>
      <function name="GetDragMode" visibility="protected" file="Vcl.Controls.pas" line="1914">
        <parameters>
          <retval type="TDragMode"/>
        </parameters>
      <devnotes><summary>
Returns the value of the DragMode property.
GetDragMode is a protected method in the TControl class and is used to obtain the current value of the DragMode property. 
</summary></devnotes></function>
      <function name="IsTouchPropertyStored" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1915">
        <parameters>
          <parameter name="AProperty" type="TTouchProperty"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the associated touch manager stored any of the given options.
IsTouchPropertyStored is used internally by the VCL framework to check whether the associated touch manager component has stored the given options. Do not call IsTouchPropertyStored directly. IsTouchPropertyStored is used primarily to ensure that controls that do not require gesturing are not storing useless data in the DFMs or executables. 
</summary></devnotes></function>
      <procedure name="Loaded" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1916">
      <devnotes><summary>
Initializes the control after it is loaded from a stream.
Do not call Loaded. The VCL streaming system calls Loaded automatically after the control's form is loaded into memory so that the control can complete any initializations that depend on other objects in the form.
Loaded overrides the inherited method in order to initialize the control from its associated Action. To change the properties the control copies from its action, override the ActionChange method.
</summary></devnotes></procedure>
      <function name="MouseActivate" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1917">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="HitTest" type="Integer"/>
          <retval type="TMouseActivate"/>
        </parameters>
      <devnotes><summary>
Triggers a TMouseActivateEvent event.
Use MouseActivate to trigger a TMouseActivateEvent event with the given parameters. 
The following table explains the meaning of each parameter:





Parameter

Meaning



Button



The mouse button that is pressed.




Shift



The shift state while the mouse button is pressed.




X | Y



The current mouse coordinates.




HitTest



The hit test value obtained from the WM_NCHITTEST message.




</summary></devnotes></function>
      <procedure name="MouseDown" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1919">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
OnMouseDown event dispatcher.
Override the protected MouseDown method to provide other responses in addition to calling the OnMouseDown event handler when the user presses the mouse button down while the cursor's hotspot is over the control.
The Button parameter determines which mouse button the user pressed. Shift indicates which shift keys (Shift, Ctrl, or Alt) were down when the user pressed the mouse button. X and Y are the pixel coordinates of the mouse pointer within the client area of the control.
A control calls MouseDown in response to any of the Windows mouse-down messages (WM_LBUTTONDOWN, WM_MBUTTONDOWN, WM_RBUTTONDOWN), decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively. The value of the Button parameter indicates which mouse button was pressed down: left, right, or middle.
</summary></devnotes></procedure>
      <procedure name="MouseMove" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1921">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Responds to mouse moving over control area.
Override the protected MouseMove method to provide other responses in addition to calling the OnMouseMove event handler when the user moves the mouse.
A control calls MouseMove in response to any of the Windows mouse-move messages (WM_MOUSEMOVE), decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively.
As the mouse cursor moves across a control, this method is called repeatedly. Each time it is called, it is with the new coordinates that reflect the continuous path of the mouse cursor across the screen real estate covered by the control's visual representation.
</summary></devnotes></procedure>
      <procedure name="MouseUp" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1922">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Is an OnMouseUp event dispatcher.
Override the protected MouseUp method to provide other responses in addition to calling the OnMouseUp event handler when the user releases a previously pressed mouse button while the cursor's hot spot is over the control.
A control calls MouseUp in response to any of the Windows mouse-up messages (WM_LBUTTONUP, WM_MBUTTONUP, WM_RBUTTONUP), decoding the message parameters into the shift-key state and position, which it passes in the Shift, X, and Y parameters, respectively. The value of the Button parameter indicates which mouse button was released: left, right, or middle.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1924">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>
Responds to notifications indicating that components are being created or destroyed.
Notification allows TControl to update its internal state if an associated component is removed. The internal state is updated if: 

The associated pop-up menu is destroyed.
The control docking site is destroyed.
The custom hint associated with the control is destroyed.
The associated gesture manager is destroyed.
Override the Notification method to respond to notifications indicating that other components are about to be destroyed or have just been created. Use the Notification method to update controls that rely on other objects. Data-aware objects override the Notification method to update themselves when their data source is removed. Some objects respond to notifications indicating that other objects of a specific type are being created. For example, the session component sets the Session property of new data-aware controls to itself when the AutoSessionName property is True. 
By default, components pass along the notification to their owned components, if any.
</summary></devnotes></procedure>
      <procedure name="PositionDockRect" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1926">
        <parameters>
          <parameter name="DragDockObject" type="TDragDockObject"/>
        </parameters>
      <devnotes><summary>
Positions the docking rectangle according to the current drag-and-dock state.
Use PositionDockRect to adjust the docking rectangle of the drag-and-dock object specified by DragDockObject. DragDockObject's DockRect property is updated to reflect the current drag-and-dock state. This updating process makes use of the UndockWidth, UndockHeight, LRDockWidth, or TBDockHeight property, as appropriate.
</summary></devnotes></procedure>
      <function name="PaletteChanged" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1927">
        <parameters>
          <parameter name="Foreground" type="Boolean"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Responds to changes in the system's palette by realizing the control's palette.
Override PaletteChanged to change how the control responds to Windows notifications that the system palette is changing. TControl responds to these notifications by trying to realize the control's palette, if any, into the current device context. If the change in the system palette causes the actual value of the control's palette to change, PaletteChanged invalidates the control so that it can repaint with the new palette.
Windows paints the active window with a foreground palette, while other windows are forced to use background palettes. Background palettes are approximate matches to the colors specified by the control's logical palette, given the limitations imposed by implementing the foreground palette. Windows only allows a single foreground palette.
PaletteChanged allows the control to obtain a new realization of its palette when the system palette changes. When Foreground is true, the form has been activated and the control is specifying the new foreground palette. When Foreground is false, another application or form has changed the foreground palette, and controls that are sensitive to the available palette should realize new background palettes to best match their logical palettes.
If the control does not have a logical palette to be realized into the current device context, GetPalette returns a handle of 0, and PaletteChanged returns false, indicating that no palette was realized. If GetPalette returns the handle to a logical palette, PaletteChanged realizes this palette into the current device context, and returns true.

Note: PaletteChanged is called only when the run-time video mode requires palette support, such as for 256 color mode, but not 16 million color mode.</summary></devnotes></function>
      <procedure name="ReadState" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1928">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      <devnotes><summary>
Prepares the control for having its properties assigned values read from a stream.
ReadState is part of a sequence of calls used by the streaming system that loads and saves component state. It reads the values of all the control's published properties, stored data, and owned components from the reader object passed in Reader. 
Override ReadState to change the preparations the control makes as it readies itself to have its property values assigned from a stream. For example, a control might destroy temporary internal data structures or objects before new instances are loaded from the stream. Remember to include a call to the inherited class's method when overriding ReadState.
As implemented in TControl, ReadState assigns the Reader parameter's Parent property to the control's own Parent property before calling the inherited ReadState method of TComponent. Finally, ReadState synchronizes the Font, Color, and ShowHint properties with the parent control, as indicated by the ParentFont, ParentColor, and ParentShowHint properties, respectively.
</summary></devnotes></procedure>
      <procedure name="RequestAlign" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1929">
      <devnotes><summary>
Instructs the parent of a control to reposition the control, enforcing its Align property.
Controls call RequestAlign internally when changes are made to the size or position of the control, so that they remain properly aligned within the parent control. Do not call RequestAlign in application code.
</summary></devnotes></procedure>
      <procedure name="Resize" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1930">
      <devnotes><summary>
Respond to control resize.
Resize is called automatically immediately after the control's dimensions change. As implemented in TControl, Resize calls the control's OnResize event handler if it is assigned.
</summary></devnotes></procedure>
      <procedure name="ScaleConstraints" visibility="protected" file="Vcl.Controls.pas" line="1931">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
        </parameters>
      <devnotes><summary>
Scales the values of the Constraints property to the given ratio.
Use ScaleConstraints to scale the values of the Constraints property to the given M/D ratio.
</summary></devnotes></procedure>
      <procedure name="ScaleMargins" visibility="protected" file="Vcl.Controls.pas" line="1932">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
        </parameters>
      <devnotes><summary>
Scales the values of the Margins property to the given ratio.
Use ScaleMargins to scale the values of the Margins property to the given M/D ratio.
</summary></devnotes></procedure>
      <function name="DefaultScalingFlags" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1933">
        <parameters>
          <retval type="TScalingFlags"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SendCancelMode" visibility="protected" file="Vcl.Controls.pas" line="1934">
        <parameters>
          <parameter name="Sender" type="TControl"/>
        </parameters>
      <devnotes><summary>
Cancels the modal state of the control.
Call SendCancelMode to cancel the modal state of the control. Various controls implemented in the VCL support a model state where the user must respond to the control before interacting with any other object on the form. An example is the dropped-down state of a combo box when the drop-down list is showing. For these controls, specific user actions send a Windows message to the control to end the model state, such as a mouse click that closes up the drop-down list.
SendCancelMode allows an application to end the modal state of the control in the absence of a user action, or when implementing a new user interface response.
</summary></devnotes></procedure>
      <procedure name="SendDockNotification" visibility="protected" file="Vcl.Controls.pas" line="1935">
        <parameters>
          <parameter name="Msg" type="Cardinal"/>
          <parameter name="WParam" type="NativeUInt"/>
          <parameter name="LParam" type="NativeUInt"/>
        </parameters>
      <devnotes><summary>
Sends a Windows message to the control's host dock site.
Use SendDockNotification to send a Windows message to the control's host dock site.
SendDockNotification is called automatically when the control's text or visibility changes.
</summary></devnotes></procedure>
      <procedure name="SetAutoSize" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1936">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sets the value of the AutoSize property.
SetAutoSize is a protected method in the TControl class and is used to set the value of the AutoSize property. 
</summary></devnotes></procedure>
      <procedure name="SetDragMode" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1937">
        <parameters>
          <parameter name="Value" type="TDragMode"/>
        </parameters>
      <devnotes><summary>
Sets the drag mode for the control.
SetDragMode is the protected write implementation for the DragMode property. Override SetDragMode to execute additional code when the value of the DragMode property changes.
</summary></devnotes></procedure>
      <procedure name="SetEnabled" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1938">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sets the value of the Enabled property.
SetEnabled is the protected write implementation of the Enabled property. After changing the internal representation of the Enabled property, SetEnabled sends a Windows message back to the control so that it can respond to the change. When TControl receives this message, it invalidates the control so that its appearance reflects the change (for example, so that it appears grayed). Some descendants respond to this message in other ways (for example, windowed controls ensure that a disabled control does not have focus).
Override GetEnabled and SetEnabled to change the implementation of the Enabled property. For example, a descendant of TControl might change the way the Enabled property interacts with an associated action. When overriding SetEnabled, be sure to call the inherited method.
</summary></devnotes></procedure>
      <procedure name="SetName" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="1939">
        <parameters>
          <parameter name="Value" type="TComponentName" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Sets the name of the control.
SetName is the protected write implementation of the Name property. TControl updates the Text or Caption property, if appropriate, after changing the value of Name.
Override SetName to execute additional code when the value of the Name property changes.
</summary></devnotes></procedure>
      <procedure name="SetParent" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1940">
        <parameters>
          <parameter name="AParent" type="TWinControl"/>
        </parameters>
      <devnotes><summary>
Sets the parent of the control.
SetParent is the protected implementation of the Parent property. Override SetParent to execute additional code when the value of the Parent property changes.
The AParent parameter specifies the new parent of the control.
If the control already has a parent, SetParent removes the control from that parent's list of controls by calling the parent's RemoveControl method. If AParent is not nil (Delphi) or NULL (C++), SetParent calls its InsertControl method to add the control to its list of controls.
The TControl destructor calls SetParent(nil (Delphi) or NULL (C++)) to remove the control from its parent's control list before destroying the component.
</summary></devnotes></procedure>
      <procedure name="SetParentBiDiMode" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1941">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether the control uses its parent's BiDiMode.
SetParentBiDiMode is the protected write implementation of the ParentBiDiMode property.
</summary></devnotes></procedure>
      <procedure name="SetBiDiMode" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1942">
        <parameters>
          <parameter name="Value" type="TBiDiMode"/>
        </parameters>
      <devnotes><summary>
Sets the control's bidirectional mode.
SetBiDiMode is the write implementation of the control's BiDiMode property. Override this method to change the implementation of BiDiMode.
</summary></devnotes></procedure>
      <procedure name="SetStyleElements" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1943">
        <parameters>
          <parameter name="Value" type="TStyleElements" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetStyleName" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1944">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="SetZOrder" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1945">
        <parameters>
          <parameter name="TopMost" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Repositions the control in its parent's control list, thereby changing position onscreen.
Call SetZOrder to change the z-order of the control. To make the control the topmost control, specify the TopMost value as true. To make the control the bottommost, set TopMost to false.
After changing the order, SetZOrder invalidates the control to ensure repainting to reflect the new order.
The stacking order of windowed and non-windowed controls cannot be mingled. For example, if you put a memo, a windowed control on a form, and then put a label, a non-windowed control on top of it, the label disappears behind the memo. Windowed controls always stack on top of non-windowed controls. In this example, calling the SetZOrder method of the label or the memo has no effect; the label always remains behind the memo.
</summary></devnotes></procedure>
      <procedure name="SetCustomHint" visibility="protected" file="Vcl.Controls.pas" line="1946">
        <parameters>
          <parameter name="Value" type="TCustomHint"/>
        </parameters>
      <devnotes><summary>
Sets the value of the CustomHint property.
SetCustomHint is a protected method in the TControl class and is used to set the value of the CustomHint property. 
</summary></devnotes></procedure>
      <procedure name="UpdateExplicitBounds" visibility="protected" file="Vcl.Controls.pas" line="1947">
      <devnotes><summary>
Attempts to update the values of the control's explicit bounds to those of its current bounds.
Use UpdateExplicitBounds to update the values of the control's explicit bounds to those of its current bounds. 
The update process succeeds as long as the options csAligning in ControlState and csReading in ComponentState are disabled. 
</summary></devnotes></procedure>
      <procedure name="UpdateBoundsRect" visibility="protected" file="Vcl.Controls.pas" line="1948">
        <parameters>
          <parameter name="R" type="TRect" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Changes the Top, Left, Width, and Height properties of the control, but does not update its screen image and bypasses all resize events.
UpdateBoundsRect is used internally by controls to stay synchronized with changes made by the underlying Windows screen object. UpdateBoundsRect updates the properties to match those passed in the rectangle as the R parameter.
</summary></devnotes></procedure>
      <procedure name="VisibleChanging" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1949">
      <devnotes><summary>
Provides the interface for a method that responds to changes in the control's visibility.
VisibleChanging is called before the value of a control's Visible property changes. As implemented in TControl, it does nothing. Override VisibleChanging to respond to changes in the control's visibility. For example, if a control should not change its visibility, override VisibleChanging to raise an exception when an attempt is made to alter the control's visibility.
</summary></devnotes></procedure>
      <procedure name="WndProc" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1950">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Provides specific message responses for the control.
Override WndProc to change the initial Windows message handler for the control. The WindowProc property is initialized to WndProc.
WndProc implements the mouse behavior specified by the ControlStyle and DragMode properties, and updates the ControlState property. It passes any unhandled messages on to the Dispatch method.
When overriding WndProc to provide specialized responses to messages, be sure to call the inherited WndProc at the end to dispatch any unhandled messages.
</summary></devnotes></procedure>
      <procedure name="UpdateStyleElements" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1951">
      <devnotes><summary>
Called when the StyleElements property changes.
Override the UpdateStyleElements method in a descendant class to provide customized behavior for the control when the value of the StyleElements property changes. 
</summary></devnotes></procedure>
      <function name="DesignWndProc" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="1958">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Processes the given message and returns some Boolean information based on the message's content.
DesignWndProc returns true if the csDesignInteractive option in ControlStyle is enabled and if either the right mouse button is pressed or the right mouse button is released. The true value is returned also when ControlStyle is enabled and when either the mouse has moved or the right mouse button is double-clicked. 
</summary></devnotes></function>
      <function name="GetDragImages" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1959">
        <parameters>
          <retval type="TDragImageList"/>
        </parameters>
      <devnotes><summary>
Returns the control's image list containing the image to be displayed while dragging.
Override GetDragImages to provide a custom image list for the control. As implemented in TControl, GetDragImages returns nil (Delphi) or NULL (C++).
</summary></devnotes></function>
      <function name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="1961">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="ActionLink" visibility="protected" read="FActionLink" write="FActionLink" type="TControlActionLink" file="Vcl.Controls.pas" line="1963"><devnotes><summary>
Contains the action link object associated with the control.
ActionLink handles the association between the control and the action specified by the Action property. The action link specifies which properties and events of the action object determine the values of the control's corresponding properties and events.
Most applications do not use the ActionLink property. Component writers can change this property in TControl descendants to be a custom descendant of TControl ActionLink that handles a desired configuration of properties and events.
</summary></devnotes></property>
      <property name="AutoSize" visibility="protected" read="FAutoSize" write="SetAutoSize" type="Boolean" default="0" file="Vcl.Controls.pas" line="1964"><devnotes><summary>
Specifies whether the control sizes itself automatically to accommodate its contents.
Use AutoSize to specify whether the control sizes itself automatically. When AutoSize is True, the control resizes automatically when its contents change.
By default, AutoSize is False.
</summary></devnotes></property>
      <property name="Caption" visibility="protected" read="GetText" write="SetText" stored="IsCaptionStored" type="TCaption" default="0" file="Vcl.Controls.pas" line="1965"><devnotes><summary>
Specifies a text string that identifies the control to the user.
Use Caption to specify the text string that labels the control.
To underline a character in a Caption that labels a component, include an ampersand (&amp;) before the character. This type of character is called an accelerator character. The user can then select the component by pressing ALT while typing the underlined character. To display an ampersand character in the caption, use two ampersands (&amp;&amp;).

Notes:
Controls that display text use either the Caption property or the Text property to specify the text value. The property that is used depends on the type of control. In general, Caption is used for text that appears as a window title or label, while Text is used for text that appears as the content of a control.
For some controls, such as TButton, it is not possible to change the color of the Caption. If you want to change the color of a button caption, you should use an alternate button type such as TSpeedButton or TBitBtn instead of TButton. With either TSpeedButton or TBitBtn, you can change the color of the Caption property by using the Font property.
For TLinkLabel, an HTML tag is declared inside the Caption property either at run time or at design time.
</summary></devnotes></property>
      <property name="DesktopFont" visibility="protected" read="FDesktopFont" write="SetDesktopFont" type="Boolean" default="0" file="Vcl.Controls.pas" line="1966"><devnotes><summary>
Specifies whether the control uses the Windows icon font when writing text.
Set DesktopFont to true to specify that the control should use the Windows icon font for its Font property. The Windows icon font is the value of the IconFont property of the global Screen variable. 
When DesktopFont is true, the control's Font property updates every time the Windows icon font changes. This font can be changed by setting the IconFont property of the global Screen variable, or by the actions of other programs. Setting the Font property from the IconFont property of the Screen object does not allow controls to dynamically respond in this manner when the Windows icon font changes. 
</summary></devnotes></property>
      <property name="DragKind" visibility="protected" read="FDragKind" write="FDragKind" type="TDragKind" default="0" file="Vcl.Controls.pas" line="1967"><devnotes><summary>
Specifies whether the control is being dragged normally or for docking.
Use DragKind to get or set whether the control participates in drag-and-drop operations or drag-and-dock operations.
</summary></devnotes></property>
      <property name="DragCursor" visibility="protected" read="FDragCursor" write="FDragCursor" type="TCursor" default="-12" file="Vcl.Controls.pas" line="1968"><devnotes><summary>
Specifies the image used to represent the mouse pointer when the control is being dragged.
Use the DragCursor property to change the cursor image presented when the control is being dragged.

Note: To make a custom cursor available for the DragCursor property, see the Cursor property.</summary></devnotes></property>
      <property name="DragMode" visibility="protected" read="GetDragMode" write="SetDragMode" type="TDragMode" default="0" file="Vcl.Controls.pas" line="1969"><devnotes><summary>
Specifies how the control initiates drag-and-drop or drag-and-dock operations.
Use DragMode to control when the user can drag the control. Disable the drag-and-drop or drag-and-dock capability at run time by setting the DragMode property value to dmManual. Enable automatic dragging by setting DragMode to dmAutomatic. For more information about dmManual and dmAutomatic, see TDragMode.
</summary></devnotes></property>
      <property name="IsControl" visibility="protected" read="FIsControl" write="FIsControl" type="Boolean" file="Vcl.Controls.pas" line="1970"><devnotes><summary>
Specifies whether a form stores its form-specific properties to a stream.
Use IsControl to use a form as a complex control, rather than as a desktop form. IsControl affects the way the form gets saved. When IsControl is true, form-specific properties do not get saved with the form. When IsControl is false, the form-specific properties get saved along with the other properties.
IsControl permits you to use the forms designer to create complex controls by creating those controls as forms, placing and naming their contained controls, and attaching code to events. After saving the form, edit the form as text, and in the text version set IsControl to true. The next time the form is loaded and saved, only those form properties appropriate to use as a control are stored, not the properties specific to TForm. Next, edit the form file as text, changing the type of the component from TForm to the desired control type, such as TPanel.
</summary></devnotes></property>
      <property name="MouseCapture" visibility="protected" read="GetMouseCapture" write="SetMouseCapture" type="Boolean" file="Vcl.Controls.pas" line="1971"><devnotes><summary>
Specifies whether the control has &quot;captured&quot; mouse events.
Use MouseCapture to determine whether a control has captured the mouse. When a control captures the mouse, all subsequent mouse events go to that control until the user releases the mouse button.
A control captures the mouse when the user drags an item from it. In addition, if the control has the csCaptureMouse flag set in its ControlStyle property, it captures the mouse when the user presses the left mouse button over it, until the user releases the mouse button.
</summary></devnotes></property>
      <property name="ParentBiDiMode" visibility="protected" read="FParentBiDiMode" write="SetParentBiDiMode" type="Boolean" default="1" file="Vcl.Controls.pas" line="1972"><devnotes><summary>
Specifies whether the control uses its parent's BiDiMode.
Use ParentBiDiMode to get or set whether the control uses its parent's BiDiMode. When ParentBiDiMode is true, the control's BiDiMode property is always equal to that of its parent. If ParentBiDiMode is false, the control uses its own BiDiMode property.
Set ParentBiDiMode to true for all controls in a form to ensure that the entire user interface adjusts to Middle Eastern locales in a uniform manner.
When the value of the control's BiDiMode property changes, ParentBiDiMode becomes false automatically.
</summary></devnotes></property>
      <property name="ParentColor" visibility="protected" read="FParentColor" write="SetParentColor" type="Boolean" default="1" file="Vcl.Controls.pas" line="1973"><devnotes><summary>
Specifies where a control looks for its color information.
To have a control use the same color as its parent control, set ParentColor to True. If ParentColor is False, the control uses its own Color property.
Set ParentColor to True for all controls to ensure that all the controls on a form have a uniform appearance. For example, if ParentColor is True for all controls in a form, changing the background color of the form to gray causes all the controls on the form to also have a gray background.
When the value of a control's Color property changes, ParentColor becomes False automatically.
</summary></devnotes></property>
      <property name="ParentFont" visibility="protected" read="FParentFont" write="SetParentFont" type="Boolean" default="1" file="Vcl.Controls.pas" line="1974"><devnotes><summary>
Specifies where a control looks for its font information.
To have a control use the same font as its parent control, set ParentFont to true. If ParentFont is false, the control uses its own Font property. Many controls default ParentFont to true so that all the controls in a form or other container present a uniform appearance. When the value of a control's Font property changes, ParentFont becomes false automatically.
When ParentFont is true for a form, the form uses the default font. Currently, the default font is Tahoma 8 pt.
</summary></devnotes></property>
      <property name="ParentShowHint" visibility="protected" read="FParentShowHint" write="SetParentShowHint" type="Boolean" default="1" file="Vcl.Controls.pas" line="1975"><devnotes><summary>
Specifies where a control looks to find out if its Help Hint should be shown.
Use ParentShowHint to ensure that all the controls on a form either uniformly show their Help Hints or uniformly do not show them. 
If ParentShowHint is True, the control uses the ShowHint property value of its parent. If ParentShowHint is False, the control uses the value of its own ShowHint property.
To provide Help Hints only for selected controls on a form, set the ShowHint property for those controls that should have Help Hints to True, and ParentShowHint becomes False automatically.

Note:  Enable or disable all Help Hints for the entire application using the ShowHint property of the application object.</summary></devnotes></property>
      <property name="PopupMenu" visibility="protected" read="FPopupMenu" write="SetPopupMenu" type="TPopupMenu" file="Vcl.Controls.pas" line="1976"><devnotes><summary>
Specifies the pop-up menu associated with the control.
Assign a value to PopupMenu to make a pop-up menu appear when the user selects the control and clicks the right mouse button. If the TPopupMenu's AutoPopup property is True, the pop-up menu appears automatically. If the menu's AutoPopup property is False, display the menu with a call to its Popup method from the control's OnContextPopup event handler.
</summary></devnotes></property>
      <property name="ScalingFlags" visibility="protected" read="FScalingFlags" write="FScalingFlags" type="TScalingFlags" file="Vcl.Controls.pas" line="1977"><devnotes><summary>
Reflects which attributes of the control have been scaled.
ScalingFlags is an internal set of flags used primarily in scaling inherited forms and their controls. Applications should not use this property without a serious need. 
These are the flags and their meanings:





Flag

Meaning



sfLeft



Left side of control not yet scaled




sfTop



Top of control not yet scaled




sfWidth



Width of control not yet scaled




sfHeight



Height of control not yet scaled




sfFont



Font of control not yet scaled




sfDesignSize



Design-time dimensions of control not yet scaled




</summary></devnotes></property>
      <property name="Text" visibility="protected" read="GetText" write="SetText" type="TCaption" default="0" file="Vcl.Controls.pas" line="1978"><devnotes><summary>
Contains a text string associated with the control.
Use the Text property to read the Text of the control or to specify a new string for the Text value. By default, Text is the control name. For edit controls and memos, the Text appears within the control. For combo boxes, the Text is the content of the edit control portion of the combo box. 

Note:  Controls that display text use either the Caption property or the Text property to specify the text value. Which property is used depends on the type of control. In general, Caption is used for text that appears as a window title or label, while Text is used for text that appears as the content of a control. </summary></devnotes></property>
      <property name="WheelAccumulator" visibility="protected" read="FWheelAccumulator" write="FWheelAccumulator" type="Integer" file="Vcl.Controls.pas" line="1979"><devnotes><summary>
Accumulates mouse wheel rotations.
WheelAccumulator contains a value indicating the progress of event handlers in response to mouse wheel motion. See DoMouseWheel for more information.
</summary></devnotes></property>
      <property name="Color" visibility="protected" read="FColor" write="SetColor" stored="IsColorStored" type="TColor" default="-16777211" file="Vcl.Controls.pas" line="1983"><devnotes><summary>
Specifies the background color of the control.
Use Color to read or change the background color of the control.
If a control's Vcl.Controls.TControl.ParentColor property is True, then changing the Color property of the control's parent automatically changes the Color property of the control. When the value of the Color property is changed, the control's ParentColor property is automatically set to False.
The Color of a TLabel is always the color of the background unless you set TLabel.Transparent to False. 
</summary></devnotes></property>
      <property name="Font" visibility="protected" read="FFont" write="SetFont" stored="IsFontStored" type="TFont" file="Vcl.Controls.pas" line="1984"><devnotes><summary>
Specifies the attributes of text written on or in the control.
To change to a new font, specify a new TFont object. To modify a font, change the value of the Charset, Color, Height, Name , Pitch, Size, or Style of the TFont object.

Note: Changing the font color of the Caption is not supported for some controls (such as TButton). In most cases, there is an alternate control you can use whose Font property will change the color of the caption or text (such as TBitBtn or TSpeedButton).</summary></devnotes></property>
      <property name="IScaling" visibility="protected" read="FIScaling" type="Boolean" file="Vcl.Controls.pas" line="1985"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="WindowText" visibility="protected" read="FText" write="FText" type="PWideChar" file="Vcl.Controls.pas" line="1986"><devnotes><summary>
Specifies the text string of the control.
Use WindowText to specify the text associated with the control. When setting WindowText, the control frees the memory associated with the previous value of WindowText before assigning a new value. Any memory associated with WindowText is freed when the control is destroyed. By default, WindowText is the same string as the Text property. Descendants of TControl can override the Text property to implement a different value.
For an edit box, the WindowText is the content of the control. For a combo box, the text string is the content of the edit box part of the combo box. For a button, the string is the button name. For all other controls, the string is the window title.
</summary></devnotes></property>
      <event name="OnCanResize" visibility="protected" read="FOnCanResize" write="FOnCanResize" type="TCanResizeEvent" file="Vcl.Controls.pas" line="1988"><devnotes><summary>
Occurs when an attempt is made to resize the control.
Use OnCanResize to adjust the way a control is resized. If necessary, change the new width and height of the control in the OnCanResize event handler. The OnCanResize event handler also allows applications to indicate that the entire resize should be aborted.
If there is no OnCanResize event handler, or if the OnCanResize event handler indicates that the resize attempt can proceed, the OnCanResize event is followed immediately by an OnConstrainedResize event.
OnCanResize is an event handler of type Vcl.Controls.TCanResizeEvent.
</summary></devnotes></event>
      <event name="OnClick" visibility="protected" read="FOnClick" write="FOnClick" stored="IsOnClickStored" type="TNotifyEvent" file="Vcl.Controls.pas" line="1989"><devnotes><summary>
Occurs when the user clicks the control.
Use the OnClick event handler to respond when the user clicks the control. If the control has an associated action, and that action has an OnExecute method, the action's OnExecute method responds to click events unless it is superseded by an OnClick event handler.
Usually, OnClick occurs when the user presses and releases the left mouse button with the mouse pointer over the control. This event can also occur when:

The user selects an item in a grid, outline, list, or combo box by pressing an arrow key.
The user presses the SPACEBAR while a button or check box has focus.
The user presses ENTER when the active form has a default button (specified by the Default property).
The user presses ESC when the active form has a cancel button (specified by the Cancel property).
The user presses the accelerator key for a button or check box. For example, if the value of the Caption property of a check box is '&amp;Bold', the B is underlined at run time and the OnClick event of the check box is triggered when the user presses Alt+B. However, focus does not move to the control in these instances.
The Checked property of a radio button is set to True.
The value of the Checked property of a check box is changed.
Note: When you change the value of the Checked property programmatically, the OnClick event of the check box control occurs. Do not modify the value of the Checked property in the event handler of the OnClick event, because that leads into a deadlock situation.
The Click method of a menu item is called.
For a form, an OnClick event occurs when the user clicks a disabled component or in a blank area of the form.
OnClick is an event handler of type TNotifyEvent.
</summary></devnotes></event>
      <event name="OnConstrainedResize" visibility="protected" read="FOnConstrainedResize" write="FOnConstrainedResize" type="TConstrainedResizeEvent" file="Vcl.Controls.pas" line="1990"><devnotes><summary>
Adjusts the resize constraints.
Use OnConstrainedResize to adjust a control's constraints when an attempt is made to resize it. Upon entry to the OnConstrainedResize event handler, the parameters of the event handler are set to the corresponding properties of the control's Constraints object. The event handler can adjust those values before they are applied to the new height and width that are being applied to the control. (The CanAutoSize method or an OnCanResize event handler may already have adjusted this new height and width).
On exit from the OnConstrainedResize event handler, the constraints are applied to the attempted new height and width. Once the constraints are applied, the control's height and width are changed. After the control's height and width change, an OnResize event occurs to allow any final adjustments or responses.

Note: The OnConstrainedResize handler is called immediately after the OnCanResize handler.
OnConstrainedResize is an event handler of type Vcl.Controls.TConstrainedResizeEvent.
</summary></devnotes></event>
      <event name="OnContextPopup" visibility="protected" read="FOnContextPopup" write="FOnContextPopup" type="TContextPopupEvent" file="Vcl.Controls.pas" line="1991"><devnotes><summary>
Occurs when the user right-clicks the control or otherwise invokes the pop-up menu (such as using the keyboard).
The OnContextPopup event handler is called when the user utilizes the mouse or keyboard to request a pop-up menu. The OnContextPopup event is generated by a WM_CONTEXTMENU message, which is itself generated by the user clicking the right mouse button or by pressing SHIFT+F10 or the Applications key. 
This event is especially useful when the control does not have an associated pop-up menu (the PopupMenu property is not set) or if the AutoPopup property of the control's associated pop-up menu is False. However, the OnContextPopup can also be used to override the automatic context menu that appears when the control has an associated pop-up menu with an AutoPopup property of True. In this last case, if the event handler displays its own menu, it should set the Handled parameter to True to suppress the default context menu.
The handler's MousePos parameter indicates the position of the mouse, in client coordinates. If the event was not generated by a mouse click, MousePos is (-1,-1).

Note: Parent controls receive an OnContextPopup event before their child controls. In addition, for many child controls, the default window procedure causes the parent control to receive an OnContextPopup event after the child control. As a result, when parent controls do not set Handled to True in an OnContextPopup event handler, the event handler may be called multiple times for each context menu invocation.
OnContextPopup is an event handler of type Vcl.Controls.TContextPopupEvent.
</summary></devnotes></event>
      <event name="OnDblClick" visibility="protected" read="FOnDblClick" write="FOnDblClick" type="TNotifyEvent" file="Vcl.Controls.pas" line="1992"><devnotes><summary>
Occurs when the user double-clicks the left mouse button when the mouse pointer is over the control.
Use the OnDblClick event to respond to mouse double-clicks.
OnDblClick is an event handler of type System.Classes.TNotifyEvent.
</summary></devnotes></event>
      <event name="OnDragDrop" visibility="protected" read="FOnDragDrop" write="FOnDragDrop" type="TDragDropEvent" file="Vcl.Controls.pas" line="1993"><devnotes><summary>
Occurs when the user drops an object being dragged.
Use the OnDragDrop event handler to specify what happens when the user drops an object. The Source parameter of the OnDragDrop event is the object being dropped, and the Sender is the control on which the object is being dropped. The X and Y parameters are the coordinates of the mouse positioned over the control.
OnDragDrop is an event handler of type TDragDropEvent.
</summary></devnotes></event>
      <event name="OnDragOver" visibility="protected" read="FOnDragOver" write="FOnDragOver" type="TDragOverEvent" file="Vcl.Controls.pas" line="1994"><devnotes><summary>
Occurs when the user drags an object over a control.
Use an OnDragOver event to signal that the control can accept a dragged object so the user can drop or dock it.
Within the OnDragOver event handler, change the Accept parameter to False to reject the dragged object. Leave Accept as True to allow the user to drop or dock the dragged object on the control.
To change the shape of the cursor, indicating that the control can accept the dragged object, change the value of the DragCursor property for the control before the OnDragOver event occurs. 
The Source is the object being dragged, the Sender is the potential drop or dock site, and X and Y are screen coordinates in pixels. The State parameter specifies how the dragged object is moving over the control.

Note: Within the OnDragOver event handler, the Accept parameter defaults to True. However, if an OnDragOver event handler is not supplied, the control rejects the dragged object, as if the Accept parameter were changed to False.
OnDragOver is an event handler of type TDragOverEvent.
</summary></devnotes></event>
      <event name="OnEndDock" visibility="protected" read="FOnEndDock" write="FOnEndDock" type="TEndDragEvent" file="Vcl.Controls.pas" line="1995"><devnotes><summary>
Occurs when the dragging of an object ends, either by docking the object or by canceling the dragging.
Use OnEndDock to specify actions or special processing that happen when a drag-and-dock operation stops.
</summary></devnotes></event>
      <event name="OnEndDrag" visibility="protected" read="FOnEndDrag" write="FOnEndDrag" type="TEndDragEvent" file="Vcl.Controls.pas" line="1996"><devnotes><summary>
Occurs when the dragging of an object ends, either by dropping the object or by canceling the dragging.
Use the OnEndDrag event handler to specify any special processing that occurs when dragging stops. 
OnEndDrag is an event handler of type Vcl.Controls.TEndDragEvent.
</summary></devnotes></event>
      <event name="OnMouseActivate" visibility="protected" read="FOnMouseActivate" write="FOnMouseActivate" type="TMouseActivateEvent" file="Vcl.Controls.pas" line="1997"><devnotes><summary>
Occurs when the user presses a mouse button with the mouse pointer over a control and the parent form is not active.
Use the OnMouseActivate event handler to implement any special processing that should occur as a result of pressing a mouse button on a control when the parent top-level form is not active.
The event type is:

TMouseActivateEvent = procedure (Sender: TObject; Button: TMouseButton; ShiftState: TShiftState;
X, Y: Integer; HitTest: Integer; var MouseActivate: TMouseActivate) of object;

When you click a control and the parent top-level form is not active, this event fires on the control that the mouse cursor is over. MouseActivate is a protected virtual function in TControl. MouseActivate can be overridden in custom control descendants to provide special built-in processing of the OnMouseActivate events. If you leave the default value of MouseActivate as maDefault, the parent control fires the OnMouseActivate event and repeats the process all the way up to the top-level form. If no control in the chain sets the value of MouseActivate, the behavior is the same as if a control set TMouseActivate to maActivate. At any point, a control can set the value of TMouseActivate and the parent processing stops. 
Some controls set focus to themselves when they get a button down message so, in some cases, setting maNoActivate appears to have no effect. For instance, a TButton control sets focus to itself in the WM_LBUTTONDOWN message regardless of whether or not TMouseActivate is set to maNoActivate. In this case, setting maNoActivateAndEat will work because the top-level form is not activated and the WM_LBUTTONDOWN message is suppressed. 
The HitTest parameter is the hit test value obtained from the WM_NCHITTEST message. See Windows.pas for valid values and their meanings. In most cases this value will be HTCLIENT, which means that the user clicked in the client area of a control. However, in the case of a top-level form, this can take other values such as HTCAPTION or HTBOTTOM. This allows the code to decide which value to set for MouseActivate, based on the HitTest code. For example, the following code in the OnMouseActivate event handler for a TForm forces the user to click into a non-client area to activate the form: 

if HitTest = HTCLIENT then
MouseActivate := maNoActivateAndEat;

Even though this event is tied to how Windows processes WM_MOUSEACTIVATE, the actual handling of the message is done at the TControl level, which is the point in the VCL hierarchy where the control has no window handle. The OnMouseActivate event is then simulated because all the TControl descendants also have OnMouseDown, OnMouseMove, and OnMouseUp events. This information is applicable to both VCL Win32 and VCL.NET. 
</summary></devnotes></event>
      <event name="OnMouseDown" visibility="protected" read="FOnMouseDown" write="FOnMouseDown" type="TMouseEvent" file="Vcl.Controls.pas" line="1998"><devnotes><summary>
Occurs when the user presses a mouse button with the mouse pointer over a control.
Use the OnMouseDown event handler to implement any special processing that should occur as a result of pressing a mouse button.
The OnMouseDown event handler can respond to left, right, or center mouse button presses and shift key plus mouse-button combinations. Shift keys are the SHIFT, CTRL, and ALT keys. X and Y are the pixel coordinates of the mouse pointer in the client area of the Sender.
OnMouseDown is an event handler of type Vcl.Controls.TMouseEvent.
</summary></devnotes></event>
      <event name="OnMouseEnter" visibility="protected" read="FOnMouseEnter" write="FOnMouseEnter" type="TNotifyEvent" file="Vcl.Controls.pas" line="1999"><devnotes><summary>
Occurs when the user moves the mouse into a control.
Use the OnMouseEnter event handler to implement any special processing that should occur as a result of moving the mouse into a control when the parent top-level form is not active.
OnMouseEnter is an event handler of type System.Classes.TNotifyEvent.
</summary></devnotes></event>
      <event name="OnMouseLeave" visibility="protected" read="FOnMouseLeave" write="FOnMouseLeave" type="TNotifyEvent" file="Vcl.Controls.pas" line="2000"><devnotes><summary>
Occurs when the user moves the mouse outside of a control.
Use the OnMouseLeave event handler to implement any special processing that should occur as a result of moving the mouse outside of a control when the parent top-level form is not active.
OnMouseLeave is an event handler of type System.Classes.TNotifyEvent.
</summary></devnotes></event>
      <event name="OnMouseMove" visibility="protected" read="FOnMouseMove" write="FOnMouseMove" type="TMouseMoveEvent" file="Vcl.Controls.pas" line="2001"><devnotes><summary>
Occurs when the user moves the mouse pointer while the mouse pointer is over a control.
Use the OnMouseMove event handler to respond when the mouse pointer moves after the control has captured the mouse.
Use the Shift parameter of the OnMouseMove event handler to determine the state of the shift keys and mouse buttons. Shift keys are the SHIFT, CTRL, and ALT keys or shift key-mouse button combinations. X and Y are pixel coordinates of the new location of the mouse pointer in the client area of the Sender.
OnMouseMove is an event handler of type Vcl.Controls.TMouseMoveEvent.
</summary></devnotes></event>
      <event name="OnMouseUp" visibility="protected" read="FOnMouseUp" write="FOnMouseUp" type="TMouseEvent" file="Vcl.Controls.pas" line="2002"><devnotes><summary>
Occurs when the user releases a mouse button that was pressed with the mouse pointer over a component.
Use an OnMouseUp event handler to implement special processing when the user releases a mouse button.
The OnMouseUp event handler can respond to left, right, or center mouse button presses and shift key plus mouse-button combinations. Shift keys are the SHIFT, CTRL, and ALT keys. X and Y are the pixel coordinates of the mouse pointer in the client area of the Sender.
OnMouseUp is an event handler of type Vcl.Controls.TMouseEvent.
</summary></devnotes></event>
      <event name="OnMouseWheel" visibility="protected" read="FOnMouseWheel" write="FOnMouseWheel" type="TMouseWheelEvent" file="Vcl.Controls.pas" line="2003"><devnotes><summary>
Occurs when the mouse wheel is rotated.
Write code in the OnMouseWheel event handler to respond to mouse wheel messages. If there is no OnMouseWheel event handler, or if the mouse wheel message is not handled in the OnMouseWheel event handler, then an OnMouseWheelUp or OnMouseWheelDown event occurs, depending on the direction the mouse wheel was rotated.
OnMouseWheel is an event handler of type Vcl.Controls.TMouseWheelEvent.
</summary></devnotes></event>
      <event name="OnMouseWheelDown" visibility="protected" read="FOnMouseWheelDown" write="FOnMouseWheelDown" type="TMouseWheelUpDownEvent" file="Vcl.Controls.pas" line="2004"><devnotes><summary>
Occurs when the mouse wheel is rotated downward.
Write code in the OnMouseWheelDown event handler to perform actions when the mouse wheel is rotated downward. OnMouseWheelDown occurs only if the message is not already handled in an OnMouseWheel event handler.
OnMouseWheelDown is an event handler of type Vcl.Controls.TMouseWheelUpDownEvent.
</summary></devnotes></event>
      <event name="OnMouseWheelUp" visibility="protected" read="FOnMouseWheelUp" write="FOnMouseWheelUp" type="TMouseWheelUpDownEvent" file="Vcl.Controls.pas" line="2006"><devnotes><summary>
Occurs when the mouse wheel is rotated upward.
Write code in the OnMouseWheelUp event handler to perform actions when the mouse wheel is rotated upward. OnMouseWheelUp occurs only if the message is not already handled in an OnMouseWheel event handler.
OnMouseWheelUp is an event handler of type Vcl.Controls.TMouseWheelUpDownEvent.
</summary></devnotes></event>
      <event name="OnResize" visibility="protected" read="FOnResize" write="FOnResize" type="TNotifyEvent" file="Vcl.Controls.pas" line="2008"><devnotes><summary>
Occurs immediately after the control is resized.
Use OnResize to make any final adjustments after a control is resized.
To modify the way a control responds when an attempt is made to resize it, use OnCanResize or OnConstrainedResize.

Note: Some controls call this event handler when the control is first created.
OnResize is an event handler of type System.Classes.TNotifyEvent.
</summary></devnotes></event>
      <event name="OnStartDock" visibility="protected" read="FOnStartDock" write="FOnStartDock" type="TStartDockEvent" file="Vcl.Controls.pas" line="2009"><devnotes><summary>
Occurs when the user begins to drag a control with a DragKind of dkDock.
Use the OnStartDock event handler to implement special processing when the user starts a drag-and-dock operation by dragging the control.
The OnStartDock event handler can create a TDragDockObjectEx object for the DragObject parameter to specify the appearance of the dragging rectangle and how the dragged control interacts with potential docking sites. If you return TDragDockObjectEx as the drag object, there is no need to call the Free method for the DragObject when dragging is over. If you use TDragDockObject, your application is responsible for freeing the drag object.
If the OnStartDock event handler sets the DragObject parameter to nil (Delphi) or NULL (C++), a TDragDockObject object is automatically created.

Note: This information applies to Win32 applications only.
OnStartDock is an event handler of type TStartDockEvent.
</summary></devnotes></event>
      <event name="OnStartDrag" visibility="protected" read="FOnStartDrag" write="FOnStartDrag" type="TStartDragEvent" file="Vcl.Controls.pas" line="2010"><devnotes><summary>
Occurs when the user begins to drag the control or an object it contains by left-clicking the control and holding the mouse button down.
Use the OnStartDrag event handler to implement special processing when the user starts to drag the control or an object it contains. OnStartDrag only occurs if DragKind is dkDrag.
Sender is the control that is about to be dragged, or that contains the object about to be dragged.
The OnStartDrag event handler can create a TDragControlObjectEx instance for the DragObject parameter to specify the drag cursor, or, optionally, a drag image list. If you create a TDragControlObjectEx instance, there is no need to call the Free method for the DragObject when dragging is over. If you create, instead, a TDragControlObject instance, your application is responsible for freeing the drag object instance.
If the OnStartDrag event handler sets the DragObject parameter to nil (Delphi) or NULL (C++), a TDragControlObject object is automatically created and dragging begins on the control itself.

Note: On some controls, such as TRichEdit, the underlying Windows control handles internal drag operations. For these controls, there are no OnStartDrag or OnEndDrag events for drag operations within the control.
OnStartDrag is an event handler of type TStartDragEvent.
</summary></devnotes></event>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2012">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TControl.
Calling Create constructs and initializes an instance of TControl. However, you should never attempt to instantiate a TControl. This class is intended solely as a base class from which other control classes descend and you should only call Create to instantiate one of these descendants.
Create calls the parent constructor and initializes the control. 
When overriding Create, always call the inherited Create method first, then proceed with the control's initialization. Remember to specify the override directive when overriding the Create method.

Note:  If a control's constructor allocates resources or memory, also override the destructor to free those resources. </summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="2013">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys an instance of TControl.
Do not call Destroy directly in an application. Instead, call Free. Free verifies that the control is not nil, and only then calls Destroy.
Applications should only free controls explicitly when the constructor was called without assigning an owner to the control.
As the control is destroyed, it:

Frees the TFont object in its Font property.
Calls its inherited destructor.
Override Destroy to free any memory or resources allocated in the Create method. When declaring a Destroy method in a descendent control type, always add the override directive to the declaration and call the inherited Destroy as the last statement in the redeclared method.
When a control is created, Delphi automatically provides exception handling around the constructor call. The destructor is called if an exception escapes from the constructor. This means that the destructor code must be prepared to clean up a partially constructed instance. Check all data fields for zero before disposing of their contents.
</summary></devnotes></destructor>
      <procedure name="CheckNonMainThreadUsage" visibility="public" file="Vcl.Controls.pas" line="2014">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <function name="IsCustomStyleActive" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2015">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="IsLightStyleColor" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2016">
        <parameters>
          <parameter name="AColor" type="TColor"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="ScaleForPPI" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2017">
        <parameters>
          <parameter name="NewPPI" type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="BeginDrag" visibility="public" file="Vcl.Controls.pas" line="2018">
        <parameters>
          <parameter name="Immediate" type="Boolean"/>
          <parameter name="Threshold" type="Integer">
            <value>
              $FFFFFFFF
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Starts the dragging of a control.
Call BeginDrag to start a drag operation. BeginDrag is called in application code only when the value of the control's DragMode is dmManual. If DragMode is dmAutomatic, BeginDrag is called automatically.
If the Immediate parameter is true, the mouse pointer changes to the value of the DragCursor property and dragging begins immediately. If Immediate is false, the mouse pointer does not change to the value of the DragCursor property and dragging does not begin until the user moves the mouse pointer the number of pixels specified by the Threshold parameter. If the caller passes a Threshold value less than 0 (such as the default value for this parameter), BeginDrag uses the DragThreshold property of the global Mouse variable.
Setting Immediate to false allows the control to accept mouse clicks without beginning a drag-and-drop or drag-and-dock operation.
</summary></devnotes></procedure>
      <procedure name="BringToFront" visibility="public" file="Vcl.Controls.pas" line="2019">
      <devnotes><summary>
Puts the control in front of all other controls in its parent control.
Call BringToFront to ensure that a form is visible or to reorder overlapping controls within a form.
Note that controls that wrap Windows screen objects (control classes descended from TWinControl) always &quot;stack&quot; above lightweight controls (control classes descended from TGraphicControl). BringToFront can force a lightweight control, such as a Shape, to stack above other lightweight controls, but wrapped controls, such as an Edit, will still stack above the Shape.
Without BringToFront, controls are stacked in the order they were placed on the form.
</summary></devnotes></procedure>
      <function name="ClientToScreen" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2020">
        <parameters>
          <parameter name="Point" type="TPoint" paramflags="const"/>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Translates a given point from client area coordinates to global screen coordinates.
Use ClientToScreen to convert a point whose coordinates are expressed locally to the control to the corresponding point in screen coordinates. In client area coordinates, (0, 0) corresponds to the upper-left corner of the control's client area. In screen coordinates, (0, 0) corresponds to the upper-left corner of the screen.
Use ScreenToClient along with ClientToScreen to convert from one control's coordinate system to another control's coordinate system. For example, 

P�:= TargetControl.ScreenToClient(SourceControl.ClientToScreen(P));

P = TargetControl-&gt;ScreenToClient(SourceControl-&gt;ClientToScreen(P));

converts P from coordinates in SourceControl to coordinates in TargetControl.
</summary></devnotes></function>
      <function name="ClientToScreen" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2021">
        <parameters>
          <parameter name="Rect" type="TRect" paramflags="const"/>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Translates a given point from client area coordinates to global screen coordinates.
Use ClientToScreen to convert a point whose coordinates are expressed locally to the control to the corresponding point in screen coordinates. In client area coordinates, (0, 0) corresponds to the upper-left corner of the control's client area. In screen coordinates, (0, 0) corresponds to the upper-left corner of the screen.
Use ScreenToClient along with ClientToScreen to convert from one control's coordinate system to another control's coordinate system. For example, 

P�:= TargetControl.ScreenToClient(SourceControl.ClientToScreen(P));

P = TargetControl-&gt;ScreenToClient(SourceControl-&gt;ClientToScreen(P));

converts P from coordinates in SourceControl to coordinates in TargetControl.
</summary></devnotes></function>
      <function name="ClientToParent" visibility="public" file="Vcl.Controls.pas" line="2022">
        <parameters>
          <parameter name="Point" type="TPoint" paramflags="const"/>
          <parameter name="AParent" type="TWinControl">
            <value>
              nil
            </value>
          </parameter>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Translates client coordinates to parent coordinates.
ClientToParent translates Point from the current control's coordinate system to AParent's coordinate system. AParent must be a control that can be found by iterating up the chain of Parent properties. If AParent is nil (Delphi) or NULL (C++), the control's immediate parent is used.
An EInvalidOperation exception is thrown if AParent is not an ancestor control or the Parent property is nil (Delphi) or NULL (C++).
</summary></devnotes></function>
      <procedure name="Dock" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2023">
        <parameters>
          <parameter name="NewDockSite" type="TWinControl"/>
          <parameter name="ARect" type="TRect"/>
        </parameters>
      <devnotes><summary>
Used internally to dock the control.
Do not call Dock in applications. It is called automatically to implement many of the details of docking the control to a dock site.
To dock the control programmatically, use ManualDock instead.
The NewDockSite parameter specifies the docking site to which the control is being docked. The ARect parameter indicates the new dimensions of the control when it is docked to NewDockSite.
</summary></devnotes></procedure>
      <function name="Dragging" visibility="public" file="Vcl.Controls.pas" line="2024">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether a control is being dragged.
Use Dragging to determine the drag state of the control. If Dragging returns true, the control is being dragged. If Dragging is false, the control is not being dragged.
</summary></devnotes></function>
      <procedure name="DragDrop" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2025">
        <parameters>
          <parameter name="Source" type="TObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Is an OnDragDrop event dispatcher.
When creating a component that descends from TControl, override DragDrop to add additional code that executes before the OnDragDrop event handler is called.
The Source parameter is the object that was dropped onto the control. The X and Y parameters are the mouse coordinates where the object was dropped.
</summary></devnotes></procedure>
      <function name="DrawTextBiDiModeFlags" visibility="public" file="Vcl.Controls.pas" line="2026">
        <parameters>
          <parameter name="Flags" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Returns the text flags that reflect the current setting of the BiDiMode property.
Call DrawTextBiDiModeFlags to obtain a value for the TextFlags property of a canvas when drawing the control's text or caption. The return value can also be used with the Windows API DrawText function.
Flags are the current text flags, unaltered by any bidirectional mode considerations.
DrawTextBiDiModeFlags adds or removes the DT_RIGHT or DT_RTLREADING flags based on the values returned from the UseRightToLeftAlignment and UseRightToLeftReading methods.
</summary></devnotes></function>
      <function name="DrawTextBiDiModeFlagsReadingOnly" visibility="public" file="Vcl.Controls.pas" line="2027">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Returns the text flag to add that indicates whether the control's text should read from right to left.
Call DrawTextBiDiModeFlagsReadingOnly to determine whether the DT_RTLREADING flag should be added when calling the Windows API DrawText or when assigning the TextFlags property of a canvas.
DrawTextBiDiModeFlagsReadingOnly returns the DT_RTLREADING flag or 0, depending on the value returned from the UseRightToLeftReading method.
To obtain the text flags that indicate the bidirectional alignment as well as text direction for the control, use DrawTextBiDiModeFlags instead.
</summary></devnotes></function>
      <property name="Enabled" visibility="public" read="GetEnabled" write="SetEnabled" stored="IsEnabledStored" type="Boolean" default="1" file="Vcl.Controls.pas" line="2028"><devnotes><summary>
Controls whether the control responds to mouse, keyboard, and timer events.
Use Enabled to change the availability of the control to the user. To disable a control, set Enabled to False. Some disabled controls appear dimmed (for example: buttons, check boxes, labels), while others (container controls) simply lose their functionality without changing their appearance. If Enabled is set to False, the control ignores mouse, keyboard, and timer events.
To re-enable a control, set Enabled to True.

Note: This property applies to all TControl descendants. </summary></devnotes></property>
      <procedure name="EndDrag" visibility="public" file="Vcl.Controls.pas" line="2029">
        <parameters>
          <parameter name="Drop" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Stops a control from being dragged any further.
Use EndDrag to stop a dragging operation that began with a call to the BeginDrag method.
If the Drop parameter is true, the control being dragged is dropped or docked. If the Drop parameter is false, the control is not dropped or docked and dragging is canceled.
</summary></devnotes></procedure>
      <function name="GetControlsAlignment" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2030">
        <parameters>
          <retval type="TAlignment"/>
        </parameters>
      <devnotes><summary>
Indicates how text is aligned within the control.
Use GetControlsAlignment to determine the alignment of the control. For controls that do not have an Alignment property, GetControlsAlignment returns taLeftJustify.

Note: GetControlsAlignment returns the alignment of text before it is altered by the BiDiMode property. To check whether the alignment should be reversed to reflect the BiDiMode property, call UseRightToLeftAlignment.</summary></devnotes></function>
      <function name="GetParentComponent" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2031">
        <parameters>
          <retval type="TComponent"/>
        </parameters>
      <devnotes><summary>
Returns the parent of the control.
GetParentComponent is called by the streaming system that loads and saves VCL components. The component returned by GetParentComponent is responsible for loading and saving the control when it is streamed in or out. As implemented in TControl, GetParentComponent returns the value of the Parent property.
</summary></devnotes></function>
      <function name="HasParent" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2032">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether the control has a parent.
HasParent indicates whether the Parent property has been assigned a value. This method is used by the streaming system to determine whether the control has a parent that is responsible for writing it to a stream. As implemented in TControl, HasParent returns true if the Parent property is not nil (Delphi) or NULL (C++), and false otherwise.
</summary></devnotes></function>
      <procedure name="Hide" visibility="public" file="Vcl.Controls.pas" line="2033">
      <devnotes><summary>
Makes the control invisible.
Call Hide to hide a control. Hide sets the Visible property of the control to false.
Although a control that is hidden is not visible, its properties and methods are still available.
</summary></devnotes></procedure>
      <procedure name="InitiateAction" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2034">
      <devnotes><summary>
Calls the action link's Update method if the control is associated with an action link.
When the application is idle, the library makes a series of calls to allow controls to update their associated actions so that they reflect the current properties of the controls. The first of these is to the InitiateAction method of the each form, followed by the InitiateAction methods of its visible menus and controls.
InitiateAction calls the action's update method indirectly (through its action link), which leads to a number of events, any of which may update the action and stop the update process:

First, the action list that contains the action receives an OnUpdate event.
If the action list does not handle the OnUpdate event, then the Application object receives an OnActionUpdate event.
If the OnActionUpdate event handler does not update the action, the action itself receives an OnUpdate event.
If that does not update the action, the active control's UpdateAction method is called.
Finally, if the action is still not updated, the active form's UpdateAction method is called.</summary></devnotes></procedure>
      <procedure name="Invalidate" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2035">
      <devnotes><summary>
Completely repaints the control.
Use Invalidate when the entire control needs to be repainted. When more than one region within the control needs repainting, Invalidate will cause the entire window to be repainted in a single pass, avoiding flicker caused by redundant repaints. There is no performance penalty for calling Invalidate multiple times before the control is actually repainted.
</summary></devnotes></procedure>
      <procedure name="MouseWheelHandler" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2036">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Dispatches messages received from a mouse wheel.
The WndProc method calls MouseWheelHandler when it receives a mouse wheel message. MouseWheelHandler checks whether the windowed control is embedded in a form, and if so, calls the form's MouseWheelHandler method. This allows the form to respond to mouse wheel messages before they are handled by individual controls. If the windowed control is not in a form, MouseWheelHandler passes the mouse wheel message to the Perform method, which generates an OnMouseWheel event, followed (if necessary) by an OnMouseWheelUp or OnMouseWheelDown event.
</summary></devnotes></procedure>
      <function name="IsRightToLeft" visibility="public" file="Vcl.Controls.pas" line="2037">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether the control should be reversed right to left.
Use IsRightToLeft to determine whether the control should be reversed in any way because it is running on a system with a Middle Eastern locale. IsRightToLeft is intended for component writers to ease the process of implementing the BiDiMode property.
IsRightToLeft returns true if the application is running on a Middle East-enabled version of Windows and the BiDiMode property indicates that the control should make any adjustments.
</summary></devnotes></function>
      <function name="ManualDock" visibility="public" file="Vcl.Controls.pas" line="2038">
        <parameters>
          <parameter name="NewDockSite" type="TWinControl"/>
          <parameter name="DropControl" type="TControl">
            <value>
              nil
            </value>
          </parameter>
          <parameter name="ControlSide" type="TAlign">
            <value>
              alNone
            </value>
          </parameter>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Docks the control.
Use ManualDock to dock the control programmatically. ManualDock undocks the control from its current dock site, then docks the control to its new dock site.
NewDockSite is the control's new dock site.
DropControl is the control in the new dock site, if any, on which to drop the control. For example, when docking to a page control, DropControl would be a tab sheet.
ControlSide specifies on which side of DropControl or NewDockSite (if DropControl is nil (Delphi) or NULL (C++)) the control should be docked. This value can be obtained by calling the dock site's GetDockEdge method.
</summary></devnotes></function>
      <function name="ManualFloat" visibility="public" file="Vcl.Controls.pas" line="2040">
        <parameters>
          <parameter name="ScreenPos" type="TRect"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Undocks the control.
Use ManualFloat to undock the control programmatically.
ScreenPos is the rectangle in which the control is displayed when it starts floating.
</summary></devnotes></function>
      <function name="Perform" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2041">
        <parameters>
          <parameter name="Msg" type="Cardinal"/>
          <parameter name="WParam" type="NativeUInt"/>
          <parameter name="LParam" type="NativeInt"/>
          <retval type="NativeInt"/>
        </parameters>
      <devnotes><summary>
Responds as if the control received a specified Windows message.
Call Perform to bypass the Windows message queue and send a message directly to the control's window procedure.
Perform fills a message record (of type TMessage) with the message ID passed in the Msg parameter, the message parameters passed in WParam and LParam, and a result field of zero. Perform then passes the message record to the WindowProc method for processing.
</summary></devnotes></function>
      <procedure name="Refresh" visibility="public" file="Vcl.Controls.pas" line="2042">
      <devnotes><summary>
Repaints the control on the screen.
Call the Refresh method to repaint the control immediately. Refresh calls the Repaint method. Use the Refresh and Repaint methods interchangeably.
</summary></devnotes></procedure>
      <procedure name="Repaint" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2043">
      <devnotes><summary>
Forces the control to repaint its image on the screen.
Call Repaint to force the control to repaint its image immediately. If the ControlStyle property includes csOpaque, the control paints itself directly. Otherwise, the Repaint method calls the Invalidate method and then the Update method so that any visible portions of controls beneath the control will be repainted as well.
</summary></devnotes></procedure>
      <function name="ReplaceDockedControl" visibility="public" file="Vcl.Controls.pas" line="2044">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="NewDockSite" type="TWinControl"/>
          <parameter name="DropControl" type="TControl"/>
          <parameter name="ControlSide" type="TAlign"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Docks the control in the place where another control is already docked.
Call ReplaceDockedControl to replace a control that is already docked while moving that control to another dock site.
Control is the control whose place this control is taking.
NewDockSite is the new dock site for the control that is replaced.
DropControl is a control in the new dock site on which to drop the control that is replaced. For example, if NewDockSite were a page control, DropControl would be a tab sheet.
ControlSide specifies on which side of DropControl or NewDockSite (if DropControl is nil (Delphi) or NULL (C++)) the replaced control should be docked. This value can be obtained by calling the dock site's GetDockEdge method.
ReplaceDockedControl does the same thing as calling the ManualDock method of the control specified by the Control parameter (using the values of NewDockSite, DropControl, and ControlSide) in addition to calling ManualDock for the control whose method this is, docking it in the current position of the Control parameter. However, calling ReplaceDockedControl is more efficient, and prevents unnecessary flicker.
</summary></devnotes></function>
      <function name="ScreenToClient" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2046">
        <parameters>
          <parameter name="Point" type="TPoint" paramflags="const"/>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Converts the screen coordinates of a specified point on the screen to client coordinates.
Use ScreenToClient to convert a point in screen coordinates to local, or client area, coordinates. In client area coordinates (0, 0) corresponds to the upper-left corner of the control's client area. In screen coordinates (0, 0) corresponds to the upper-left corner of the screen.
Use ScreenToClient along with ClientToScreen to convert from one control's coordinate system to another control's coordinate system. For example, 



P := TargetControl.ScreenToClient(SourceControl.ClientToScreen(P));




P = TargetControl-&gt;ScreenToClient(SourceControl-&gt;ClientToScreen(P));



converts P from coordinates in SourceControl to coordinates in TargetControl.
</summary></devnotes></function>
      <function name="ScreenToClient" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2047">
        <parameters>
          <parameter name="Rect" type="TRect" paramflags="const"/>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Converts the screen coordinates of a specified point on the screen to client coordinates.
Use ScreenToClient to convert a point in screen coordinates to local, or client area, coordinates. In client area coordinates (0, 0) corresponds to the upper-left corner of the control's client area. In screen coordinates (0, 0) corresponds to the upper-left corner of the screen.
Use ScreenToClient along with ClientToScreen to convert from one control's coordinate system to another control's coordinate system. For example, 



P := TargetControl.ScreenToClient(SourceControl.ClientToScreen(P));




P = TargetControl-&gt;ScreenToClient(SourceControl-&gt;ClientToScreen(P));



converts P from coordinates in SourceControl to coordinates in TargetControl.
</summary></devnotes></function>
      <function name="ParentToClient" visibility="public" file="Vcl.Controls.pas" line="2048">
        <parameters>
          <parameter name="Point" type="TPoint" paramflags="const"/>
          <parameter name="AParent" type="TWinControl">
            <value>
              nil
            </value>
          </parameter>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Translate parent coordinates to client coordinates.
ParentToClient translates Point from the AParent's coordinate system to the current control's coordinate system. AParent must be a control that can be found by iterating up the chain of Parent properties. If AParent is nil (Delphi) or NULL (C++), the control's immediate parent is used.
An EInvalidOperation exception is thrown if AParent is not an ancestor control or the Parent property is nil (Delphi) or NULL (C++).
</summary></devnotes></function>
      <procedure name="SendToBack" visibility="public" file="Vcl.Controls.pas" line="2049">
      <devnotes><summary>
Puts a windowed control behind all other windowed controls, or puts a non-windowed control behind all other non-windowed controls.
Use SendToBack to change the order of overlapping controls or forms.
The order in which controls stack on top of each other (also called the Z order) depends on the order the controls are placed on the form. For example, if you put a label and an image on a form so that one is on top of the other, the one that was placed first on the form becomes the one on the bottom. Because both the label and the image are non-windowed controls, they &quot;stack&quot; as you would expect them to. Call the SendToBack method for the top object to move it below the other object.
The stacking order of two windowed controls is the same as the stacking of two non-windowed controls. For example, if you put a memo on a form, then put a check box on top of it, the check box remains on top. Calling SendToBack for the check box makes the memo appear on top.
The stacking order of windowed and non-windowed controls cannot be mingled. For example, if you put a memo, a windowed control on a form, and then put a label, a non-windowed control on top of it, the label disappears behind the memo. Windowed controls always stack on top of non-windowed controls. In this example, calling the SendToBack method of the memo does nothing, the label remains behind the memo.
If the control has the input focus when the SendToBack method executes, it loses the input focus. 
</summary></devnotes></procedure>
      <procedure name="SetBounds" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2050">
        <parameters>
          <parameter name="ALeft" type="Integer"/>
          <parameter name="ATop" type="Integer"/>
          <parameter name="AWidth" type="Integer"/>
          <parameter name="AHeight" type="Integer"/>
        </parameters>
      <devnotes><summary>
Sets the Left, Top, Width, and Height properties all at once.
Use SetBounds to change all of the component's boundary properties at one time. The same effect can be achieved by setting the Left, Top, Width, and Height properties separately, but SetBounds changes all four properties at once ensuring that the control will not repaint between changes.
Specify the values for the Left, Top, Width, and Height properties as the value of the ALeft, ATop, AWidth, and AHeight parameters, respectively.
Calling SetBounds does not necessarily result in the Left, Top, Width, and Height properties changing to the specified values. Before the properties are changed, the AutoSize or Constraints property may limit the changes, and an OnCanResize (or OnConstrainedResize) event handler may change the new values. After the control's Left, Top, Width, and Height properties are changed, SetBounds generates an OnResize event.

Note:  Component writers can change the Left, Top, Width, and Height properties while bypassing all resize events and constraint or autosize logic by using the UpdateBoundsRect method instead.</summary></devnotes></procedure>
      <procedure name="SetDesignVisible" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2051">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Makes a control visible at design time.
SetDesignVisible is used internally by Delphi during form design.
</summary></devnotes></procedure>
      <procedure name="SetParentComponent" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2052">
        <parameters>
          <parameter name="Value" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Sets the parent for the control.
Do not call the SetParentComponent method. It is used by the streaming system that loads and saves VCL components. SetParentComponent makes the component specified by the Value parameter the parent of the control.
SetParentComponent calls the SetParent method only if the component specified as the parent is a windowed control.
</summary></devnotes></procedure>
      <procedure name="Show" visibility="public" file="Vcl.Controls.pas" line="2053">
      <devnotes><summary>
Makes a control visible.
Use the Show method to make visible a control that was previously hidden. 
The Show method sets the control's Visible property to true and ensures that the parent control is also visible.
</summary></devnotes></procedure>
      <procedure name="Update" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2054">
      <devnotes><summary>
Processes any pending paint messages immediately.
Call Update to force the control to be repainted before any more, possibly time-consuming, processing takes place. Use Update to provide immediate feedback to the user that cannot wait for the Windows paint message to arrive.
Update does not invalidate the control, but simply forces a repaint of any regions that have already been invalidated. Call Repaint instead to invalidate the control as well.
</summary></devnotes></procedure>
      <function name="UseRightToLeftAlignment" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2055">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether the control's alignment should be reversed right-to-left.
Controls call UseRightToLeftAlignment when implementing the BiDiMode property. UseRightToLeftAlignment indicates whether the control's alignment should be reversed right-to-left. This information can be used when painting the control or when responding to mouse events.
UseRightToLeftAlignment returns True if the application is running on a system with a Middle Eastern locale and the BiDiMode property is bdRightToLeft. Otherwise, it returns False. Descendants override UseRightToLeftAlignment if alignment in Middle Eastern locales depends on other factors.
</summary></devnotes></function>
      <function name="UseRightToLeftReading" visibility="public" file="Vcl.Controls.pas" line="2056">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether the control is using a right-to-left reading order.
Controls call UseRightToLeftReading when implementing the BiDiMode property. UseRightToLeftReading indicates whether the control's text should read from right to left. This information can be used to determine which style flags to set for the control when it is created and which flags to set for drawing text.
UseRightToLeftReading returns true if the application is running on a system with a Middle Eastern locale and the BiDiMode property is not bdLeftToRight. UseRightToLeftReading returns false otherwise.
</summary></devnotes></function>
      <function name="UseRightToLeftScrollBar" visibility="public" file="Vcl.Controls.pas" line="2057">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Specifies whether the vertical scroll bar appears on the left side of the control.
Controls call UseRightToLeftScrollBar when implementing the BiDiMode property. UseRightToLeftScrollBar returns true when the vertical scroll bar appears on the left side of the control, and false when it appears on the right side.
UseRightToLeftScrollBar returns true if the application is running on a system with a Middle Eastern locale and the BiDiMode property is bdRightToLeft or bdRightToLeftNoAlign.
</summary></devnotes></function>
      <procedure name="DefaultHandler" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2069">
        <parameters>
          <parameter name="Message" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Provides message handling for all messages that do not have specific handlers.
Override DefaultHandler to extend the default handling of messages. DefaultHandler is the final opportunity for component writers to handle messages to controls. The method referenced by WindowProc provides the first opportunity. Individual message methods such as Click provide additional opportunities.
DefaultHandler handles the messages Windows sends to manage the control's text: WM_GETTEXT, WM_SETTEXT, and WM_GETTEXTLENGTH.
</summary></devnotes></procedure>
      <function name="GetTextBuf" visibility="public" file="Vcl.Controls.pas" line="2070">
        <parameters>
          <parameter name="Buffer" type="PWideChar"/>
          <parameter name="BufSize" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Retrieves the control's text, copies it into a buffer, and returns the number of characters copied.
Call GetTextBuf to retrieve the text of a control into a fixed size buffer. The text copied is the value of the Text property. GetTextBuf returns the number of characters that were actually copied, which is either the length of the Text property, or BufSize - 1, whichever is smaller.
To find out how many characters the buffer needs to hold the entire text, call the GetTextLen method before allocating a buffer for GetTextBuf.

Note: GetTextBuf is available for compatibility with 16-bit code. Where backward compatibility is not an issue, use the Text property.
Note:  To obtain the control's text as an AnsiString, use the Text property instead.</summary></devnotes></function>
      <function name="GetTextLen" visibility="public" file="Vcl.Controls.pas" line="2071">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Returns the length of the control's text.
Call GetTextLen to find the length of the control's text. This is the size needed for a text buffer to be used by the GetTextBuf method.
</summary></devnotes></function>
      <function name="Perform" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2072">
        <parameters>
          <parameter name="Msg" type="Cardinal"/>
          <parameter name="WParam" type="NativeUInt"/>
          <parameter name="LParam" type="PWideChar"/>
          <retval type="NativeInt"/>
        </parameters>
      <devnotes><summary>
Responds as if the control received a specified Windows message.
Call Perform to bypass the Windows message queue and send a message directly to the control's window procedure.
Perform fills a message record (of type TMessage) with the message ID passed in the Msg parameter, the message parameters passed in WParam and LParam, and a result field of zero. Perform then passes the message record to the WindowProc method for processing.
</summary></devnotes></function>
      <function name="Perform" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2073">
        <parameters>
          <parameter name="Msg" type="Cardinal"/>
          <parameter name="WParam" type="NativeUInt"/>
          <parameter name="LParam" type="TRect" paramflags="var"/>
          <retval type="NativeInt"/>
        </parameters>
      <devnotes><summary>
Responds as if the control received a specified Windows message.
Call Perform to bypass the Windows message queue and send a message directly to the control's window procedure.
Perform fills a message record (of type TMessage) with the message ID passed in the Msg parameter, the message parameters passed in WParam and LParam, and a result field of zero. Perform then passes the message record to the WindowProc method for processing.
</summary></devnotes></function>
      <procedure name="SetTextBuf" visibility="public" file="Vcl.Controls.pas" line="2074">
        <parameters>
          <parameter name="Buffer" type="PWideChar"/>
        </parameters>
      <devnotes><summary>
Sets the text of the control.
Call the SetTextBuf method to set the text of the control to the text in the specified buffer.
The text is set to the text in the buffer pointed to by the Buffer parameter. Buffer must point to a null-terminated string. The SetTextBuf method sends the WM_SETTEXT and CM_TEXTCHANGED messages. Doing this in the tight execution of a function can result in the change not being seen until messages from the Windows message queue are processed after the function finishes executing. To interrupt a function's execution and process messages, use the ProcessMessages method of the Application object.

Note:  The SetTextBuf method is provided for backwards compatibility only. To set the text of a control now, assign a string value to the Text property.</summary></devnotes></procedure>
      <function name="GetSystemMetrics" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2076">
        <parameters>
          <parameter name="nIndex" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetStyleName" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2077">
        <parameters>
          <retval type="string"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="ScaleValue" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2079">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
The overloaded ScaleValue methods return a measure passed as parameter scaled by the current scale factor for the control (the value of the ScaleFactor read-only property).


</summary></devnotes></function>
      <function name="ScaleValue" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2080">
        <parameters>
          <parameter name="Value" type="Double" paramflags="const"/>
          <retval type="Double"/>
        </parameters>
      <devnotes><summary>
The overloaded ScaleValue methods return a measure passed as parameter scaled by the current scale factor for the control (the value of the ScaleFactor read-only property).


</summary></devnotes></function>
      <function name="ScaleValue" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2081">
        <parameters>
          <parameter name="Value" type="TPoint" paramflags="const"/>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
The overloaded ScaleValue methods return a measure passed as parameter scaled by the current scale factor for the control (the value of the ScaleFactor read-only property).


</summary></devnotes></function>
      <function name="ScaleValue" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2082">
        <parameters>
          <parameter name="Value" type="TRect" paramflags="const"/>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
The overloaded ScaleValue methods return a measure passed as parameter scaled by the current scale factor for the control (the value of the ScaleFactor read-only property).


</summary></devnotes></function>
      <function name="ScaleValue" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2083">
        <parameters>
          <parameter name="Value" type="TSize" paramflags="const"/>
          <retval type="TSize"/>
        </parameters>
      <devnotes><summary>
The overloaded ScaleValue methods return a measure passed as parameter scaled by the current scale factor for the control (the value of the ScaleFactor read-only property).


</summary></devnotes></function>
      <function name="ScaleRectSize" visibility="public" file="Vcl.Controls.pas" line="2084">
        <parameters>
          <parameter name="Value" type="TRect" paramflags="const"/>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="Action" visibility="public" read="GetAction" write="SetAction" type="TBasicAction" file="Vcl.Controls.pas" line="2086"><devnotes><summary>
Specifies the action associated with the control.
Action is the action object that is associated with the control. Actions allow an application to centralize the response to user commands. When a control is associated with an action, the action determines the appropriate properties and events of the control (such as whether the control is enabled or how it responds to an OnClick event).
To create actions at design time, place an action list component on a form or data module. Double-click the action list to bring up the action list editor. Add actions in the editor using its context menu. Once the actions have been added using the Action List editor, they appear in the drop-down list for the Action property in the Object Inspector. 
</summary></devnotes></property>
      <property name="Align" visibility="public" read="FAlign" write="SetAlign" type="TAlign" default="0" file="Vcl.Controls.pas" line="2087"><devnotes><summary>
Determines how the control aligns within its container (parent control).
Use Align to align a control to the top, bottom, left, or right of a form or panel and have it remain there even if the size of the form, panel, or component that contains the control changes. When the parent is resized, an aligned control also resizes so that it continues to span the top, bottom, left, or right edge of the parent.
For example, to use a panel component with various controls on it as a tool palette, change the panel's Align value to alLeft. The value of alLeft for the Align property of the panel guarantees that the tool palette remains on the left side of the form and always equals the client height of the form.
The default value of Align is alNone, which means a control remains where it is positioned on a form or panel.

Tip: If Align is set to alClient, the control fills the entire client area so that it is impossible to select the parent form by clicking it. In this case, select the parent by selecting the control on the form and pressing ESC, or by using the Object Inspector.
Any number of child components within a single parent can have the same Align value, in which case they stack up along the edge of the parent. The child controls stack up in z-order. To adjust the order in which the controls stack up, drag the controls into their desired positions.

Note: To cause a control to maintain a specified relationship with an edge of its parent, but not necessarily lie along one edge of the parent, use the Anchors property instead.</summary></devnotes></property>
      <property name="Anchors" visibility="public" read="FAnchors" write="SetAnchors" stored="IsAnchorsStored" type="TAnchors" default="3" file="Vcl.Controls.pas" line="2088"><devnotes><summary>
Specifies how the control is anchored to its parent.
Use Anchors to ensure that a control maintains its current position relative to an edge of its parent, even if the parent is resized. When its parent is resized, the control holds its position relative to the edges to which it is anchored.
If a control is anchored to opposite edges of its parent, the control stretches when its parent is resized. For example, if a control has its Anchors property set to [akLeft, akRight], the control stretches when the width of its parent changes.
Anchors is enforced only when the parent is resized. Thus, for example, if a control is anchored to opposite edges of a form at design time and the form is created in a maximized state, the control is not stretched because the form is not resized after the control is created.

Note: If a control should maintain contact with three edges of its parent (hugging one side of the parent and stretching the length of that side), use the Align property instead. Unlike Anchors, Align allows controls to adjust to changes in the size of other aligned sibling controls as well as changes to the parent's size.</summary></devnotes></property>
      <property name="BiDiMode" visibility="public" read="FBiDiMode" write="SetBiDiMode" stored="IsBiDiModeStored" type="TBiDiMode" file="Vcl.Controls.pas" line="2089"><devnotes><summary>
Specifies the bidirectional mode for the control.
Use BiDiMode to enable the control to adjust its appearance and behavior automatically when the application runs in a locale that reads from right to left instead of left to right. The bidirectional mode controls the reading order for the text, the placement of the vertical scroll bar, and whether the alignment is changed.
Alignment does not change for controls that are known to contain number, date, time, or currency values. For example, with data-aware controls, the alignment does not change for the following field types: ftSmallint, ftInteger, ftWord, ftFloat, ftCurrency, ftBCD, ftDate, ftTime, ftDateTime, ftAutoInc.
</summary></devnotes></property>
      <property name="BoundsRect" visibility="public" read="GetBoundsRect" write="SetBoundsRect" type="TRect" file="Vcl.Controls.pas" line="2090"><devnotes><summary>
Specifies the bounding rectangle of the control, expressed in the coordinate system of the parent control.
Use BoundsRect as a quick way to obtain the pixel locations of all corners of the control all at once.
For example, the statement



R := Control.BoundsRect;




R = Control-&gt;BoundsRect;



corresponds to



R.Left := Control.Left;
R.Top := Control.Top;
R.Right := Control.Left + Control.Width;
R.Bottom := Control.Top + Control.Height;




R.Left = Control-&gt;Left;
R.Top = Control-&gt;Top;
R.Right = Control-&gt;Left + Control-&gt;Width;
R.Bottom = Control-&gt;Top + Control-&gt;Height;



The origin of the pixel coordinate system is in the upper-left corner of the parent window.

Note:  A point is considered within the control's bounds rectangle if it lies on the left or top side but not if it lies on the right or bottom side. That is, to be inside the bounds rectangle, the x-coordinate must be greater than or equal to BoundsRect.Left and less than BoundsRect.Right, and the y-coordinate must be greater than or equal to BoundsRect.Top and less than BoundsRect.Bottom.</summary></devnotes></property>
      <property name="ClientHeight" visibility="public" read="GetClientHeight" write="SetClientHeight" stored="False" type="Integer" file="Vcl.Controls.pas" line="2091"><devnotes><summary>
Specifies the height of the control's client area in pixels.
Use ClientHeight to read or change the height of the control's client area.
For TControl, ClientHeight is the same as Height. Derived classes may implement a ClientHeight property that differs from Height. For example, the ClientHeight of a form is the value of the Height property minus the height of the title bar, resize border, and scroll bars.
</summary></devnotes></property>
      <property name="ClientOrigin" visibility="public" read="GetClientOrigin" type="TPoint" file="Vcl.Controls.pas" line="2092"><devnotes><summary>
Specifies the screen coordinates (in pixels) of the upper-left corner of a control's client area.
Read ClientOrigin to locate the upper-left corner of the control's client area. ClientOrigin returns X and Y coordinates as a TPoint type, where X specifies the horizontal coordinate of the point and Y specifies the vertical coordinate. 
The screen coordinates of a control that is descended from TControl and not TWinControl are the screen coordinates of the control's parent added to its Left and Top properties. If the control doesn't have a parent, an EInvalidOperation exception is raised when ClientOrigin is read. 
</summary></devnotes></property>
      <property name="ClientRect" visibility="public" read="GetClientRect" type="TRect" file="Vcl.Controls.pas" line="2093"><devnotes><summary>
Specifies the size of a control's client area in pixels.
Read ClientRect to find out the size of the client area of a control. ClientRect returns a rectangle with its Top and Left fields set to zero, and its Bottom and Right fields set to the control's Height and Width, respectively. ClientRect is equivalent to Rect(0, 0, ClientWidth, ClientHeight). 
A point is considered within the control's client rectangle if it lies on the left or top side but not if it lies on the right or bottom side. That is, to be inside the client rectangle, the X-coordinate must be greater than or equal to ClientRect.Left and less than ClientRect.Right, and the Y-coordinate must be greater than or equal to ClientRect.Top and less than ClientRect.Bottom. 

Note: ClientRect is the size of the physical client area of the control, not its logical client area. If the control supports scrolling, the ClientRect is not the entire scrolling range, but only the region that is available at any given time. </summary></devnotes></property>
      <property name="ClientWidth" visibility="public" read="GetClientWidth" write="SetClientWidth" stored="False" type="Integer" file="Vcl.Controls.pas" line="2094"><devnotes><summary>
Specifies the horizontal size of the control's client area in pixels.
Use ClientWidth to read or change the width of the control's client area. ClientWidth is equivalent to ClientRect.Right.
For TControl, ClientWidth is the same as Width. Derived classes may implement a ClientWidth property that differs from Width. For example, the ClientWidth of a form is the value of the Width property minus the width of the resize border and scroll bars.
</summary></devnotes></property>
      <property name="Constraints" visibility="public" read="FConstraints" write="SetConstraints" type="TSizeConstraints" file="Vcl.Controls.pas" line="2095"><devnotes><summary>
Specifies the size constraints for the control.
Use Constraints to specify the minimum and maximum width and height of the control. When Constraints contains maximum or minimum values, the control cannot be resized to violate those constraints. 

Note: Constraints apply to the height of the form. However, the height of the form depends on how large Windows makes the title bar. For example, Windows XP uses much larger title bars than other windowing systems. To work around this, note the ClientHeight when you design your form and set the constraints in the FormCreate event. In the following example, ClientHeight is represented by x: Constraints.MinHeight�:= x + Height - ClientHeight.
Warning: Do not set up constraints that conflict with the value of the Align or Anchors property. When these properties conflict, the response of the control to resize attempts is not well-defined.</summary></devnotes></property>
      <property name="ControlState" visibility="public" read="FControlState" write="FControlState" type="TControlState" file="Vcl.Controls.pas" line="2096"><devnotes><summary>
Specifies the current state of a control at run time.
Read ControlState to find out various conditions that affect the control such as whether it has been clicked or needs alignment. ControlState reflects transient conditions of an instance of the control, as opposed to attributes of the control class as a whole. ControlState consists of a set of flags drawn from the following values: 





Flag

Meaning



csLButtonDown



The left mouse button was clicked and not yet released. This is set for all mouse-down events.




csClicked



The same as csLButtonDown, but only set if ControlStyle contains csClickEvents, meaning that mouse-down events are interpreted as clicks.




csPalette



The system palette has changed and the control or one of its descendants has not finished adjusting by realizing its palette.




csReadingState



The control is reading its state from a stream.




csAlignmentNeeded



The control needs to realign itself when alignment is re-enabled.




csFocusing



The application is processing messages intended to give the control focus. This does not guarantee the control will receive focus, but prevents recursive calls.




csCreating



The control and/or its owner and subcontrols are being created. This flag clears when all have finished creating.




csPaintCopy



The control is being replicated, meaning a copy of the control is being painted. The ControlStyle flag csReplicatable must be set for this state to occur.




csCustomPaint



The control is processing custom paint messages.




csDestroyingHandle



The control's window is being destroyed.




csDocking



The control is being docked.




The flags in ControlState are specific to controls, and augment the state flags in the ComponentState property.
ControlState is primarily used by component writers in the implementation of components derived from TControl.
</summary></devnotes></property>
      <property name="ControlStyle" visibility="public" read="FControlStyle" write="FControlStyle" type="TControlStyle" file="Vcl.Controls.pas" line="2097"><devnotes><summary>
Determines style characteristics of the control.
Use ControlStyle to determine various attributes of the control, such as whether the control can capture the mouse or has a fixed size. The ControlStyle property contains a set of style flags indicating these attributes. The following table lists the flags and their meanings:





Flag

Meaning



csAcceptsControls



The control becomes the parent of any controls dropped on it at design time.




csCaptureMouse



The control captures mouse events when it is clicked.




csDesignInteractive



The control maps right mouse button clicks at design time into left mouse button clicks to manipulate the control.




csClickEvents



The control can receive and respond to mouse clicks. Some controls may not inherit this attribute, for example, TButton.




csFramed



The control has a 3D frame.




csSetCaption



The control's Caption should match the Name if it has not been explicitly set to something else.




csOpaque



The control completely fills its client rectangle.




csDoubleClicks



The control can receive and respond to double-click messages. Otherwise, map double-clicks into clicks.




csFixedWidth



The width of the control does not vary or scale.




csFixedHeight



The height of the control does not vary or scale.




csNoDesignVisible



The control is not visible at design time.




csReplicatable



The control can be copied using the PaintTo method to draw its image to an arbitrary canvas.




csNoStdEvents



Standard events such as mouse, key, and click events are ignored. This flag allows an application to run faster when there is no need to respond to these events.




csDisplayDragImage



If a control that has an associated drag image list is dragged across a control with this setting, then the image list is used to enhance the drag cursor while the cursor is over it. Otherwise, the drag cursor is used on its own.




csReflector



The control responds to Windows dialog messages, focus messages, or size change messages. Use this setting if the control can be used as an ActiveX control, so that it receives notification of these events.




csActionClient



The control is linked to an action object. This flag is set when the Action property is set, and cleared if the Action property is cleared.




csMenuEvents



The control responds to system menu commands.




ControlStyle describes all controls instantiated from a given class. ControlStyle should not be modified at run time, except in the constructor. The ControlState property records transient conditions.
The TControl constructor initializes ControlStyle to the set of csCaptureMouse, csClickEvents, csSetCaption, and csDoubleClicks.
ControlStyle is primarily used by component writers when implementing components derived from TControl.
</summary></devnotes></property>
      <property name="CurrentPPI" visibility="public" read="GetCurrentPPI" type="Integer" file="Vcl.Controls.pas" line="2098"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="DockOrientation" visibility="public" read="FDockOrientation" write="FDockOrientation" type="TDockOrientation" file="Vcl.Controls.pas" line="2099"><devnotes><summary>
DockOrientation specifies how the control is docked relative to other controls docked in the same parent.
Use DockOrientation to determine the position of the control relative to other controls docked to the same parent. Docking zones can be arranged from left to right or from top to bottom.


</summary></devnotes></property>
      <property name="ExplicitLeft" visibility="public" read="FExplicitLeft" type="Integer" file="Vcl.Controls.pas" line="2100"><devnotes><summary>
Specifies the explicit horizontal pixel coordinate of the left edge of a component relative to its parent.
ExplicitLeft is a read-only property used internally by Delphi. Use Left in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="ExplicitTop" visibility="public" read="FExplicitTop" type="Integer" file="Vcl.Controls.pas" line="2101"><devnotes><summary>
Specifies the explicit vertical pixel coordinate of the top edge of a component relative to its parent.
ExplicitTop is a read-only property used internally by Delphi. Use Top in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="ExplicitWidth" visibility="public" read="FExplicitWidth" type="Integer" file="Vcl.Controls.pas" line="2102"><devnotes><summary>
Specifies the explicit horizontal size of the control in pixels.
ExplicitWidth is a read-only property used internally by Delphi. Use Width in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="ExplicitHeight" visibility="public" read="FExplicitHeight" type="Integer" file="Vcl.Controls.pas" line="2103"><devnotes><summary>
Specifies the explicit vertical size of the control in pixels.
ExplicitHeight is a read-only property used internally by Delphi. Use Height in applications to allow read and write access. 
</summary></devnotes></property>
      <property name="Floating" visibility="public" read="GetFloating" type="Boolean" file="Vcl.Controls.pas" line="2104"><devnotes><summary>
Specifies whether the control is floating.
Read Floating to determine whether a dockable control appears in a floating window, rather than docked to a parent control.

Note:  Use Floating rather than the Parent property to determine whether a control is free-floating. Floating controls may have a non-nil (Delphi) or NULL (C++) parent if the FloatingDockSiteClass property specifies a floating window type.</summary></devnotes></property>
      <property name="FloatingDockSiteClass" visibility="public" read="GetFloatingDockSiteClass" write="FFloatingDockSiteClass" type="TWinControlClass" file="Vcl.Controls.pas" line="2105"><devnotes><summary>
Specifies the class of the temporary control that hosts the control when it is floating.
Use FloatingDockSiteClass to specify the class that houses the control when it is floating. This class must be a descendant of TWinControl. By default, it is TCustomDockForm. When the control is undocked, a temporary control of this type is created and the control is docked to that control. When the control is docked to another control, the temporary floating dock site is freed.
If the control can float as a stand-alone window, FloatingDockSiteClass is nil (Delphi) or NULL (C++).
</summary></devnotes></property>
      <property name="HostDockSite" visibility="public" read="FHostDockSite" write="SetHostDockSite" type="TWinControl" file="Vcl.Controls.pas" line="2106"><devnotes><summary>
Specifies the control in which the control is docked.
Read HostDockSite to access the windowed control to which the control is docked. If the control is floating, HostDockSite is a temporary control of type FloatingDockSiteClass, or (if there is no floating dock site class) nil (Delphi) or NULL (C++).
Most applications should use the ManualDock method rather than setting HostDockSite. Setting HostDockSite automatically undocks the control from its previous host (if any) and docks it to the specified control, but does not adjust the control's position and alignment and bypasses the standard docking events.
For dock clients, the value of HostDockSite is the same as the value of Parent. For controls that are not docking clients, HostDockSite is nil (Delphi) or NULL (C++), while Parent specifies the containing control.
</summary></devnotes></property>
      <property name="LRDockWidth" visibility="public" read="GetLRDockWidth" write="FLRDockWidth" type="Integer" file="Vcl.Controls.pas" line="2107"><devnotes><summary>
Specifies the width of the control when it is docked horizontally.
Read LRDockWidth to get the width of the control from the last time it was docked horizontally. Set LRDockWidth to indicate the width the control should have the next time it is docked horizontally.
LRDockWidth allows a control to &quot;remember&quot; its docked size even when its width changes because it is undocked or docked with a vertical orientation.
</summary></devnotes></property>
      <property name="ScaleFactor" visibility="public" read="FScaleFactor" type="Single" default="0" file="Vcl.Controls.pas" line="2108"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="ShowHint" visibility="public" read="FShowHint" write="SetShowHint" stored="IsShowHintStored" type="Boolean" file="Vcl.Controls.pas" line="2109"><devnotes><summary>
ShowHint specifies whether to show the Help Hint when the mouse pointer moves over the control.
ShowHint determines whether the Help Hint appears for the control. The Help Hint is the value of the TControl.Hint property. The Help Hint appears in a box just beneath the control when the mouse pointer moves over the control. 
To enable Help Hints for a particular control, two conditions must be satisfied:

The application's ShowHint property must be True.
Either the control's own ShowHint property must be True, or the control's ParentShowHint property must be True and its parent's ShowHint property must be True.
For example, imagine a check box within a group box. If the ShowHint property of the group box is True and the ParentShowHint property of the check box is True, but the ShowHint property of the check box is False, the check box still displays its Help Hint.
Changing the ShowHint value automatically sets the ParentShowHint property to False.
</summary></devnotes></property>
      <property name="TBDockHeight" visibility="public" read="GetTBDockHeight" write="FTBDockHeight" type="Integer" file="Vcl.Controls.pas" line="2110"><devnotes><summary>
Specifies the height of the control when it is docked vertically.
Read TBDockHeight to get the height of the control from the last time it was docked vertically. Set TBDockHeight to indicate the height the control should have the next time it is docked vertically.
TBDockHeight allows a control to &quot;remember&quot; its docked size even when its height changes because it is undocked or docked with a horizontal orientation.
</summary></devnotes></property>
      <property name="Touch" visibility="public" read="FTouchManager" write="SetTouchManager" type="TTouchManager" file="Vcl.Controls.pas" line="2111"><devnotes><summary>
Specifies the touch manager component associated with the control.
Use the Touch property to access gesturing options associated with a control. Touch specifies a class of type TTouchManager. 
Touch is used to: 

Associate a TGestureManager.
(TGestureManager manages all the gestures that can be used by the control.)
Select the standard, interactive, or custom gestures to associate with the control.
(You can also connect each gesture to an action; see Assigning Actions to Gestures.)
Specify a set of options for interactive or tablet gestures.</summary></devnotes></property>
      <property name="UndockHeight" visibility="public" read="GetUndockHeight" write="FUndockHeight" type="Integer" file="Vcl.Controls.pas" line="2112"><devnotes><summary>
Specifies the height of the control when it is floating.
Read UndockHeight to get the height of the control from the last time it was floating. Set UndockHeight to indicate the height the control should have the next time it is undocked.
UndockHeight allows a control to &quot;remember&quot; its floating size even when its height changes because it is docked.
</summary></devnotes></property>
      <property name="UndockWidth" visibility="public" read="GetUndockWidth" write="FUndockWidth" type="Integer" file="Vcl.Controls.pas" line="2113"><devnotes><summary>
Specifies the width of the control when it is floating.
Read UndockWidth to get the width of the control from the last time it was floating. Set UndockWidth to indicate the width the control should have the next time it is undocked.
UndockWidth allows a control to &quot;remember&quot; its floating size even when its width changes because it is docked.
</summary></devnotes></property>
      <property name="Visible" visibility="public" read="FVisible" write="SetVisible" stored="IsVisibleStored" type="Boolean" default="1" file="Vcl.Controls.pas" line="2114"><devnotes><summary>
Specifies whether the component appears onscreen.
Use the Visible property to control the visibility of the control at run time. If Visible is True, the control appears. If Visible is False, the control is not visible.
Calling the Show method sets the control's Visible property to True. Calling the Hide method sets it to False.
For TCustomForm descendants, the Show and ShowModal methods set Visible to True and bring the form to the front of all open windows.
For TTabSheet descendants, Visible does not control the visibility of the control at run time. For more information, see the description of the TabVisible property.
</summary></devnotes></property>
      <event name="WindowProc" visibility="public" read="FWindowProc" write="FWindowProc" type="TWndMethod" file="Vcl.Controls.pas" line="2115"><devnotes><summary>
Points to the window procedure that responds to messages sent to the control.
Use the WindowProc property to temporarily replace or subclass the window procedure of the control. Component writers that are customizing the window procedure for a descendent class should override the WndProc method instead.
Before assigning a new value to WindowProc, store the original value. WindowProc is initially set to the WndProc method, so if the value has not been changed since then, the original value need not be stored. Within the procedure that is used as the new value for WindowProc, pass any unhandled messages to the original procedure that was the value of WindowProc. After completing any specialized message handling, restore the value of WindowProc to the original procedure.
</summary></devnotes></event>
      <property name="Parent" visibility="public" read="FParent" write="SetParent" type="TWinControl" file="Vcl.Controls.pas" line="2121"><devnotes><summary>
Specifies the parent of the control.
Use the Parent property to get or set the parent of the control. The parent of a control is the control that contains it. For example, if an application includes three radio buttons in a group box, the group box is the parent of the three radio buttons, and the radio buttons are the child controls of the group box.
To serve as a parent, a control must be an instance of a TWinControl descendant.
When creating a new control at run time, assign a Parent property value for the new control. Usually, this is a form, panel, group box, or a control that is designed to contain another. Changing the parent of a control moves the control onscreen so that it is displayed within the new parent. When the parent control moves, the child moves with the parent.
Some controls (such as ActiveX controls) are contained in native windows rather than in a parent VCL control. For these controls, the value of Parent is nil (Delphi) or NULL (C++) and the ParentWindow property specifies the window.

Note:  The Parent property declared in TControl is similar to the Owner property declared in TComponent, in that the Parent of a control frees the control just as the Owner of a component frees that component. However, the Parent of a control is always a windowed control that visually contains the control, and is responsible for writing the control to a stream when the form is saved. The Owner of a component is the component that was passed as a parameter in the constructor and, if assigned, initiates the process of saving all objects (including the control and its parent) when the form is saved.</summary></devnotes></property>
      <property name="StyleElements" visibility="public" read="FStyleElements" write="SetStyleElements" type="TStyleElements" default="7" file="Vcl.Controls.pas" line="2123"><devnotes><summary>
Specifies the style elements that are used by the control.
Use StyleElements to customize the style of the control. If a custom style is enabled, you can enable or disable style elements in the control.
StyleElements is a set of values that specify which elements of the current style are to be applied to this control. By default, all the elements of the style are enabled.
</summary></devnotes></property>
      <property name="StyleName" visibility="public" read="FStyleName" write="SetStyleName" type="string" default="0" file="Vcl.Controls.pas" line="2124"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <event name="OnGesture" visibility="public" read="FOnGesture" write="FOnGesture" type="TGestureEvent" file="Vcl.Controls.pas" line="2125"><devnotes><summary>
Occurs when you perform a gesture associated with this control.
Write an event handler for OnGesture to perform custom processing for gesture events. OnGesture is fired on controls that subscribed for specific gestures using the TTouchManager class. If your code did process the gesture event, do not forget to set the Handled parameter to True so that the event is not propagated further.
If no event handler is associated with the control, the default DoGesture method is executed performing its own processing for the event. 
OnGesture is an event handler of type Vcl.Controls.TGestureEvent.
</summary></devnotes></event>
      <property name="RaiseOnNonMainThreadUsage" visibility="public" read="FRaiseOnNonMainThreadUsage" write="FRaiseOnNonMainThreadUsage" type="Boolean" default="0" file="Vcl.Controls.pas" line="2126"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="AlignWithMargins" visibility="published" read="GetAlignWithMargins" write="SetAlignWithMargins" type="Boolean" default="0" file="Vcl.Controls.pas" line="2128"><devnotes><summary>
Specifies whether a control should be constrained by margins.
If AlignWithMargins is true, use the Margins property of the control to govern the spacing relative to other controls that are aligned with this one. The controls are not allowed to be any closer than the spacing specified in Margins. This spacing is maintained as controls are moved when the parent control resizes. 
AlignWithMargins is true if the style csAlignWithMargins, a TControlStyle type, is in the control's ControlStyle property, and false otherwise. 
</summary></devnotes></property>
      <property name="Left" visibility="published" read="FLeft" write="SetLeft" type="Integer" file="Vcl.Controls.pas" line="2129"><devnotes><summary>
Specifies the horizontal coordinate of the left edge of a component relative to its parent.
Use the Left property to determine where the left side of the control begins or to reposition the left side of the control.
If the control is contained in another control, the Left and Top properties are relative to the parent control. If the control is contained directly by the form, the property values are relative to the form. For forms, the value of the Left property is relative to the screen in pixels.
</summary></devnotes></property>
      <property name="Top" visibility="published" read="FTop" write="SetTop" type="Integer" file="Vcl.Controls.pas" line="2130"><devnotes><summary>
Specifies the Y coordinate of the upper-left corner of a control, relative to its parent or containing control in pixels.
Use Top to locate the top of the control or reposition the control to a different Y coordinate. The Top property, like the Left property, is the position of the control relative to its container. Thus, if a control is contained in a TPanel, the Left and Top properties are relative to the panel. If the control is contained directly by the form, it is relative to the form. For forms, the value of the Top property is relative to the screen in pixels.
</summary></devnotes></property>
      <property name="Width" visibility="published" read="FWidth" write="SetWidth" type="Integer" file="Vcl.Controls.pas" line="2131"><devnotes><summary>
Specifies the horizontal size of the control or form in pixels.
Use the Width property to read or change the width of the control.

Note:  For tab sheet controls, changing this property at run time has no effect.</summary></devnotes></property>
      <property name="Height" visibility="published" read="FHeight" write="SetHeight" type="Integer" file="Vcl.Controls.pas" line="2132"><devnotes><summary>
Specifies the vertical size of the control in pixels.
Use the Height property to read or change the height of the control.
</summary></devnotes></property>
      <property name="Cursor" visibility="published" read="FCursor" write="SetCursor" type="TCursor" default="0" file="Vcl.Controls.pas" line="2133"><devnotes><summary>
Specifies the image used to represent the mouse pointer when it passes into the region covered by the control.
Change the value of Cursor to provide feedback to the user when the mouse pointer enters the control. The value of Cursor is the index of the cursor in the list of cursors maintained by the global variable, Screen. In addition to the built-in cursors provided by TScreen, applications can add custom cursors to the list. 
</summary></devnotes></property>
      <property name="Hint" visibility="published" read="FHint" write="FHint" stored="IsHintStored" type="string" default="0" file="Vcl.Controls.pas" line="2134"><devnotes><summary>
Hint contains the text string that appears when the user moves the mouse over the control.
Use the Hint property to provide a string of Help text either as a Help Hint or as Help text on a particular location, such as a status bar. 
A Help Hint is a box containing Help text that appears for a control when the user moves the mouse pointer over the control and pauses momentarily. 
To set up Help Hints

Specify the Hint property of each control for which a Help Hint should appear.
Set the ShowHint property of each appropriate control to True, or set the ParentShowHint property of all controls to True and set the ShowHint property of the form to True.
At run time, set the value of the application's ShowHint property to True.
To show the Hint on a status bar or another location, use the OnHint event handler of the application. The application's OnHint event occurs when the mouse pointer moves over the control.
Specify a hint to be used for both a Help Hint box and by an OnHint event handler by specifying values separated by a | (pipe) character.
For example,

Edit1.Hint := 'Name|Enter Name in the edit box|1';

Edit1-&gt;Hint = &quot;Name|Enter Name in the edit box|1&quot;;

Here:

The Name part is the short hint and appears at the top of the Help Hint box.
Enter full name in the edit box is the long hint and appears below the short hint. It can be extracted using the GetLongHint function for use in an OnHint event handler.
1 is an optional image index in an image list in the Images property of the control and specifies the index of the image to appear in the hint.
If Hint contains only one value, the entire string is used as a Help Hint and returned by the GetLongHint and GetShortHint functions. If a control has no Hint value specified, but its parent control does, the control uses the value of the parent control (as long as the control's ShowHint property is True). 

Note: If the application's ShowHint property is False, the Help Hint does not appear, but the OnHint event handler is still called. </summary></devnotes></property>
      <property name="HelpType" visibility="published" read="FHelpType" write="FHelpType" type="THelpType" default="1" file="Vcl.Controls.pas" line="2135"><devnotes><summary>
Specifies whether the control's context-sensitive Help topic is identified by a context ID or by keyword.
Set HelpType to specify whether the control identifies its context-sensitive Help topic by a context ID or by keyword:

When HelpType is htContext, the HelpContext property value identifies the control's Help topic.
When HelpType is htKeyword, the HelpKeyword property value identifies the control's Help topic.
To use the Help, insert in the uses clause of your application the Vcl.HtmlHelpViewer or another unit that provides an interface to the external Help viewer to use. For C++, you need to include the HTMLHelpViewer.hpp header file.


</summary></devnotes></property>
      <property name="HelpKeyword" visibility="published" read="FHelpKeyword" write="SetHelpKeyword" stored="IsHelpContextStored" type="string" default="0" file="Vcl.Controls.pas" line="2136"><devnotes><summary>
The HelpKeyword property contains the keyword string that identifies the Help topic for the control.
To enable the keyword-based context-sensitive Help for a control, set Vcl.Controls.TControl.HelpType to htKeyword and set HelpKeyword to a keyword string.
No keyword (zero-length string, the default) means that no Help topic is provided for the control. 
To use the Help, insert in the uses clause of your application the Vcl.HtmlHelpViewer or other unit that provides an interface to the external Help viewer to use. For C++, you need to include the HTMLHelpViewer.hpp header file.
</summary></devnotes></property>
      <property name="HelpContext" visibility="published" read="FHelpContext" write="SetHelpContext" stored="IsHelpContextStored" type="THelpContext" default="0" file="Vcl.Controls.pas" line="2137"><devnotes><summary>
The HelpContext property contains the numeric context ID that identifies the Help topic for the control.
In case of a .chm help file, you must map symbolic Context IDs of Help topics to numeric topic ID values in the [MAP] section of your project (.hhp) file.
To enable Context ID-based context-sensitive Help for a control, set Vcl.Controls.TControl.HelpType to htContext and set HelpContext to a numeric topic ID. 
A topic ID of 0 (default) means that no Help topic is provided for the control. 
To use the Help, insert in the uses clause of your application the Vcl.HtmlHelpViewer or another unit that provides an interface to the external Help viewer to use. For C++, you need to include the HTMLHelpViewer.hpp header file.
</summary></devnotes></property>
      <property name="Margins" visibility="published" read="FMargins" write="SetMargins" type="TMargins" file="Vcl.Controls.pas" line="2138"><devnotes><summary>
Specifies the margins of the control.
Use the Margins property to set the margins of the control.
If AlignWithMargins is true, then the Margins property of the control governs the spacing relative to other controls that are aligned with this one. The controls are not allowed to be closer than the spacing specified in Margins. 

Note:  The Margins you set for the control have effect only when AlignWithMargins is set to true and Align is not set to alNone.</summary></devnotes></property>
      <property name="CustomHint" visibility="published" read="GetCustomHint" write="SetCustomHint" type="TCustomHint" file="Vcl.Controls.pas" line="2139"><devnotes><summary>
CustomHint is a custom hint for the control.
CustomHint is a TCustomHint instance for a control to specify the appearance of the control's hint. 
</summary></devnotes></property>
      <property name="ParentCustomHint" visibility="published" read="FParentCustomHint" write="SetParentCustomHint" type="Boolean" default="1" file="Vcl.Controls.pas" line="2140"><devnotes><summary>
Specifies where a control looks for its custom hint.
To have a control use the same hint customization information as its parent control, set ParentCustomHint to true.
If ParentCustomHint is false, the control uses its own CustomHint property. 
Set ParentCustomHint to true for all controls to ensure that all the controls on a form display their hint messages alike.
When the value of a control's CustomHint property changes, ParentCustomHint becomes false automatically. 
</summary></devnotes></property>
    </members>
  <devnotes><summary>
TControl is the base class for all components that are visible at run time.
Controls are visual components, meaning the user can see them and possibly interact with them at run time. All controls have properties, methods, and events that describe aspects of their appearance, such as the position of the control, the cursor or hint associated with the control, methods to paint or move the control, and events that respond to user actions.
TControl has many protected properties and methods that are used or published by its descendants.
</summary></devnotes></class>
  <classref name="TControlClass" ref="TControl" file="Vcl.Controls.pas" line="2143"/>
  <struct name="TCreateParams" size="588" file="Vcl.Controls.pas" line="2159">
    <field name="Caption" type="PWideChar" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="2160"/>
    <field name="Style" type="Cardinal" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="2161"/>
    <field name="ExStyle" type="Cardinal" visibility="public" size="4" offset="8" file="Vcl.Controls.pas" line="2162"/>
    <field name="X" type="Integer" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="2163"/>
    <field name="Y" type="Integer" visibility="public" size="4" offset="16" file="Vcl.Controls.pas" line="2163"/>
    <field name="Width" type="Integer" visibility="public" size="4" offset="20" file="Vcl.Controls.pas" line="2164"/>
    <field name="Height" type="Integer" visibility="public" size="4" offset="24" file="Vcl.Controls.pas" line="2164"/>
    <field name="WndParent" type="HWND" visibility="public" size="4" offset="28" file="Vcl.Controls.pas" line="2165"/>
    <field name="Param" type="Pointer" visibility="public" size="4" offset="32" file="Vcl.Controls.pas" line="2166"/>
    <field name="WindowClass" type="tagWNDCLASSW" visibility="public" size="40" offset="36" file="Vcl.Controls.pas" line="2167"/>
    <field name="WinClassName" visibility="public" size="512" offset="76" file="Vcl.Controls.pas" line="2168">
      <array name="WinClassName" visibility="public" low="0" high="255" file="Vcl.Controls.pas" line="2168">
        <element type="Char"/>
      </array>
    </field>
  </struct>
  <class name="TWinControlActionLink" file="Vcl.Controls.pas" line="2174">
    <ancestor name="TControlActionLink" namespace="Vcl.Controls">
      <methodref name="AssignClient" visibility="protected" procflags="override"/>
      <methodref name="IsCaptionLinked" visibility="protected" procflags="override"/>
      <methodref name="IsDropdownMenuLinked" visibility="protected" procflags="virtual"/>
      <methodref name="IsEnabledLinked" visibility="protected" procflags="override"/>
      <methodref name="IsEnableDropdownLinked" visibility="protected" procflags="virtual"/>
      <methodref name="IsHelpLinked" visibility="protected" procflags="override"/>
      <methodref name="IsHintLinked" visibility="protected" procflags="override"/>
      <methodref name="IsVisibleLinked" visibility="protected" procflags="override"/>
      <methodref name="IsOnExecuteLinked" visibility="protected" procflags="override"/>
      <methodref name="IsPopupMenuLinked" visibility="protected" procflags="virtual"/>
      <methodref name="DoShowHint" visibility="protected" procflags="virtual"/>
      <methodref name="SetCaption" visibility="protected" procflags="override"/>
      <methodref name="SetDropdownMenu" visibility="protected" procflags="virtual"/>
      <methodref name="SetEnabled" visibility="protected" procflags="override"/>
      <methodref name="SetEnableDropdown" visibility="protected" procflags="virtual"/>
      <methodref name="SetHint" visibility="protected" procflags="override"/>
      <methodref name="SetHelpContext" visibility="protected" procflags="override"/>
      <methodref name="SetHelpKeyword" visibility="protected" procflags="override"/>
      <methodref name="SetHelpType" visibility="protected" procflags="override"/>
      <methodref name="SetVisible" visibility="protected" procflags="override"/>
      <methodref name="SetOnExecute" visibility="protected" procflags="override"/>
      <methodref name="SetPopupMenu" visibility="protected" procflags="virtual"/>
      <ancestor name="TActionLink" namespace="Vcl.ActnList">
        <methodref name="IsImageNameLinked" visibility="protected" procflags="virtual"/>
        <ancestor name="TContainedActionLink" namespace="System.Actions">
          <methodref name="DefaultIsLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsCaptionLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsCheckedLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsEnabledLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsGroupIndexLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsHelpContextLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsHelpLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsHintLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsImageIndexLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsShortCutLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsVisibleLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="IsStatusActionLinked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAutoCheck" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetCaption" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetChecked" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetGroupIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpContext" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpKeyword" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHelpType" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetHint" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetImageIndex" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetShortCut" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetVisible" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetStatusAction" visibility="protected" procflags="virtual">
          </methodref>
          <ancestor name="TBasicActionLink" namespace="System.Classes">
            <methodref name="AssignClient" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Change" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="IsOnExecuteLinked" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAction" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetOnExecute" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Execute" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Update" visibility="public" procflags="virtual">
            </methodref>
            <propertyref name="Action" visibility="public">
            </propertyref>
            <eventref name="OnChange" visibility="public">
            </eventref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public" procflags="constructor">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="DisposeOf" visibility="public" procflags="inline">
              </methodref>
              <methodref name="InitInstance" visibility="public" procflags="class">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public" procflags="inline">
              </methodref>
              <methodref name="ClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassNameIs" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassParent" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="ClassInfo" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InstanceSize" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InheritsFrom" visibility="public" procflags="class">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodName" visibility="public" procflags="class">
              </methodref>
              <methodref name="QualifiedClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="UnitName" visibility="public" procflags="class">
              </methodref>
              <methodref name="UnitScope" visibility="public" procflags="class">
              </methodref>
              <methodref name="Equals" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetHashCode" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ToString" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AfterConstruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Dispatch" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DefaultHandler" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="NewInstance" visibility="public" procflags="class virtual">
              </methodref>
              <methodref name="FreeInstance" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor virtual">
              </methodref>
              <methodref name="GetDisposed" visibility="protected" procflags="inline">
              </methodref>
              <methodref name="CheckDisposed" visibility="protected" procflags="inline">
              </methodref>
              <propertyref name="Disposed" visibility="protected">
              </propertyref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FClient" type="TWinControl" visibility="protected" size="4" offset="32" file="Vcl.Controls.pas" line="2176"/>
      <procedure name="AssignClient" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2177">
        <parameters>
          <parameter name="AClient" type="TObject"/>
        </parameters>
      </procedure>
      <function name="IsHelpContextLinked" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2178">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetHelpContext" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2179">
        <parameters>
          <parameter name="Value" type="THelpContext"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <classref name="TWinControlActionLinkClass" ref="TWinControlActionLink" file="Vcl.Controls.pas" line="2182"/>
  <enum name="TImeMode" file="Vcl.Controls.pas" line="2198">
    <element value="0" name="imDisable" file="Vcl.Controls.pas" line="2198"/>
    <element value="1" name="imClose" file="Vcl.Controls.pas" line="2198"/>
    <element value="2" name="imOpen" file="Vcl.Controls.pas" line="2198"/>
    <element value="3" name="imDontCare" file="Vcl.Controls.pas" line="2198"/>
    <element value="4" name="imSAlpha" file="Vcl.Controls.pas" line="2199"/>
    <element value="5" name="imAlpha" file="Vcl.Controls.pas" line="2199"/>
    <element value="6" name="imHira" file="Vcl.Controls.pas" line="2199"/>
    <element value="7" name="imSKata" file="Vcl.Controls.pas" line="2199"/>
    <element value="8" name="imKata" file="Vcl.Controls.pas" line="2199"/>
    <element value="9" name="imChinese" file="Vcl.Controls.pas" line="2200"/>
    <element value="10" name="imSHanguel" file="Vcl.Controls.pas" line="2200"/>
    <element value="11" name="imHanguel" file="Vcl.Controls.pas" line="2200"/>
  </enum>
  <type name="TImeName" type="UnicodeString" file="Vcl.Controls.pas" line="2201"/>
  <enum name="TTipMode" file="Vcl.Controls.pas" line="2203">
    <element value="0" name="tipClose" file="Vcl.Controls.pas" line="2203"/>
    <element value="1" name="tipOpen" file="Vcl.Controls.pas" line="2203"/>
    <element value="2" name="tipDontCare" file="Vcl.Controls.pas" line="2203"/>
  </enum>
  <struct name="TAlignInfo" size="16" file="Vcl.Controls.pas" line="2205">
    <field name="AlignList" type="TList" visibility="public" size="4" offset="0" file="Vcl.Controls.pas" line="2206"/>
    <field name="ControlIndex" type="Integer" visibility="public" size="4" offset="4" file="Vcl.Controls.pas" line="2207"/>
    <field name="Align" type="TAlign" visibility="public" size="1" offset="8" file="Vcl.Controls.pas" line="2208"/>
    <field name="Scratch" type="Integer" visibility="public" size="4" offset="12" file="Vcl.Controls.pas" line="2209"/>
  </struct>
  <type name="TBorderWidth" type="cardinal" loBound="0" hiBound="2147483647" file="Vcl.Controls.pas" line="2212"/>
  <enum name="TBevelCut" file="Vcl.Controls.pas" line="2214">
    <element value="0" name="bvNone" file="Vcl.Controls.pas" line="2214"/>
    <element value="1" name="bvLowered" file="Vcl.Controls.pas" line="2214"/>
    <element value="2" name="bvRaised" file="Vcl.Controls.pas" line="2214"/>
    <element value="3" name="bvSpace" file="Vcl.Controls.pas" line="2214"/>
  </enum>
  <enum name="TBevelEdge" file="Vcl.Controls.pas" line="2215">
    <element value="0" name="beLeft" file="Vcl.Controls.pas" line="2215"/>
    <element value="1" name="beTop" file="Vcl.Controls.pas" line="2215"/>
    <element value="2" name="beRight" file="Vcl.Controls.pas" line="2215"/>
    <element value="3" name="beBottom" file="Vcl.Controls.pas" line="2215"/>
  </enum>
  <set name="TBevelEdges" type="TBevelEdge" file="Vcl.Controls.pas" line="2216">
    <element name="beLeft"/>
    <element name="beTop"/>
    <element name="beRight"/>
    <element name="beBottom"/>
  </set>
  <enum name="TBevelKind" file="Vcl.Controls.pas" line="2217">
    <element value="0" name="bkNone" file="Vcl.Controls.pas" line="2217"/>
    <element value="1" name="bkTile" file="Vcl.Controls.pas" line="2217"/>
    <element value="2" name="bkSoft" file="Vcl.Controls.pas" line="2217"/>
    <element value="3" name="bkFlat" file="Vcl.Controls.pas" line="2217"/>
  </enum>
  <type name="TBevelWidth" type="cardinal" loBound="1" hiBound="2147483647" file="Vcl.Controls.pas" line="2218"/>
  <interface name="IDockManager" GUID="{8619FD79-C281-11D1-AA60-00C04FA370E8}" ancestor="IInterface" file="Vcl.Controls.pas" line="2222">
    <procedure name="BeginUpdate" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2224">
    </procedure>
    <procedure name="EndUpdate" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2225">
    </procedure>
    <procedure name="GetControlBounds" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2226">
      <parameters>
        <parameter name="Control" type="TControl"/>
        <parameter name="CtlBounds" type="TRect" paramflags="out"/>
      </parameters>
    </procedure>
    <procedure name="InsertControl" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2227">
      <parameters>
        <parameter name="Control" type="TControl"/>
        <parameter name="InsertAt" type="TAlign"/>
        <parameter name="DropCtl" type="TControl"/>
      </parameters>
    </procedure>
    <procedure name="LoadFromStream" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2229">
      <parameters>
        <parameter name="Stream" type="TStream"/>
      </parameters>
    </procedure>
    <procedure name="PaintSite" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2230">
      <parameters>
        <parameter name="DC" type="HDC"/>
      </parameters>
    </procedure>
    <procedure name="PositionDockRect" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2231">
      <parameters>
        <parameter name="Client" type="TControl"/>
        <parameter name="DropCtl" type="TControl"/>
        <parameter name="DropAlign" type="TAlign"/>
        <parameter name="DockRect" type="TRect" paramflags="var"/>
      </parameters>
    </procedure>
    <procedure name="RemoveControl" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2233">
      <parameters>
        <parameter name="Control" type="TControl"/>
      </parameters>
    </procedure>
    <procedure name="ResetBounds" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2234">
      <parameters>
        <parameter name="Force" type="Boolean"/>
      </parameters>
    </procedure>
    <procedure name="SaveToStream" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2235">
      <parameters>
        <parameter name="Stream" type="TStream"/>
      </parameters>
    </procedure>
    <procedure name="SetReplacingControl" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="2236">
      <parameters>
        <parameter name="Control" type="TControl"/>
      </parameters>
    </procedure>
  </interface>
  <type name="TAlignInsertBeforeEvent" file="Vcl.Controls.pas" line="2239" procflags="closure">
  </type>
  <type name="TAlignPositionEvent" file="Vcl.Controls.pas" line="2240" procflags="closure">
  </type>
  <class name="TWinControl" file="Vcl.Controls.pas" line="2250">
    <ancestor name="TControl" namespace="Vcl.Controls">
      <methodref name="GetCustomHint" visibility="private"/>
      <methodref name="CalcDockSizes" visibility="private"/>
      <methodref name="CheckNewSize" visibility="private"/>
      <methodref name="CreateFloatingDockSite" visibility="private"/>
      <methodref name="DoActionChange" visibility="private"/>
      <methodref name="DoCanAutoSize" visibility="private"/>
      <methodref name="DoCanResize" visibility="private"/>
      <methodref name="DoConstraintsChange" visibility="private"/>
      <methodref name="DoConstrainedResize" visibility="private"/>
      <methodref name="DoDragMsg" visibility="private"/>
      <methodref name="DoMouseActivate" visibility="private"/>
      <methodref name="DoMouseDown" visibility="private"/>
      <methodref name="DoMouseUp" visibility="private"/>
      <methodref name="DoMarginChange" visibility="private"/>
      <methodref name="FontChanged" visibility="private"/>
      <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
      <methodref name="GetBoundsRect" visibility="private"/>
      <methodref name="GetClientHeight" visibility="private"/>
      <methodref name="GetClientWidth" visibility="private"/>
      <methodref name="GetLRDockWidth" visibility="private"/>
      <methodref name="GetMouseCapture" visibility="private"/>
      <methodref name="GetTBDockHeight" visibility="private"/>
      <methodref name="GetUndockWidth" visibility="private"/>
      <methodref name="GetUndockHeight" visibility="private"/>
      <methodref name="InvalidateControl" visibility="private"/>
      <methodref name="IsAnchorsStored" visibility="private"/>
      <methodref name="IsBiDiModeStored" visibility="private"/>
      <methodref name="IsCaptionStored" visibility="private"/>
      <methodref name="IsColorStored" visibility="private"/>
      <methodref name="IsEnabledStored" visibility="private"/>
      <methodref name="IsFontStored" visibility="private"/>
      <methodref name="IsHintStored" visibility="private"/>
      <methodref name="IsHelpContextStored" visibility="private"/>
      <methodref name="IsOnClickStored" visibility="private"/>
      <methodref name="IsShowHintStored" visibility="private"/>
      <methodref name="IsVisibleStored" visibility="private"/>
      <methodref name="ReadIsControl" visibility="private"/>
      <methodref name="ReadExplicitLeft" visibility="private"/>
      <methodref name="ReadExplicitTop" visibility="private"/>
      <methodref name="ReadExplicitWidth" visibility="private"/>
      <methodref name="ReadExplicitHeight" visibility="private"/>
      <methodref name="SetAlignWithMargins" visibility="private"/>
      <methodref name="SetAnchors" visibility="private"/>
      <methodref name="SetAction" visibility="private"/>
      <methodref name="SetAlign" visibility="private"/>
      <methodref name="SetBoundsRect" visibility="private"/>
      <methodref name="SetClientHeight" visibility="private"/>
      <methodref name="SetClientSize" visibility="private"/>
      <methodref name="SetClientWidth" visibility="private"/>
      <methodref name="SetColor" visibility="private"/>
      <methodref name="SetCursor" visibility="private"/>
      <methodref name="SetDesktopFont" visibility="private"/>
      <methodref name="SetFont" visibility="private"/>
      <methodref name="SetHeight" visibility="private"/>
      <methodref name="SetHelpContext" visibility="private"/>
      <methodref name="SetHelpKeyword" visibility="private"/>
      <methodref name="SetHostDockSite" visibility="private"/>
      <methodref name="SetLeft" visibility="private"/>
      <methodref name="SetMouseCapture" visibility="private"/>
      <methodref name="SetParentColor" visibility="private"/>
      <methodref name="SetParentFont" visibility="private"/>
      <methodref name="SetShowHint" visibility="private"/>
      <methodref name="SetParentShowHint" visibility="private"/>
      <methodref name="SetParentCustomHint" visibility="private"/>
      <methodref name="SetPopupMenu" visibility="private"/>
      <methodref name="SetTop" visibility="private"/>
      <methodref name="SetVisible" visibility="private"/>
      <methodref name="SetWidth" visibility="private"/>
      <methodref name="SetZOrderPosition" visibility="private"/>
      <methodref name="UpdateAnchorRules" visibility="private"/>
      <methodref name="WriteIsControl" visibility="private"/>
      <methodref name="WriteExplicitLeft" visibility="private"/>
      <methodref name="WriteExplicitTop" visibility="private"/>
      <methodref name="WriteExplicitWidth" visibility="private"/>
      <methodref name="WriteExplicitHeight" visibility="private"/>
      <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
      <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
      <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
      <methodref name="WMMouseMove" visibility="private" procflags="message"/>
      <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
      <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
      <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
      <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
      <methodref name="WMCancelMode" visibility="private" procflags="message"/>
      <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
      <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
      <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
      <methodref name="CMFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMColorChanged" visibility="private" procflags="message"/>
      <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
      <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
      <methodref name="CMHintShow" visibility="private" procflags="message"/>
      <methodref name="CMHitTest" visibility="private" procflags="message"/>
      <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
      <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
      <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
      <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
      <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
      <methodref name="CMGesture" visibility="private" procflags="message"/>
      <methodref name="WMContextMenu" visibility="private" procflags="message"/>
      <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
      <methodref name="SetConstraints" visibility="private"/>
      <methodref name="SetMargins" visibility="private"/>
      <methodref name="SetTouchManager" visibility="private"/>
      <methodref name="GetText" visibility="private"/>
      <methodref name="SetText" visibility="private"/>
      <methodref name="CMFloat" visibility="private" procflags="message"/>
      <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
      <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
      <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
      <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
      <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
      <methodref name="CanResize" visibility="protected" procflags="virtual"/>
      <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
      <methodref name="Changed" visibility="protected"/>
      <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
      <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
      <methodref name="Click" visibility="protected" procflags="dynamic"/>
      <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
      <methodref name="CalcCursorPos" visibility="protected"/>
      <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
      <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
      <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
      <methodref name="DefineProperties" visibility="protected" procflags="override"/>
      <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
      <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
      <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
      <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
      <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
      <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
      <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
      <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
      <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
      <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
      <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
      <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
      <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
      <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
      <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
      <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
      <methodref name="GetAction" visibility="protected" procflags="virtual"/>
      <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
      <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
      <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
      <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
      <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
      <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
      <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
      <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
      <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
      <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
      <methodref name="GetDragMode" visibility="protected"/>
      <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
      <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
      <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
      <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
      <methodref name="Notification" visibility="protected" procflags="override"/>
      <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
      <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
      <methodref name="ReadState" visibility="protected" procflags="override"/>
      <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
      <methodref name="Resize" visibility="protected" procflags="dynamic"/>
      <methodref name="ScaleConstraints" visibility="protected"/>
      <methodref name="ScaleMargins" visibility="protected"/>
      <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
      <methodref name="SendCancelMode" visibility="protected"/>
      <methodref name="SendDockNotification" visibility="protected"/>
      <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
      <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
      <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
      <methodref name="SetName" visibility="protected" procflags="override"/>
      <methodref name="SetParent" visibility="protected" procflags="virtual"/>
      <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
      <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
      <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
      <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
      <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
      <methodref name="SetCustomHint" visibility="protected"/>
      <methodref name="UpdateExplicitBounds" visibility="protected"/>
      <methodref name="UpdateBoundsRect" visibility="protected"/>
      <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
      <methodref name="WndProc" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
      <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
      <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
      <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
      <propertyref name="ActionLink" visibility="protected"/>
      <propertyref name="AutoSize" visibility="protected"/>
      <propertyref name="Caption" visibility="protected"/>
      <propertyref name="DesktopFont" visibility="protected"/>
      <propertyref name="DragKind" visibility="protected"/>
      <propertyref name="DragCursor" visibility="protected"/>
      <propertyref name="DragMode" visibility="protected"/>
      <propertyref name="IsControl" visibility="protected"/>
      <propertyref name="MouseCapture" visibility="protected"/>
      <propertyref name="ParentBiDiMode" visibility="protected"/>
      <propertyref name="ParentColor" visibility="protected"/>
      <propertyref name="ParentFont" visibility="protected"/>
      <propertyref name="ParentShowHint" visibility="protected"/>
      <propertyref name="PopupMenu" visibility="protected"/>
      <propertyref name="ScalingFlags" visibility="protected"/>
      <propertyref name="Text" visibility="protected"/>
      <propertyref name="WheelAccumulator" visibility="protected"/>
      <propertyref name="Color" visibility="protected"/>
      <propertyref name="Font" visibility="protected"/>
      <propertyref name="IScaling" visibility="protected"/>
      <propertyref name="WindowText" visibility="protected"/>
      <eventref name="OnCanResize" visibility="protected"/>
      <eventref name="OnClick" visibility="protected"/>
      <eventref name="OnConstrainedResize" visibility="protected"/>
      <eventref name="OnContextPopup" visibility="protected"/>
      <eventref name="OnDblClick" visibility="protected"/>
      <eventref name="OnDragDrop" visibility="protected"/>
      <eventref name="OnDragOver" visibility="protected"/>
      <eventref name="OnEndDock" visibility="protected"/>
      <eventref name="OnEndDrag" visibility="protected"/>
      <eventref name="OnMouseActivate" visibility="protected"/>
      <eventref name="OnMouseDown" visibility="protected"/>
      <eventref name="OnMouseEnter" visibility="protected"/>
      <eventref name="OnMouseLeave" visibility="protected"/>
      <eventref name="OnMouseMove" visibility="protected"/>
      <eventref name="OnMouseUp" visibility="protected"/>
      <eventref name="OnMouseWheel" visibility="protected"/>
      <eventref name="OnMouseWheelDown" visibility="protected"/>
      <eventref name="OnMouseWheelUp" visibility="protected"/>
      <eventref name="OnResize" visibility="protected"/>
      <eventref name="OnStartDock" visibility="protected"/>
      <eventref name="OnStartDrag" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="CheckNonMainThreadUsage" visibility="public"/>
      <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
      <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
      <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
      <methodref name="BeginDrag" visibility="public"/>
      <methodref name="BringToFront" visibility="public"/>
      <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
      <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
      <methodref name="ClientToParent" visibility="public"/>
      <methodref name="Dock" visibility="public" procflags="dynamic"/>
      <methodref name="Dragging" visibility="public"/>
      <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
      <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
      <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
      <propertyref name="Enabled" visibility="public"/>
      <methodref name="EndDrag" visibility="public"/>
      <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
      <methodref name="GetParentComponent" visibility="public" procflags="override"/>
      <methodref name="HasParent" visibility="public" procflags="override"/>
      <methodref name="Hide" visibility="public"/>
      <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
      <methodref name="Invalidate" visibility="public" procflags="virtual"/>
      <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
      <methodref name="IsRightToLeft" visibility="public"/>
      <methodref name="ManualDock" visibility="public"/>
      <methodref name="ManualFloat" visibility="public"/>
      <methodref name="Perform" visibility="public" procflags="overload"/>
      <methodref name="Refresh" visibility="public"/>
      <methodref name="Repaint" visibility="public" procflags="virtual"/>
      <methodref name="ReplaceDockedControl" visibility="public"/>
      <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
      <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
      <methodref name="ParentToClient" visibility="public"/>
      <methodref name="SendToBack" visibility="public"/>
      <methodref name="SetBounds" visibility="public" procflags="virtual"/>
      <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
      <methodref name="SetParentComponent" visibility="public" procflags="override"/>
      <methodref name="Show" visibility="public"/>
      <methodref name="Update" visibility="public" procflags="virtual"/>
      <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
      <methodref name="UseRightToLeftReading" visibility="public"/>
      <methodref name="UseRightToLeftScrollBar" visibility="public"/>
      <methodref name="DefaultHandler" visibility="public" procflags="override"/>
      <methodref name="GetTextBuf" visibility="public"/>
      <methodref name="GetTextLen" visibility="public"/>
      <methodref name="Perform" visibility="public" procflags="overload"/>
      <methodref name="Perform" visibility="public" procflags="overload"/>
      <methodref name="SetTextBuf" visibility="public"/>
      <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
      <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleRectSize" visibility="public"/>
      <propertyref name="Action" visibility="public"/>
      <propertyref name="Align" visibility="public"/>
      <propertyref name="Anchors" visibility="public"/>
      <propertyref name="BiDiMode" visibility="public"/>
      <propertyref name="BoundsRect" visibility="public"/>
      <propertyref name="ClientHeight" visibility="public"/>
      <propertyref name="ClientOrigin" visibility="public"/>
      <propertyref name="ClientRect" visibility="public"/>
      <propertyref name="ClientWidth" visibility="public"/>
      <propertyref name="Constraints" visibility="public"/>
      <propertyref name="ControlState" visibility="public"/>
      <propertyref name="ControlStyle" visibility="public"/>
      <propertyref name="CurrentPPI" visibility="public"/>
      <propertyref name="DockOrientation" visibility="public"/>
      <propertyref name="ExplicitLeft" visibility="public"/>
      <propertyref name="ExplicitTop" visibility="public"/>
      <propertyref name="ExplicitWidth" visibility="public"/>
      <propertyref name="ExplicitHeight" visibility="public"/>
      <propertyref name="Floating" visibility="public"/>
      <propertyref name="FloatingDockSiteClass" visibility="public"/>
      <propertyref name="HostDockSite" visibility="public"/>
      <propertyref name="LRDockWidth" visibility="public"/>
      <propertyref name="ScaleFactor" visibility="public"/>
      <propertyref name="ShowHint" visibility="public"/>
      <propertyref name="TBDockHeight" visibility="public"/>
      <propertyref name="Touch" visibility="public"/>
      <propertyref name="UndockHeight" visibility="public"/>
      <propertyref name="UndockWidth" visibility="public"/>
      <propertyref name="Visible" visibility="public"/>
      <eventref name="WindowProc" visibility="public"/>
      <propertyref name="Parent" visibility="public"/>
      <propertyref name="StyleElements" visibility="public"/>
      <propertyref name="StyleName" visibility="public"/>
      <eventref name="OnGesture" visibility="public"/>
      <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
      <propertyref name="AlignWithMargins" visibility="published"/>
      <propertyref name="Left" visibility="published"/>
      <propertyref name="Top" visibility="published"/>
      <propertyref name="Width" visibility="published"/>
      <propertyref name="Height" visibility="published"/>
      <propertyref name="Cursor" visibility="published"/>
      <propertyref name="Hint" visibility="published"/>
      <propertyref name="HelpType" visibility="published"/>
      <propertyref name="HelpKeyword" visibility="published"/>
      <propertyref name="HelpContext" visibility="published"/>
      <propertyref name="Margins" visibility="published"/>
      <propertyref name="CustomHint" visibility="published"/>
      <propertyref name="ParentCustomHint" visibility="published"/>
      <ancestor name="TComponent" namespace="System.Classes">
        <interfaces>
          <implements name="IInterfaceComponentReference"/>
          <implements name="IInterface"/>
        </interfaces>
        <methodref name="GetComObject" visibility="private">
        </methodref>
        <methodref name="GetComponent" visibility="private">
        </methodref>
        <methodref name="GetComponentCount" visibility="private">
        </methodref>
        <methodref name="GetComponentIndex" visibility="private">
        </methodref>
        <methodref name="Insert" visibility="private">
        </methodref>
        <methodref name="ReadLeft" visibility="private">
        </methodref>
        <methodref name="ReadTop" visibility="private">
        </methodref>
        <methodref name="Remove" visibility="private">
        </methodref>
        <methodref name="RemoveNotification" visibility="private">
        </methodref>
        <methodref name="SetComponentIndex" visibility="private">
        </methodref>
        <methodref name="SetReference" visibility="private">
        </methodref>
        <methodref name="WriteLeft" visibility="private">
        </methodref>
        <methodref name="WriteTop" visibility="private">
        </methodref>
        <methodref name="IntfGetComponent" visibility="private">
        </methodref>
        <methodref name="DoGetDeltaStreams" visibility="private">
        </methodref>
        <methodref name="ReadDeltaStream" visibility="private">
        </methodref>
        <methodref name="ReadDeltaState" visibility="private">
        </methodref>
        <methodref name="FindSortedComponent" visibility="private">
        </methodref>
        <methodref name="AddSortedComponent" visibility="private">
        </methodref>
        <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
        </methodref>
        <methodref name="Create@" visibility="class private" procflags="class constructor noself">
        </methodref>
        <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ChangeName" visibility="protected">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetChildren" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="override">
        </methodref>
        <methodref name="Loaded" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Notification" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="ReadState" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="CanObserve" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetObservers" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAncestor" visibility="protected">
        </methodref>
        <methodref name="SetDesigning" visibility="protected">
        </methodref>
        <methodref name="SetInline" visibility="protected">
        </methodref>
        <methodref name="SetDesignInstance" visibility="protected">
        </methodref>
        <methodref name="SetName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Updating" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Updated" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
        </methodref>
        <methodref name="ValidateRename" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="WriteState" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="RemoveFreeNotifications" visibility="protected">
        </methodref>
        <methodref name="QueryInterface" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="_AddRef" visibility="protected">
        </methodref>
        <methodref name="_Release" visibility="protected">
        </methodref>
        <methodref name="GetTypeInfoCount" visibility="protected">
        </methodref>
        <methodref name="GetTypeInfo" visibility="protected">
        </methodref>
        <methodref name="GetIDsOfNames" visibility="protected">
        </methodref>
        <methodref name="Invoke" visibility="protected">
        </methodref>
        <eventref name="OnGetDeltaStreams" visibility="protected">
        </eventref>
        <methodref name="Create" visibility="public" procflags="constructor virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndFunctionInvoke" visibility="public">
        </methodref>
        <methodref name="DestroyComponents" visibility="public">
        </methodref>
        <methodref name="Destroying" visibility="public">
        </methodref>
        <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="FindComponent" visibility="public">
        </methodref>
        <methodref name="FreeNotification" visibility="public">
        </methodref>
        <methodref name="RemoveFreeNotification" visibility="public">
        </methodref>
        <methodref name="FreeOnRelease" visibility="public">
        </methodref>
        <methodref name="GetEnumerator" visibility="public" procflags="inline">
        </methodref>
        <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="override">
        </methodref>
        <methodref name="HasParent" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="InsertComponent" visibility="public">
        </methodref>
        <methodref name="RemoveComponent" visibility="public">
        </methodref>
        <methodref name="SetSubComponent" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="override">
        </methodref>
        <methodref name="UpdateAction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="IsImplementorOf" visibility="public">
        </methodref>
        <methodref name="ReferenceInterface" visibility="public">
        </methodref>
        <propertyref name="ComObject" visibility="public">
        </propertyref>
        <propertyref name="Components" visibility="public">
        </propertyref>
        <propertyref name="ComponentCount" visibility="public">
        </propertyref>
        <propertyref name="ComponentIndex" visibility="public">
        </propertyref>
        <propertyref name="ComponentState" visibility="public">
        </propertyref>
        <propertyref name="ComponentStyle" visibility="public">
        </propertyref>
        <propertyref name="DesignInfo" visibility="public">
        </propertyref>
        <propertyref name="Owner" visibility="public">
        </propertyref>
        <propertyref name="VCLComObject" visibility="public">
        </propertyref>
        <propertyref name="Observers" visibility="public">
        </propertyref>
        <propertyref name="Name" visibility="published">
        </propertyref>
        <propertyref name="Tag" visibility="published">
        </propertyref>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="RM_AsyncMessage" type="Cardinal" visibility="private" varflags="class" file="Vcl.Controls.pas" line="2253"/>
      <field name="FAlignControlList" type="TList" visibility="private" size="4" offset="464" file="Vcl.Controls.pas" line="2255"/>
      <field name="FAlignLevel" type="Word" visibility="private" size="2" offset="468" file="Vcl.Controls.pas" line="2256"/>
      <field name="FBevelEdges" type="TBevelEdges" visibility="private" size="1" offset="470" file="Vcl.Controls.pas" line="2257"/>
      <field name="FBevelInner" type="TBevelCut" visibility="private" size="1" offset="471" file="Vcl.Controls.pas" line="2258"/>
      <field name="FBevelOuter" type="TBevelCut" visibility="private" size="1" offset="472" file="Vcl.Controls.pas" line="2259"/>
      <field name="FBevelKind" type="TBevelKind" visibility="private" size="1" offset="473" file="Vcl.Controls.pas" line="2260"/>
      <field name="FBevelWidth" type="TBevelWidth" visibility="private" size="4" offset="476" file="Vcl.Controls.pas" line="2261"/>
      <field name="FBorderWidth" type="TBorderWidth" visibility="private" size="4" offset="480" file="Vcl.Controls.pas" line="2262"/>
      <field name="FPadding" type="TPadding" visibility="private" size="4" offset="484" file="Vcl.Controls.pas" line="2263"/>
      <field name="FBrush" type="TBrush" visibility="private" size="4" offset="488" file="Vcl.Controls.pas" line="2264"/>
      <field name="FDockClients" type="TList" visibility="private" size="4" offset="492" file="Vcl.Controls.pas" line="2265"/>
      <field name="FDockManager" type="IDockManager" visibility="private" size="4" offset="496" file="Vcl.Controls.pas" line="2266"/>
      <field name="FImeMode" type="TImeMode" visibility="private" size="1" offset="500" file="Vcl.Controls.pas" line="2267"/>
      <field name="FImeName" type="TImeName" visibility="private" size="4" offset="504" file="Vcl.Controls.pas" line="2268"/>
      <field name="FParentWindow" type="HWND" visibility="private" size="4" offset="508" file="Vcl.Controls.pas" line="2269"/>
      <field name="FTabList" type="TList" visibility="private" size="4" offset="512" file="Vcl.Controls.pas" line="2270"/>
      <field name="FTipMode" type="TTipMode" visibility="private" size="1" offset="516" file="Vcl.Controls.pas" line="2271"/>
      <field name="FControls" type="TList" visibility="private" size="4" offset="520" file="Vcl.Controls.pas" line="2272"/>
      <field name="FWinControls" type="TList" visibility="private" size="4" offset="524" file="Vcl.Controls.pas" line="2273"/>
      <field name="FTabOrder" type="Integer" visibility="private" size="4" offset="528" file="Vcl.Controls.pas" line="2274"/>
      <field name="FTabStop" type="Boolean" visibility="private" size="1" offset="532" file="Vcl.Controls.pas" line="2275"/>
      <field name="FTIPIntf" type="IInterface" visibility="private" size="4" offset="536" file="Vcl.Controls.pas" line="2276"/>
      <field name="FCtl3D" type="Boolean" visibility="private" size="1" offset="540" file="Vcl.Controls.pas" line="2277"/>
      <field name="FShowing" type="Boolean" visibility="private" size="1" offset="541" file="Vcl.Controls.pas" line="2278"/>
      <field name="FUseDockManager" type="Boolean" visibility="private" size="1" offset="542" file="Vcl.Controls.pas" line="2279"/>
      <field name="FDockSite" type="Boolean" visibility="private" size="1" offset="543" file="Vcl.Controls.pas" line="2280"/>
      <field name="FParentCtl3D" type="Boolean" visibility="private" size="1" offset="544" file="Vcl.Controls.pas" line="2281"/>
      <field name="FParentDoubleBuffered" type="Boolean" visibility="private" size="1" offset="545" file="Vcl.Controls.pas" line="2282"/>
      <field name="FPerformingShowingChanged" type="Boolean" visibility="private" size="1" offset="546" file="Vcl.Controls.pas" line="2283"/>
      <field name="FOnDockDrop" type="TDockDropEvent" visibility="private" size="8" offset="552" file="Vcl.Controls.pas" line="2284"/>
      <field name="FOnDockOver" type="TDockOverEvent" visibility="private" size="8" offset="560" file="Vcl.Controls.pas" line="2285"/>
      <field name="FOnEnter" type="TNotifyEvent" visibility="private" size="8" offset="568" file="Vcl.Controls.pas" line="2286"/>
      <field name="FOnExit" type="TNotifyEvent" visibility="private" size="8" offset="576" file="Vcl.Controls.pas" line="2287"/>
      <field name="FOnGetSiteInfo" type="TGetSiteInfoEvent" visibility="private" size="8" offset="584" file="Vcl.Controls.pas" line="2288"/>
      <field name="FOnKeyDown" type="TKeyEvent" visibility="private" size="8" offset="592" file="Vcl.Controls.pas" line="2289"/>
      <field name="FOnKeyPress" type="TKeyPressEvent" visibility="private" size="8" offset="600" file="Vcl.Controls.pas" line="2290"/>
      <field name="FOnKeyUp" type="TKeyEvent" visibility="private" size="8" offset="608" file="Vcl.Controls.pas" line="2291"/>
      <field name="FOnUnDock" type="TUnDockEvent" visibility="private" size="8" offset="616" file="Vcl.Controls.pas" line="2292"/>
      <field name="FOnAlignInsertBefore" type="TAlignInsertBeforeEvent" visibility="private" size="8" offset="624" file="Vcl.Controls.pas" line="2293"/>
      <field name="FOnAlignPosition" type="TAlignPositionEvent" visibility="private" size="8" offset="632" file="Vcl.Controls.pas" line="2294"/>
      <field name="FMouseInClient" type="Boolean" visibility="private" size="1" offset="640" file="Vcl.Controls.pas" line="2295"/>
      <field name="FMouseControl" type="TControl" visibility="private" size="4" offset="644" file="Vcl.Controls.pas" line="2296"/>
      <field name="FTouchControl" type="TControl" visibility="private" size="4" offset="648" file="Vcl.Controls.pas" line="2297"/>
      <field name="FDefWndProc" type="Pointer" visibility="private" size="4" offset="652" file="Vcl.Controls.pas" line="2301"/>
      <field name="FHandle" type="HWND" visibility="private" size="4" offset="656" file="Vcl.Controls.pas" line="2302"/>
      <field name="FObjectInstance" type="Pointer" visibility="private" size="4" offset="660" file="Vcl.Controls.pas" line="2303"/>
      <field name="FDrawLockCount" type="Cardinal" visibility="private" size="4" offset="664" file="Vcl.Controls.pas" line="2305"/>
      <procedure name="AlignControl" visibility="private" file="Vcl.Controls.pas" line="2306">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="CalcConstraints" visibility="private" file="Vcl.Controls.pas" line="2307">
        <parameters>
          <parameter name="MinWidth" type="Integer" paramflags="var"/>
          <parameter name="MinHeight" type="Integer" paramflags="var"/>
          <parameter name="MaxWidth" type="Integer" paramflags="var"/>
          <parameter name="MaxHeight" type="Integer" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="DoPaddingChange" visibility="private" file="Vcl.Controls.pas" line="2308">
        <parameters>
          <parameter name="Sender" type="TObject"/>
        </parameters>
      </procedure>
      <function name="GetAlignDisabled" visibility="private" file="Vcl.Controls.pas" line="2309">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetControl" visibility="private" file="Vcl.Controls.pas" line="2310">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TControl"/>
        </parameters>
      </function>
      <function name="GetControlCount" visibility="private" file="Vcl.Controls.pas" line="2311">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetDockClientCount" visibility="private" file="Vcl.Controls.pas" line="2312">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetDockClients" visibility="private" file="Vcl.Controls.pas" line="2313">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <retval type="TControl"/>
        </parameters>
      </function>
      <function name="GetHandle" visibility="private" file="Vcl.Controls.pas" line="2314">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      </function>
      <function name="GetParentBackground" visibility="private" procflags="inline" file="Vcl.Controls.pas" line="2315">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetTabOrder" visibility="private" file="Vcl.Controls.pas" line="2316">
        <parameters>
          <retval type="TTabOrder"/>
        </parameters>
      </function>
      <function name="GetVisibleDockClientCount" visibility="private" file="Vcl.Controls.pas" line="2317">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="Insert" visibility="private" file="Vcl.Controls.pas" line="2318">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="InvalidateFrame" visibility="private" file="Vcl.Controls.pas" line="2319">
      </procedure>
      <procedure name="InvokeHelp" visibility="private" file="Vcl.Controls.pas" line="2320">
      </procedure>
      <function name="IsCtl3DStored" visibility="private" file="Vcl.Controls.pas" line="2321">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="IsDoubleBufferedStored" visibility="private" file="Vcl.Controls.pas" line="2322">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="PrecedingWindow" visibility="private" file="Vcl.Controls.pas" line="2323">
        <parameters>
          <parameter name="Control" type="TWinControl"/>
          <retval type="HWND"/>
        </parameters>
      </function>
      <procedure name="ReadDesignSize" visibility="private" file="Vcl.Controls.pas" line="2324">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="ReadPixelsPerInch" visibility="private" file="Vcl.Controls.pas" line="2325">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      </procedure>
      <procedure name="Remove" visibility="private" file="Vcl.Controls.pas" line="2326">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="RemoveFocus" visibility="private" file="Vcl.Controls.pas" line="2327">
        <parameters>
          <parameter name="Removing" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetBevelCut" visibility="private" file="Vcl.Controls.pas" line="2328">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="Value" type="TBevelCut" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBevelEdges" visibility="private" file="Vcl.Controls.pas" line="2329">
        <parameters>
          <parameter name="Value" type="TBevelEdges" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBevelKind" visibility="private" file="Vcl.Controls.pas" line="2330">
        <parameters>
          <parameter name="Value" type="TBevelKind" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBevelWidth" visibility="private" file="Vcl.Controls.pas" line="2331">
        <parameters>
          <parameter name="Value" type="TBevelWidth" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetBorderWidth" visibility="private" file="Vcl.Controls.pas" line="2332">
        <parameters>
          <parameter name="Value" type="TBorderWidth"/>
        </parameters>
      </procedure>
      <procedure name="SetCtl3D" visibility="private" file="Vcl.Controls.pas" line="2333">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetDockSite" visibility="private" file="Vcl.Controls.pas" line="2334">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetDoubleBuffered" visibility="private" file="Vcl.Controls.pas" line="2335">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetPadding" visibility="private" file="Vcl.Controls.pas" line="2336">
        <parameters>
          <parameter name="Value" type="TPadding" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="SetParentCtl3D" visibility="private" file="Vcl.Controls.pas" line="2337">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetParentWindow" visibility="private" file="Vcl.Controls.pas" line="2338">
        <parameters>
          <parameter name="Value" type="HWND"/>
        </parameters>
      </procedure>
      <procedure name="SetTabOrder" visibility="private" file="Vcl.Controls.pas" line="2339">
        <parameters>
          <parameter name="Value" type="TTabOrder"/>
        </parameters>
      </procedure>
      <procedure name="SetTabStop" visibility="private" file="Vcl.Controls.pas" line="2340">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetUseDockManager" visibility="private" file="Vcl.Controls.pas" line="2341">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="SetZOrderPosition" visibility="private" file="Vcl.Controls.pas" line="2342">
        <parameters>
          <parameter name="Position" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="UpdateTabOrder" visibility="private" file="Vcl.Controls.pas" line="2343">
        <parameters>
          <parameter name="Value" type="TTabOrder"/>
        </parameters>
      </procedure>
      <procedure name="UpdateShowing" visibility="private" file="Vcl.Controls.pas" line="2344">
      </procedure>
      <procedure name="WriteDesignSize" visibility="private" file="Vcl.Controls.pas" line="2345">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <procedure name="WritePixelsPerInch" visibility="private" file="Vcl.Controls.pas" line="2346">
        <parameters>
          <parameter name="Writer" type="TWriter"/>
        </parameters>
      </procedure>
      <function name="IsMenuKey" visibility="private" file="Vcl.Controls.pas" line="2347">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetIsDrawingLocked" visibility="private" file="Vcl.Controls.pas" line="2348">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetRedrawDisabled" visibility="private" file="Vcl.Controls.pas" line="2349">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="WMInputLangChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2350">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMInputLangChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2351">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMPaint" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2352">
        <parameters>
          <parameter name="Message" type="TWMPaint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMCommand" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2353">
        <parameters>
          <parameter name="Message" type="TWMCommand" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNotify" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2354">
        <parameters>
          <parameter name="Message" type="TWMNotify" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSysColorChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2355">
        <parameters>
          <parameter name="Message" type="TWMNoParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMHScroll" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2356">
        <parameters>
          <parameter name="Message" type="TWMScroll" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMVScroll" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2357">
        <parameters>
          <parameter name="Message" type="TWMScroll" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMCompareItem" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2358">
        <parameters>
          <parameter name="Message" type="TWMCompareItem" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMDeleteItem" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2359">
        <parameters>
          <parameter name="Message" type="TWMDeleteItem" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMDrawItem" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2360">
        <parameters>
          <parameter name="Message" type="TWMDrawItem" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMeasureItem" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2361">
        <parameters>
          <parameter name="Message" type="TWMMeasureItem" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMEraseBkgnd" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2362">
        <parameters>
          <parameter name="Message" type="TWMEraseBkgnd" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMWindowPosChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2363">
        <parameters>
          <parameter name="Message" type="TWMWindowPosMsg" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMWindowPosChanging" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2364">
        <parameters>
          <parameter name="Message" type="TWMWindowPosMsg" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSize" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2365">
        <parameters>
          <parameter name="Message" type="TWMSize" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMove" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2366">
        <parameters>
          <parameter name="Message" type="TWMMove" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSetCursor" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2367">
        <parameters>
          <parameter name="Message" type="TWMSetCursor" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMKeyDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2368">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSysKeyDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2369">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMKeyUp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2370">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSysKeyUp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2371">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMChar" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2372">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSysCommand" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2373">
        <parameters>
          <parameter name="Message" type="TWMSysCommand" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMCharToItem" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2374">
        <parameters>
          <parameter name="Message" type="TWMCharToItem" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMParentNotify" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2375">
        <parameters>
          <parameter name="Message" type="TWMParentNotify" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMVKeyToItem" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2376">
        <parameters>
          <parameter name="Message" type="TWMCharToItem" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMDestroy" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2377">
        <parameters>
          <parameter name="Message" type="TWMNoParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMMouseActivate" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2378">
        <parameters>
          <parameter name="Message" type="TWMMouseActivate" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCCalcSize" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2379">
        <parameters>
          <parameter name="Message" type="TWMNCCalcSize" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCDestroy" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2380">
        <parameters>
          <parameter name="Message" type="TWMNoParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCHitTest" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2381">
        <parameters>
          <parameter name="Message" type="TWMNCHitTest" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCPaint" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2382">
        <parameters>
          <parameter name="Message" type="TWMNCPaint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMQueryNewPalette" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2383">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMPaletteChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2384">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMWinIniChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2385">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMFontChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2386">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMTimeChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2387">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMSetFocus" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2388">
        <parameters>
          <parameter name="Message" type="TWMSetFocus" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMKillFocus" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2389">
        <parameters>
          <parameter name="Message" type="TWMKillFocus" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMIMEStartComp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2390">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMIMEEndComp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2391">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMContextMenu" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2392">
        <parameters>
          <parameter name="Message" type="TWMContextMenu" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMGesture" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2393">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMGestureNotify" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2394">
        <parameters>
          <parameter name="Message" type="TWMGestureNotify" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2395">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2396">
        <parameters>
          <parameter name="Message" type="TCMChanged" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMChildKey" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2397">
        <parameters>
          <parameter name="Message" type="TCMChildKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDialogKey" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2398">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDialogChar" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2399">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMVisibleChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2400">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMEnabledChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2401">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMColorChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2402">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMFontChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2403">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMBorderChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2404">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMCursorChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2405">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMCtl3DChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2406">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentCtl3DChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2407">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMParentDoubleBufferedChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2408">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMShowingChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2409">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMShowHintChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2410">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMEnter" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2411">
        <parameters>
          <parameter name="Message" type="TWMNoParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMExit" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2412">
        <parameters>
          <parameter name="Message" type="TWMNoParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDesignHitTest" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2413">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMSysColorChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2414">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMSysFontChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2415">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMSysFontsAllChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2416">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMWinIniChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2417">
        <parameters>
          <parameter name="Message" type="TWMWinIniChange" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMFontChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2418">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMTimeChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2419">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDrag" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2420">
        <parameters>
          <parameter name="Message" type="TCMDrag" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMRemoteSessionStatusChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2421">
        <parameters>
          <parameter name="Message" type="TCMRemoteSessionStatusChanged" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CNKeyDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2422">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CNKeyUp" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2423">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CNChar" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2424">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CNSysKeyDown" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2425">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CNSysChar" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2426">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMRecreateWnd" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2427">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMSysCommand" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2428">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMInvalidate" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2429">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMBiDiModeChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2430">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDoubleBufferedChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2431">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMTextChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2432">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMPrintClient" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2433">
        <parameters>
          <parameter name="Message" type="TWMPrint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMTabletOptionsChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2434">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMFocusChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2436">
        <parameters>
          <parameter name="Message" type="TCMFocusChanged" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMControlListChange" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2437">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMControlListChanging" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2438">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMDockClient" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2439">
        <parameters>
          <parameter name="Message" type="TCMDockClient" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMUnDockClient" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2440">
        <parameters>
          <parameter name="Message" type="TCMUnDockClient" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMFloat" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2441">
        <parameters>
          <parameter name="Message" type="TCMFloat" paramflags="var"/>
        </parameters>
      </procedure>
      <field name="FPixelsPerInch" type="Integer" visibility="protected" size="4" offset="668" file="Vcl.Controls.pas" line="2452"/>
      <field name="FDoubleBuffered" type="Boolean" visibility="protected" size="1" offset="672" file="Vcl.Controls.pas" line="2453"/>
      <field name="FDoubleBufferedSaved" type="Boolean" visibility="protected" size="1" offset="673" file="Vcl.Controls.pas" line="2454"/>
      <field name="FInImeComposition" type="Boolean" visibility="protected" size="1" offset="674" file="Vcl.Controls.pas" line="2455"/>
      <field name="FDesignSize" type="TPoint" visibility="protected" size="8" offset="676" file="Vcl.Controls.pas" line="2456"/>
      <field name="FAsyncList" type="TList" visibility="protected" size="4" offset="684" file="Vcl.Controls.pas" line="2463">
        <devnotes>
           <summary>
              Internal list of pending Asynchronous method calls for this Win control and child TControl instances.
           </summary>
        </devnotes>
      </field>
      <procedure name="InvokeAsyncCalls" visibility="protected" file="Vcl.Controls.pas" line="2468">
        <devnotes><summary>
Processes pending asynchronous method calls listed in FAsyncList.
The Handle of the control calls InvokeAsyncCalls as a result of a specific message that the  Handle retrieves.

Note: InvokeAsyncCalls synchronizes the access to FAsyncList. It prohibits other threads from accessing it until the calling one calls Exit.</summary></devnotes>
      </procedure>
      <procedure name="UpdateStyleElements" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2469">
      <devnotes><summary>
Called when the StyleElements property changes.
Vcl.Controls.TWinControl.UpdateStyleElements inherits from Vcl.Controls.TControl.UpdateStyleElements. All content below this line refers to Vcl.Controls.TControl.UpdateStyleElements.
Called when the StyleElements property changes.
Override the UpdateStyleElements method in a descendant class to provide customized behavior for the control when the value of the StyleElements property changes. 
</summary></devnotes></procedure>
      <procedure name="AsyncSchedule" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2470">
        <parameters>
          <parameter name="AsyncResult" type="TBaseAsyncResult" paramflags="const"/>
        </parameters>
      <devnotes><summary>


Schedules asynch method calls.
Vcl.Controls.TWinControl.AsyncSchedule inherits from System.Classes.TComponent.AsyncSchedule. All content below this line refers to System.Classes.TComponent.AsyncSchedule.
Schedules asynch method calls.
By default, AsyncSchedule uses Queue in order to queue the asynch method call with the main thread.
Override AsyncSchedule in descendant components in order to modify the management of the asynchronous scheduling.

 See Also
System.Classes.TComponent.BeginInvoke
System.Classes.TBaseAsyncResult
System.Classes.TBaseAsyncResult.Schedule

</summary></devnotes></procedure>
      <procedure name="ActionChange" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2471">
        <parameters>
          <parameter name="Sender" type="TObject"/>
          <parameter name="CheckDefaults" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Updates the control to reflect changes in its associated action.
ActionChange is called automatically when the associated action changes. It updates the control to reflect the action's current Caption, Enabled, Hint, Visible, and HelpContext properties and its OnClick event handler.
The Sender parameter is the associated action. The CheckDefaults parameter specifies whether properties and event handlers should be changed if they differ from the default values. When CheckDefaults is true, properties and event handlers are only changed when the current values are the default values (that is, when the values have not been previously changed). When CheckDefaults is false, properties and event handlers are changed, regardless of their current values.
</summary></devnotes></procedure>
      <procedure name="AddBiDiModeExStyle" visibility="protected" file="Vcl.Controls.pas" line="2472">
        <parameters>
          <parameter name="ExStyle" type="Cardinal" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Sets control's window style according to its bi-directional support.
The CreateParams method calls AddBiDiModeExStyle to update the control's style flags (passed as the ExStyle parameter) according the control's bi-directional support. AddBiDiModeExStyle uses the UseRightToLeftReading, UseRightToLeftScrollBar, UseRightToLeftAlignment, and GetControlsAlignment methods to determine the current bi-directional support.
</summary></devnotes></procedure>
      <procedure name="AssignTo" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2473">
        <parameters>
          <parameter name="Dest" type="TPersistent"/>
        </parameters>
      <devnotes><summary>
Copies the properties of the windowed control to another object.
Do not call the protected AssignTo method. Instead, applications call the Assign method to copy the properties of another object. If the object's Assign method does not include the ability to copy from the source object, the Assign method calls the source object's protected AssignTo method, to copy the source objects properties to the object specified by the Dest parameter. This allows objects to expand the abilities of another object's Assign method to copy from additional sources.
The AssignTo method implemented in TWinControl copies the Caption, Enabled, Hint, Visible, and HelpContext properties and the OnClick event handler to a TCustomAction object.
</summary></devnotes></procedure>
      <procedure name="AdjustClientRect" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2474">
        <parameters>
          <parameter name="Rect" type="TRect" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Provides the interface that adjusts the ClientRect property for idiosyncrasies of the window.
AdjustClientRect is called internally when the control needs accurate information on where to place child controls within the client area. As implemented in TWinControl, AdjustClientRect does nothing. Override this method in descendants such as TTabControl where the ClientRect property is not the same as the region in which child objects can appear. 
</summary></devnotes></procedure>
      <procedure name="AdjustSize" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2475">
      <devnotes><summary>
Adjusts the control's size according to its contents and constraints.
If the AutoSize property is true, AdjustSize is called automatically when the control needs to automatically resize itself to its contents. As implemented in TWinControl, AdjustSize calls SetBounds with the values of its Left, Top, Width, and Height properties. This call can result in a change of size if these values are altered in the control's OnCanResize or OnConstrainedResize event handlers, or if the control's OnResize event handler makes any final adjustments.
Descendant classes override AdjustSize to change the size of the control to adjust to its contents.
Component writers may call AdjustSize when making changes to a control's contents.
</summary></devnotes></procedure>
      <procedure name="AlignControls" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2476">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="Rect" type="TRect" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Aligns any controls for which the control is the parent within a specified area of the control.
Use AlignControls to align all controls within an area of a form, panel, group box, scroll box, or any container control. Specify the area in which to align the controls as the value of the Rect parameter.
AlignControls uses the Align property value for each child control to determine how to align it. The AControl parameter can be nil (Delphi) or NULL (C++). If you specify a control in AControl, that control takes precedence in alignment over other, similarly-aligned controls.
</summary></devnotes></procedure>
      <procedure name="ArrangeControl" visibility="protected" file="Vcl.Controls.pas" line="2477">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="ParentSize" type="TPoint" paramflags="const"/>
          <parameter name="AAlign" type="TAlign"/>
          <parameter name="AAlignInfo" type="TAlignInfo"/>
          <parameter name="Rect" type="TRect" paramflags="var"/>
          <parameter name="UpdateAnchorOrigin" type="Boolean">
            <value>
              False
            </value>
          </parameter>
        </parameters>
      <devnotes><summary>
Aligns the given control with the specified alignment options.
ArrangeControl is a protected method used internally by AlignControls to align each control, with the specified alignment options. 
To be more specific, ArrangeControl aligns the control given by AControl, with the alignment options specified through the parameters ParentSize, AAlign, AAlignInfo, Rect, and UpdateAnchorOrigin. The meaning of these parameters is summarized in the following table.





Parameter

Meaning



ParentSize



The size of the parent control within which AControl is aligned.




AAlign



Determines how AControl aligns within its parent control.




AAlignInfo



Describes the alignment details of AControl within its parent.




Rect



The rectangular area inside the parent control in which to align AControl.




UpdateAnchorOrigin



Specifies whether to update the anchor origin of AControl, following the alignment.




</summary></devnotes></procedure>
      <function name="CanAutoSize" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2479">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates how the control can be resized.
CanAutoSize is called automatically when the AutoSize property is true and an attempt is made to resize the control. It allows controls to implement the AutoSize property before the resize sequence that begins with the OnCanResize and OnConstrainedResize events and ends with the OnResize event.
When CanAutoSize is called, the NewWidth and NewHeight parameters indicate the proposed new dimensions of the control. CanAutoSize adjusts these values so that the control's size adjusts to its contents. If the adjustment results in values of NewWidth and NewHeight that differ from the control's current width and height, CanAutoSize returns true, indicating that the resize sequence should proceed. If, after adjustment, NewWidth and NewHeight equal Width and Height, CanAutoSize returns false, and the resize sequence is aborted.
As implemented in TWinControl, CanAutoSize returns true, adjusting NewWidth and NewHeight so that all the control's children fit.
</summary></devnotes></function>
      <function name="CanResize" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2480">
        <parameters>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates how the control can respond to a resize attempt.
CanResize is called automatically when an attempt is made to resize the control. The NewWidth and NewHeight parameters specify the attempted new values for the control's height and width. CanResize returns true if the control can be resized to the returned values of NewWidth and NewHeight. CanResize returns false if the control can't be resized.
CanResize generates an OnCanResize event. An OnCanResize event handler may change the values of NewHeight and NewWidth.
</summary></devnotes></function>
      <procedure name="ChangeScale" visibility="protected" procflags="overload override" file="Vcl.Controls.pas" line="2481">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
          <parameter name="isDpiChange" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Resize and reposition children and self.
ChangeScale rescales the control in the same manner as the ChangeScale method in TControl. If the control contains any children, their ChangeScale methods are called before the parent itself is rescaled.
To rescale the control's children without rescaling the control itself, use ScaleControls. To rescale the control without repositioning, use ScaleBy.
</summary></devnotes></procedure>
      <procedure name="ConstrainedResize" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2482">
        <parameters>
          <parameter name="MinWidth" type="Integer" paramflags="var"/>
          <parameter name="MinHeight" type="Integer" paramflags="var"/>
          <parameter name="MaxWidth" type="Integer" paramflags="var"/>
          <parameter name="MaxHeight" type="Integer" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Generates an OnConstrainedResize event.
ConstrainedResize is called automatically as part of a control's resize sequence. It generates an OnConstrainedResize event, passing in the MinWidth, MinHeight, MaxWidth, and MaxHeight parameters, which can be altered by the event handler before they are applied to the attempted resize.
</summary></devnotes></procedure>
      <procedure name="ControlsAligned" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2484">
      <devnotes><summary>
ControlsAligned automatically executes after a call to AlignControls.
Implement ControlsAligned in descendant classes to display a notification, after aligning the controls by a call to AlignControls. 

Note:  As a member of the TWinControl class, ControlsAligned has no effect. </summary></devnotes></procedure>
      <function name="CreateDockManager" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2485">
        <parameters>
          <retval type="IDockManager"/>
        </parameters>
      <devnotes><summary>
Creates the dock manager for the control.
CreateDockManager is called automatically during drag-and-dock operations when the UseDockManager property is true. CreateDockManager creates the object that implements the DockManager property.
Override CreateDockManager to create a custom dock manager for the control.
</summary></devnotes></function>
      <procedure name="CreateHandle" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2486">
      <devnotes><summary>
Creates underlying screen object.
CreateHandle creates the Microsoft Windows screen object that underlies the control. if it does not already exist. The new window handle becomes the value of the Handle property.
CreateHandle creates or locates the parent control's window before it creates a window for the control itself.

Note:  If the Parent property is nil (Delphi) or NULL (C++), CreateHandle raises an exception.</summary></devnotes></procedure>
      <procedure name="CreateParams" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2487">
        <parameters>
          <parameter name="Params" type="TCreateParams" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Initializes a window-creation parameter data structure.
The CreateWnd method calls CreateParams to initialize the parameters it passes to CreateWindowHandle. Override CreateParams to customize the way a control creates its Windows representation. When overriding CreateParams, always call the inherited method first to set the default values, then make any desired adjustments.
CreateParams fills in the parameter that is passed as the value of the Params parameter. This data structure holds information needed when telling Windows to create a window handle. The fields of a TCreateParams record become the parameters to a call to the CreateWindowEx API function.
TWinControl implements CreateParams by setting all the fields of Params to generic base values. A number of the standard controls override CreateParams to change one or more of the default values in Params.
</summary></devnotes></procedure>
      <procedure name="CreateWindowHandle" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2488">
        <parameters>
          <parameter name="Params" type="TCreateParams" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Creates a Windows control to represent the control.
The CreateWnd method calls CreateWindowHandle to create the window for a control. CreateWindowHandle creates the window by calling the CreateWindowEx API function, passing parameters from the record passed in the Params parameter. Once the window is created, its handle is available as the Handle property.
</summary></devnotes></procedure>
      <procedure name="CreateWnd" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2489">
      <devnotes><summary>
Creates the underlying window.
CreateWnd is called automatically when the control is first created or when the underlying screen object must be destroyed and recreated to reflect property changes. Override CreateWnd to pass additional initialization messages to the screen object when it is created.
</summary></devnotes></procedure>
      <function name="CustomAlignInsertBefore" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2490">
        <parameters>
          <parameter name="C1" type="TControl"/>
          <parameter name="C2" type="TControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns placement order of custom-aligned child control.
CustomAlignInsertBefore determines the order in which custom-aligned child controls are placed. The control calls CustomAlignInsertBefore once for each pair of child controls with an Align property of alCustom. CustomAlignInsertBefore returns true if C2 should be presented before C1, and false otherwise.
Once the custom-aligned child controls are sorted, their specific positions are determined by calls to CustomAlignPosition. 
CustomAlignInsertBefore triggers the OnAlignInsertBefore event. If this event is defined, CustomAlignInsertBefore returns the value returned by OnAlignInsertBefore. Defining this event allows users to define the order of control alignment without overriding CustomAlignInsertBefore.
As implemented in TWinControl, CustomAlignInsertBefore returns false if OnAlignInsertBefore is not implemented, so the controls are placed in the order they appear in the Controls property.
</summary></devnotes></function>
      <procedure name="CustomAlignPosition" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2491">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="NewLeft" type="Integer" paramflags="var"/>
          <parameter name="NewTop" type="Integer" paramflags="var"/>
          <parameter name="NewWidth" type="Integer" paramflags="var"/>
          <parameter name="NewHeight" type="Integer" paramflags="var"/>
          <parameter name="AlignRect" type="TRect" paramflags="var"/>
          <parameter name="AlignInfo" type="TAlignInfo"/>
        </parameters>
      <devnotes><summary>
Returns aligned position of custom-aligned child control.
CustomAlignPosition determines the specific position of custom-aligned child controls. CustomAlignPosition is called once for each child control with an Align property of alCustom, in an order previously determined by calls to CustomAlignInsertBefore.
CustomAlignPosition triggers the OnAlignPosition event. If this event is defined, CustomAlignPosition uses the alignment parameters it obtains from OnAlignPosition. Defining this event allows users to set the alignment parameters without overriding CustomAlignPosition.
These are the parameters:





Control

The child control being placed.



NewLeft | NewTop | NewWidth | NewHeight



Location and size of child control, as determined by container's size and the Anchors TControl_Anchors constraints for the control. CustomAlignPosition can modify these values to reposition the control.




AlignRect



The client area in which the control is aligned. CustomAlignPosition can modify this value.




AlignInfo



Alignment information in a TAlignInfo.




As implemented in TWinControl, CustomAlignPosition does nothing. 






</summary></devnotes></procedure>
      <procedure name="DefineProperties" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2493">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
        </parameters>
      <devnotes><summary>
Provides methods to read and write the IsControl property to a stream such as a form file.
Vcl.Controls.TWinControl.DefineProperties inherits from Vcl.Controls.TControl.DefineProperties. All content below this line refers to Vcl.Controls.TControl.DefineProperties.
Provides methods to read and write the IsControl property to a stream such as a form file.
DefineProperties is called automatically by the streaming system that loads and saves VCL components. It allows persistent objects to read and write properties that are not published. Published properties are loaded and stored automatically.
DefineProperties uses the methods of the filer passed as the Filer parameter to assign methods that can load and save the IsControl property.
Override DefineProperties to persist unpublished properties. Call the DefineBinaryProperty or DefineProperty method of the Filer parameter to assign methods that load or save property values.

Note:  When overriding this method, call the parent class's DefineProperties method first.</summary></devnotes></procedure>
      <procedure name="DestroyHandle" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2494">
      <devnotes><summary>
Destroys the control's window without destroying the control.
Call DestroyHandle to dispose of the window, but leave the control intact. The control can later recreate the window if needed. DestroyHandle is the converse operation to CreateHandle. Applications should call the high-level CreateHandle and DestroyHandle methods, rather than the lower-level methods of CreateWnd and DestroyWnd, whenever possible.
If the control has TWinControl objects as child controls, DestroyHandle calls each of their DestroyHandle methods before calling DestroyWnd to destroy its own handle.
</summary></devnotes></procedure>
      <procedure name="DestroyWindowHandle" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2495">
      <devnotes><summary>
Destroys the window created in the CreateWindowHandle method.
Call DestroyWindowHandle to dispose of the window for the control.
TWinControl's Destroy method calls DestroyWindowHandle to destroy any window associated with a windowed control before destroying the object. The DestroyWnd method also calls DestroyWindowHandle.
</summary></devnotes></procedure>
      <procedure name="DestroyWnd" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2496">
      <devnotes><summary>
Destroys the control's window.
DestroyWnd is called when the control needs to replace its window. For example, changing properties that are implemented by window parameter settings require the control to be destroyed and then recreated using the CreateWnd method. 
Before the window is destroyed, DestroyWnd saves a copy of the control's text in memory, frees any device contexts, and finally calls DestroyWindowHandle. When the window is recreated, the stored copy of the control's text is assigned to the new window.
</summary></devnotes></procedure>
      <procedure name="DoAddDockClient" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2497">
        <parameters>
          <parameter name="Client" type="TControl"/>
          <parameter name="ARect" type="TRect" paramflags="const"/>
        </parameters>
      <devnotes><summary>
Performs actions when a control is docked to the windowed control.
DoAddDockClient is called automatically when a client control is docked to the windowed control. As implemented in TWinControl, DoAddDockClient sets the client's Parent property to the control.
Client is the control that has been docked.
ARect describes the boundaries of the region where Client has been docked.
Override DoAddDockClient to perform actions when a control is docked to the windowed control.

Note: DoAddDockClient is called in response to a message sent by the DockDrop method, before the OnDockDrop event.</summary></devnotes></procedure>
      <procedure name="DockOver" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2498">
        <parameters>
          <parameter name="Source" type="TDragDockObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="State" type="TDragState"/>
          <parameter name="Accept" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Responds when a docking client is dragged over the windowed control.
DockOver is called automatically for dock sites when a dockable object is dragged over them. As implemented in TWinControl, DockOver positions the docking rectangle and then calls DoDockOver to generate an OnDockOver event.
Override DockOver to perform additional actions when another control is dragged over the control.
DockOver is called only if DockSite is true.
</summary></devnotes></procedure>
      <function name="DockReplaceDockClient" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2500">
        <parameters>
          <parameter name="Client" type="TControl"/>
          <parameter name="NewDockSite" type="TWinControl"/>
          <parameter name="DropControl" type="TControl"/>
          <parameter name="ControlSide" type="TAlign"/>
          <parameter name="ReplacementClient" type="TControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Invalidates the first dock site in the list of child controls.
Currently, DockReplaceDockClient always returns False and has no effect as a member of the TWinControl class. 
Implement DockReplaceDockClient in descendant classes in order to manually replace Client with ReplacementClient. Also, manually dock Client to NewDockSite on the control specified by DropControl and using the alignment options given in ControlSide.


</summary></devnotes></function>
      <procedure name="DoDockOver" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2503">
        <parameters>
          <parameter name="Source" type="TDragDockObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="State" type="TDragState"/>
          <parameter name="Accept" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Generates an OnDockOver event.
DoDockOver is called by the DockOver method to generate an OnDockOver event when the user drags a dockable control over the windowed control. Override this method to perform some other action or to suppress the event.
</summary></devnotes></procedure>
      <procedure name="DoEnter" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2505">
      <devnotes><summary>
Respond to receiving input focus.
DoEnter is called automatically when the control receives the input focus. As implemented in TWinControl, DoEnter calls the OnEnter event handler, if defined.
Descendant classes that override DoEnter should always call the inherited method.
</summary></devnotes></procedure>
      <procedure name="DoExit" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2506">
      <devnotes><summary>
Responds to losing input focus.
DoExit is called automatically when the control loses the input focus. As implemented in TWinControl, DoExit calls the OnExit event handler, if defined.
Descendant classes that override DoExit should always call the inherited method.
</summary></devnotes></procedure>
      <procedure name="DoFlipChildren" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2507">
      <devnotes><summary>
Flips the control's children.
The FlipChildren method calls DoFlipChildren to reverse the positions of child controls. DoFlipChildren moves the control's children to opposite positions on the control; that is, children on the left side of the control are moved to the right side of the control and vice versa.
Override FlipChildren to control how the control's children are flipped.

Note: DoFlipChildren is a protected helper method for the public FlipChildren method. Unlike FlipChildren, DoFlipChildren does not adjust the alignment of controls that are aligned to one of the edges of the windowed control.</summary></devnotes></procedure>
      <function name="DoWritePixelsPerInch" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2508">
        <parameters>
          <parameter name="Filer" type="TFiler"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="DoKeyDown" visibility="protected" file="Vcl.Controls.pas" line="2509">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Performs some preprocessing before generating an OnKeyDown event.
The return value from DoKeyDown determines if the control should continue processing key-down messages passed in the Message parameter. A return value of true indicates that the key-down occurrence has been handled completely, and no further processing is needed. A return value of false indicates that the application should continue passing the key-down message through the inherited processing.
DoKeyDown checks whether the KeyPreview property of the parent form is true; if so, it allows the form to preemptively process key-down messages before they are handled by the windowed control. If the form does not handle the message, DoKeyDown translates the message parameters into the appropriate types and calls KeyDown, which in turn calls the OnKeyDown event handler, if any. 
</summary></devnotes></function>
      <function name="DoKeyPress" visibility="protected" file="Vcl.Controls.pas" line="2510">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Performs some preprocessing before generating an OnKeyPress event.
The return value from DoKeyPress determines whether the control should continue processing the key-press message passed in the Message parameter. A return value of true indicates that the key-press occurrence has been handled completely, and no further processing is needed. A return value of false indicates that the application should continue passing the key-press message through the inherited processing.
DoKeyPress checks whether the KeyPreview property of the parent form is true, and if so, allows the form to preemptively process key-press messages before they are handled by the windowed control. If the form does not handle the message, DoKeyPress translates the message parameters into the appropriate types and calls KeyPress, which in turn calls the OnKeyPress event handler, if any.
</summary></devnotes></function>
      <function name="DoKeyUp" visibility="protected" file="Vcl.Controls.pas" line="2511">
        <parameters>
          <parameter name="Message" type="TWMKey" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Performs some preprocessing before generating an OnKeyUp event.
The return value from DoKeyUp determines whether the control should continue processing the key-up message passed in the Message parameter. A return value of true indicates that the key-up occurrence has been handled completely, and no further processing is needed. A return value of false indicates that the application should continue passing the key-up message through the inherited processing.
DoKeyUp checks whether the KeyPreview property of the parent form is true, and if so, allows the form to preemptively process key-up messages before they are handled by the windowed control. If the form does not handle the message, DoKeyUp translates the message parameters into the appropriate types and calls KeyUp, which in turn calls the OnKeyUp event handler, if any.
</summary></devnotes></function>
      <function name="DoHandleStyleMessage" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2512">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="DoRemoveDockClient" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2513">
        <parameters>
          <parameter name="Client" type="TControl"/>
        </parameters>
      <devnotes><summary>
Responds when a control is undocked from the windowed control.
DoRemoveDockClient is called automatically when a client control is undocked from the windowed control. As implemented in TWinControl, DoRemoveDockClient does nothing.
Client is the control that has been undocked.
Override DoRemoveDockClient to perform any necessary adjustments when a control is undocked from the windowed control.

Note: DoRemoveDockClient occurs at the end of the undocking process. To make changes when undocking starts, override the DoUnDock method instead.</summary></devnotes></procedure>
      <function name="DoUnDock" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2514">
        <parameters>
          <parameter name="NewTarget" type="TWinControl"/>
          <parameter name="Client" type="TControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Undocks a control that is currently docked to the windowed control.
DoUnDock is called automatically when a control is undocked from the windowed control. It handles all necessary changes to the windowed control to accomplish the undocking. These are
1.Generates an OnUnDock event.
2.If there is no OnUnDock event handler, or if the event handler indicates that the client can be undocked, it removes the client from the DockClients property list.
The NewTarget parameter indicates the new host to which the undocked control is moving.
The Client parameter indicates the control to be undocked from the windowed control.
DoUnDock returns true if the client is successfully undocked, false if the undocking attempt was blocked by an OnUnDock event handler.
Override DoUnDock to change the way controls are undocked from the windowed control.

Note: DoUnDock occurs at the start of the undocking process. To handle changes when undocking is complete, override the DoRemoveDockClient method instead.</summary></devnotes></function>
      <function name="FindNextControl" visibility="protected" file="Vcl.Controls.pas" line="2515">
        <parameters>
          <parameter name="CurControl" type="TWinControl"/>
          <parameter name="GoForward" type="Boolean"/>
          <parameter name="CheckTabStop" type="Boolean"/>
          <parameter name="CheckParent" type="Boolean"/>
          <retval type="TWinControl"/>
        </parameters>
      <devnotes><summary>
Returns the control's next child in the tab order after the specified control.
Call FindNextControl to find the next child control in the tab order after CurControl. If CurControl is not a child of the control, FindNextControl returns the first child control in the tab order.
The GoForward parameter controls the direction of the search. If GoForward is true, FindNextControl searches forward through the child controls in tab order. If Go Forward is false, FindNextControl searches backward through the controls.
The CheckTabStop and CheckParent parameters control whether FindNextControl performs certain checks on the controls it finds. If CheckTabStop is true, the returned control must have its TabStop property set to true. If CheckParent is true, the returned control's Parent property must indicate the parent control.
FindNextControl calls the GetTabOrderList method to build its list of possible &quot;next&quot; controls.
</summary></devnotes></function>
      <procedure name="FixupTabList" visibility="protected" file="Vcl.Controls.pas" line="2517">
      <devnotes><summary>
Sorts the child controls by their tab order.
Applications should not call FixupTabList directly. The ReadState method calls FixupTabList to initialize the tab order list based on the TabOrder properties of the child controls being read from a stream.
</summary></devnotes></procedure>
      <function name="GetActionLinkClass" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2518">
        <parameters>
          <retval type="TControlActionLinkClass"/>
        </parameters>
      <devnotes><summary>
Returns the associated action link class.
GetActionLinkClass returns the appropriate class type for the action link used with a control. This class is used internally to create an action link object for the control when it has an associated action. The action link links the action to the control client. Each Action link class is designed to link specific properties and event handlers of the action to its client, based on the types of properties the client supports.
As implemented in TWinControl, GetActionLinkClass returns the TWinControlActionLink class type, which associates the HelpContext, ShowHint, Caption, Enabled and Visible properties and the OnClick event handler. Descendants of TWinControl override this method to specify a descendant of TControlActionLink that handles their configuration of properties and events.
</summary></devnotes></function>
      <function name="GetClientOrigin" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2519">
        <parameters>
          <retval type="TPoint"/>
        </parameters>
      <devnotes><summary>
Returns the value of the ClientOrigin property.
GetClientOrigin is the protected implementation of the ClientOrigin property.
GetClientOrigin returns a point indicating the position of the top-left corner of the control in screen coordinates. 
</summary></devnotes></function>
      <function name="GetClientRect" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2520">
        <parameters>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Returns the value of the ClientRect property.
GetClientRect is the protected implementation of the ClientRect property. GetClientRect returns a rectangle with the rectangle's Top and Left fields set to zero, and its Bottom and Right fields set to the control's ClientHeight and ClientWidth, respectively. 
</summary></devnotes></function>
      <function name="GetDPIForDesigner" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2521">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetControlExtents" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2522">
        <parameters>
          <retval type="TRect"/>
        </parameters>
      <devnotes><summary>
Returns the smallest rectangle in which all the control's children fit.
Call GetControlExtents to determine the smallest rectangle in which all the control's children fit. Windowed controls call GetControlExtents when implementing the AutoSize property.
</summary></devnotes></function>
      <function name="GetDeviceContext" visibility="protected" procflags="overload override" file="Vcl.Controls.pas" line="2523">
        <parameters>
          <parameter name="WindowHandle" type="HWND" paramflags="var"/>
          <retval type="HDC"/>
        </parameters>
      <devnotes><summary>
Provides access to a device context for the control.
Call GetDeviceContext to obtain a handle to a device context for the control.
GetDeviceContext calls the Windows API function GetDC, passing the windowed control's Handle property. It returns the window's handle in the WindowHandle parameter and the HDC as the return value. If the call is unsuccessful, the EOutOfResources exception is raised.
</summary></devnotes></function>
      <function name="GetParentHandle" visibility="protected" file="Vcl.Controls.pas" line="2524">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      <devnotes><summary>
Returns the window handle for the window of the control's parent.
Use the handle returned by GetParentHandle as a parameter to Windows API function calls that need the window handle for the parent window of the control. If the Parent property is not nil (Delphi) or NULL (C++), GetParentHandle returns the Handle property of the parent control. If the Parent property is nil (Delphi) or NULL (C++), GetParentHandle returns the value of ParentWindow.
</summary></devnotes></function>
      <procedure name="GetSiteInfo" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2525">
        <parameters>
          <parameter name="Client" type="TControl"/>
          <parameter name="InfluenceRect" type="TRect" paramflags="var"/>
          <parameter name="MousePos" type="TPoint"/>
          <parameter name="CanDock" type="Boolean" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Generates an OnGetSiteInfo event.
GetSiteInfo is called automatically during drag-and-dock operations to initialize a TDragDockObject with information about where a dragged object can be docked, if at all.
Client is a potential docking client.
InfluenceRect returns the area in which the client would be docked.
MousePos is the current mouse position.
CanDock returns whether the client can dock to the windowed control.
As implemented in TWinControl, GetSiteInfo generates an influence rectangle equal to BoundsRect expanded by 10 pixels on every side, and then calls the OnGetSiteInfo event handler.
</summary></devnotes></procedure>
      <function name="GetTopParentHandle" visibility="protected" file="Vcl.Controls.pas" line="2527">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      <devnotes><summary>
Returns the window handle of the first window not associated with a VCL control that contains the windowed control.
Use GetTopParentHandle to access the handle of the window that is hosting the windowed control. GetTopParentHandle walks up the containers of the windowed control until it finds a control whose Parent property is nil (Delphi) or NULL (C++). If that topmost parent is contained in a non-VCL window (its ParentWindow is nonzero), GetTopParentHandle returns the non-VCL window. If the windowed control is not contained in a non-VCL window, GetTopParentHandle returns the windowed control's own window handle.
</summary></devnotes></function>
      <procedure name="InvalidateDockHostSite" visibility="protected" file="Vcl.Controls.pas" line="2528">
        <parameters>
          <parameter name="FocusLost" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Invalidates the first dock site that appears in the list of child controls.
Call InvalidateDockHostSite to invalidate the first dock site that appears in the list of child controls.


</summary></devnotes></procedure>
      <function name="IsControlMouseMsg" visibility="protected" file="Vcl.Controls.pas" line="2529">
        <parameters>
          <parameter name="Message" type="TWMMouse" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether a specified mouse message is directed to one of the windowed control's child controls.
Call IsControlMouseMsg to find out if a mouse message is directed to one of the control's child controls. Specify the mouse message as the value of the Message parameter.
Windows takes care of sending messages to windowed child controls, but for nonwindowed child controls, Windows sends the messages to the parent control, which must then determine which, if any, of its child controls should receive the message.
The WndProc method of a windowed control calls IsControlMouseMsg to process all mouse message sent to the windowed control.
</summary></devnotes></function>
      <function name="IsControlActivateMsg" visibility="protected" file="Vcl.Controls.pas" line="2530">
        <parameters>
          <parameter name="Message" type="TWMMouseActivate" paramflags="var"/>
          <parameter name="Control" type="TControl">
            <value>
              nil
            </value>
          </parameter>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether a specified mouse activation message is directed to the given child control.
Call IsControlActivateMsg to find out whether a mouse activation message is directed to the child control given by the Control parameter. Specify the mouse activation message as the value of the Message parameter.
The WndProc method of a windowed control calls IsControlActivateMsg to process all mouse activation messages sent to the windowed control. 
</summary></devnotes></function>
      <function name="IsQualifyingSite" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2531">
        <parameters>
          <parameter name="Client" type="TControl" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Checks whether the control is docked inside another control or has at least two docked controls.
IsQualifyingSite is a protected method that returns true if either the given Client control is docked inside another control, or there are at least two controls docked inside Client.
</summary></devnotes></function>
      <procedure name="KeyDown" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2532">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Responds to key press events.
When a windowed control receives a key-down message (WM_KEYDOWN) from Windows, its message handler calls the DoKeyDown method. If DoKeyDown determines that the control should, in fact, process the character, it calls KeyDown, passing the key code and shift-key state in the Key and Shift parameters, respectively.
KeyDown calls any event handler attached to the OnKeyDown event. Override KeyDown to provide other responses in addition to the event handler call.
The Key parameter is the key on the keyboard. For nonalphanumeric keys, you must use WinAPI virtual key codes to determine the key pressed. For more information see Representing Keys and Shortcuts.
The Shift parameter indicates whether the SHIFT, ALT, or CTRL keys are combined with the keystroke.
Either KeyDown or the OnKeyDown event handler it calls can suppress further processing of a key by setting the Key parameter to zero.
</summary></devnotes></procedure>
      <procedure name="KeyUp" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2533">
        <parameters>
          <parameter name="Key" type="Word" paramflags="var"/>
          <parameter name="Shift" type="TShiftState"/>
        </parameters>
      <devnotes><summary>
Respond to released key.
When a windowed control receives a key-up message (WM_KEYUP) from Windows, its message handler calls the DoKeyUp method. If DoKeyUp determines that the control should, in fact, process the character, it calls KeyUp, passing the key code and shift-key state to KeyUp in the Key and Shift parameters, respectively.
KeyUp calls any event handler attached to the OnKeyUp event. Override KeyUp to provide other responses in addition to the event-handler call.
Either KeyUp or the OnKeyUp event handler it calls can suppress further processing of a key by setting the Key parameter to zero.
The Key parameter is the key on the keyboard. For non-alphanumeric keys, use WinAPI virtual key codes to determine the key pressed. For more information, see Representing Keys and Shortcuts.
The Shift parameter indicates whether the Shift, Alt, or Ctrl keys are combined with the keystroke.
</summary></devnotes></procedure>
      <procedure name="KeyPress" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2534">
        <parameters>
          <parameter name="Key" type="Char" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Responds to keyboard input.
When a windowed control receives a key-press message (WM_CHAR) from Windows, its message handler calls the DoKeyPress method. If DoKeyPress determines that the control should, in fact, process the character, it calls KeyPress, passing the key code in the Key parameter.
KeyPress calls any event handler attached to the OnKeyPress event. Override KeyPress to provide other responses in addition to the event handler call.
Either KeyPress or the OnKeyPress event handler it calls can suppress further processing of a character by setting the Key parameter to zero.

Note: The Key parameter is the character represented by the key that is pressed, not a Windows virtual key code.</summary></devnotes></procedure>
      <procedure name="MainWndProc" visibility="protected" file="Vcl.Controls.pas" line="2535">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Receives Windows messages for the control.
MainWndProc is the window procedure for the control that is associated with the control's window when it is created. When Windows sends a message to the control's window, MainWndProc receives it.
MainWndProc does not process or dispatch the messages itself, but rather calls the method specified by WindowProc to do that. MainWndProc provides an exception-handling block around WindowProc, ensuring that if any unhandled exceptions occur during the processing of a message, the application's HandleException method will handle them.
</summary></devnotes></procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2536">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      <devnotes><summary>
Responds to notifications indicating that components are being created or destroyed.
Vcl.Controls.TWinControl.Notification inherits from Vcl.Controls.TControl.Notification. All content below this line refers to Vcl.Controls.TControl.Notification.
Responds to notifications indicating that components are being created or destroyed.
Notification allows TControl to update its internal state if an associated component is removed. The internal state is updated if: 

The associated pop-up menu is destroyed.
The control docking site is destroyed.
The custom hint associated with the control is destroyed.
The associated gesture manager is destroyed.
Override the Notification method to respond to notifications indicating that other components are about to be destroyed or have just been created. Use the Notification method to update controls that rely on other objects. Data-aware objects override the Notification method to update themselves when their data source is removed. Some objects respond to notifications indicating that other objects of a specific type are being created. For example, the session component sets the Session property of new data-aware controls to itself when the AutoSessionName property is True. 
By default, components pass along the notification to their owned components, if any.
</summary></devnotes></procedure>
      <procedure name="NotifyControls" visibility="protected" file="Vcl.Controls.pas" line="2537">
        <parameters>
          <parameter name="Msg" type="Word"/>
        </parameters>
      <devnotes><summary>
Sends a message to all the child controls.
NotifyControls sends a message with the message ID passed in the Msg parameter to all the controls in the windowed control's Controls array property. NotifyControls is used to update all the controls in a form of such occurrences as changes in the parent color or font. 
NotifyControls constructs a generic message record, filling its message ID field with the value of Msg and setting its parameter and result fields to zeros, then calls the Broadcast method to send the message to all the child controls.
</summary></devnotes></procedure>
      <procedure name="PaintControls" visibility="protected" file="Vcl.Controls.pas" line="2538">
        <parameters>
          <parameter name="DC" type="HDC"/>
          <parameter name="First" type="TControl"/>
        </parameters>
      <devnotes><summary>
Paints each of the child controls in a windowed control using the specified device context.
Call PaintControls to paint all the child controls of this control. Pass the device context as the value of the DC parameter. The First parameter indicates the starting point in the windowed control's child-control list to paint. If First is nil (Delphi) or NULL (C++) or does not indicate one of the child controls, PaintControls paints all the child controls.
The Repaint method calls PaintControls for the control's parent, passing the control in First to repaint the control and any controls it might intersect. PaintHandler also calls PaintControls after calling PaintWindow.
</summary></devnotes></procedure>
      <procedure name="PaintHandler" visibility="protected" file="Vcl.Controls.pas" line="2539">
        <parameters>
          <parameter name="Message" type="TWMPaint" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Responds to WM_PAINT messages.
PaintHandler is called automatically when the control receives a WM_PAINT message. It calls the BeginPaint and EndPaint API functions, and between them paints the control's background by calling PaintWindow and any child controls by calling PaintControls.
</summary></devnotes></procedure>
      <procedure name="PaintWindow" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2540">
        <parameters>
          <parameter name="DC" type="HDC"/>
        </parameters>
      <devnotes><summary>
Renders the image of a windowed control.
Call PaintWindow to repaint the control. PaintWindow sends a WM_PAINT message to the windowed control's DefaultHandler method, setting the message record's WParam field to the value passed in DC and the other parameter and result fields to zeros.
</summary></devnotes></procedure>
      <function name="PaletteChanged" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2541">
        <parameters>
          <parameter name="Foreground" type="Boolean"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Responds to changes in the system's palette by realizing the control's palette and the palette for each child control.
PaletteChanged is called automatically when the Windows system palette changes. TWinControl responds to these notifications by trying to realize the windowed control's palette, if any, into the current device context, and then passing on the PaletteChanged notification to each of the child controls in turn. If the change in the system palette causes the actual value of the control's palette to change, PaletteChanged will invalidate the control so that it can repaint with the new palette.
Windows paints the active window with a foreground palette, while other windows are forced to use background palettes. Background palettes are approximate matches to the colors specified by the control's logical palette, given the limitations imposed by implementing the foreground palette. Windows only allows a single foreground palette.
PaletteChanged allows the control to obtain a new realization of its palette when the system palette changes. When Foreground is true, the form has been activated and the control is specifying the new foreground palette. When Foreground is false, another application or form has changed the foreground palette, and controls that are sensitive to the available palette should realize new background palettes to best match their logical palettes.
If the control does not have a logical palette to be realized into the current device context, GetPalette will return a handle of 0, and PaletteChanged will not try to realize a palette for the windowed control. Instead, it simply passes the notification on to the child controls. If the windowed control or any of its child controls realize a palette into the current device context in response to PaletteChanged, this method returns true.
Override PaletteChanged to change the way in which controls are given an opportunity to realize a new palette when the Windows system palette changes. For example, override PaletteChanged to change the order in which child controls realize their palettes, giving a particular control the foreground palette when the form is activated, or to pass palette change notification to custom controls implemented outside of the VCL, such as in DLLs.
Override GetPalette instead to affect whether the windowed control actually has a palette to realize, or to change the value of the control's logical palette.

Note: PaletteChanged is called only when the run-time video mode requires palette support, such as for 256 color mode, but not 16 million color mode.</summary></devnotes></function>
      <procedure name="ReadState" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2542">
        <parameters>
          <parameter name="Reader" type="TReader"/>
        </parameters>
      <devnotes><summary>
Prepares the control for having its properties assigned values from a stream.
Override ReadState to change the preparations the control makes as it readies itself to have its property values assigned from a stream. For example, a control might destroy temporary internal data structures or objects before new instances are loaded from the stream. Be sure to include a call to the inherited method when overriding ReadState.
As implemented in TWinControl, ReadState disables control alignment until all the child controls have been read from the stream, calls the inherited ReadState method, and re-enables the alignment of all the controls. The method then builds the tab order list of controls and synchronizes its visibility with that of its parent control.
</summary></devnotes></procedure>
      <procedure name="RecreateWnd" visibility="protected" file="Vcl.Controls.pas" line="2543">
      <devnotes><summary>
Recreate underlying Windows screen object.
Call RecreateWnd to recreate the control from scratch. RecreateWnd destroys the underlying Windows screen object. The next time the Handle property is referenced (when the object is repainted, for example), a new Windows screen object is created. Some changes in control properties are not implemented until this re-creation occurs.
</summary></devnotes></procedure>
      <procedure name="ReloadDockedControl" visibility="protected" procflags="dynamic" file="Vcl.Controls.pas" line="2544">
        <parameters>
          <parameter name="AControlName" type="string" paramflags="const"/>
          <parameter name="AControl" type="TControl" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Reloads a docked control.
Use ReloadDockedControl to obtain a reference to control given its name. The AControlName parameter is the name of the child control. The corresponding control is returned as the AControl parameter. ReloadDockedControl can only locate a control if it has the same Owner as the windowed control.
The dock manager calls ReloadDockedControl to obtain a control reference that it then docks to the windowed control.
</summary></devnotes></procedure>
      <procedure name="ResetIme" visibility="protected" procflags="overload inline" file="Vcl.Controls.pas" line="2546">
      <devnotes><summary>
Restores the input method editor (IME) that was active when the application started.
For controls that specify the ImeName property, call ResetIme to revert to the IME that was active when the application started. If the IME was deactivated by setting the ImeMode property to imDisable, ResetIme restarts the default IME.
Applications cannot call ResetIme. ResetIme is called automatically when the control loses input focus. It is exposed as a protected method so descendant objects can restore the default IME at other times.
</summary></devnotes></procedure>
      <procedure name="ResetIme" visibility="protected" procflags="overload virtual" file="Vcl.Controls.pas" line="2547">
        <parameters>
          <parameter name="hWnd" type="HWND"/>
        </parameters>
      <devnotes><summary>
Restores the input method editor (IME) that was active when the application started.
For controls that specify the ImeName property, call ResetIme to revert to the IME that was active when the application started. If the IME was deactivated by setting the ImeMode property to imDisable, ResetIme restarts the default IME.
Applications cannot call ResetIme. ResetIme is called automatically when the control loses input focus. It is exposed as a protected method so descendant objects can restore the default IME at other times.
</summary></devnotes></procedure>
      <function name="ResetImeComposition" visibility="protected" file="Vcl.Controls.pas" line="2548">
        <parameters>
          <parameter name="Action" type="Cardinal"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Directs the composition window of the input method editor (IME) to perform a specific action.
Call ResetImeComposition to direct what the composition window does with the input typed by the user. The composition window is the window displayed by the IME that provides feedback to the user about what keystrokes have been typed, and how they are converted into asian characters. 
The Action parameter indicates what the composition window should do with its current contents. Action can have one of the following values:





Value

Meaning



CPS_CANCEL



Clear the composition string and set the status to no composition string.




CPS_COMPLETE



Set the composition string as the result string.




CPS_CONVERT



Convert the composition string.




CPS_REVERT



Cancel the current composition string and revert to the unconverted string.




ResetImeComposition returns true if the composition window performs the requested action.
</summary></devnotes></function>
      <procedure name="RequestAlign" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2549">
      <devnotes><summary>
Instructs the parent of a control to reposition the control, enforcing its Align property.
Vcl.Controls.TWinControl.RequestAlign inherits from Vcl.Controls.TControl.RequestAlign. All content below this line refers to Vcl.Controls.TControl.RequestAlign.
Instructs the parent of a control to reposition the control, enforcing its Align property.
Controls call RequestAlign internally when changes are made to the size or position of the control, so that they remain properly aligned within the parent control. Do not call RequestAlign in application code.
</summary></devnotes></procedure>
      <procedure name="ScaleControlsForDpi" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2551">
        <devnotes><summary>
Scales all the contained controls to the NewPPI value. 


</summary></devnotes>
        <parameters>
          <parameter name="NewPPI" type="Integer"/>
        </parameters>
      </procedure>
      <function name="GetCurrentPPIScreen" visibility="protected" file="Vcl.Controls.pas" line="2552">
        <parameters>
          <parameter name="AControl" type="TWinControl" paramflags="const">
            <value>
              nil
            </value>
          </parameter>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <function name="GetPixelsPerInch" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2553">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <procedure name="SetPixelsPerInch" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2554">
        <parameters>
          <parameter name="Value" type="Integer"/>
        </parameters>
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="ScaleControls" visibility="protected" file="Vcl.Controls.pas" line="2555">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
        </parameters>
      <devnotes><summary>
Rescale child controls only.
Call ScaleControls to rescale only the children of the control, while leaving the control itself the same size. The parameters have the same meaning as in the ScaleBy method.
</summary></devnotes></procedure>
      <procedure name="ScalePadding" visibility="protected" file="Vcl.Controls.pas" line="2556">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
        </parameters>
      <devnotes><summary>
Scales the control padding to the given ratio.
Call ScalePadding to scale the padding coordinates of the control to the given M/D ratio.
</summary></devnotes></procedure>
      <procedure name="SelectFirst" visibility="protected" file="Vcl.Controls.pas" line="2557">
      <devnotes><summary>
Locates first selectable child control.
Call SelectFirst to find the first child that can be selected within the control's tab order. SelectFirst calls the FindNextControl method, passing nil (Delphi) or NULL (C++) as the current control. Once the first selectable control is found, SelectFirst makes the control the active control on the form.
</summary></devnotes></procedure>
      <procedure name="SelectNext" visibility="protected" file="Vcl.Controls.pas" line="2558">
        <parameters>
          <parameter name="CurControl" type="TWinControl"/>
          <parameter name="GoForward" type="Boolean"/>
          <parameter name="CheckTabStop" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Moves the input focus from the current child control to the next one in the tab order.
Call SelectNext to move the child control focus. SelectNext selects the first child that follows or precedes CurControl in the tab order and that meets the criteria specified in the other parameters.
The GoForward parameter controls the direction of the search. If GoForward is true, FindNextControl searches forward through the child controls in tab order. If GoForward is false, SelectNext searches backward through the controls. The search wraps past the end of the collection back to CurControl.
The CheckTabStop parameter controls whether the control SelectNext finds must be a tab stop. If CheckTabStop is true, the returned control must have its TabStop property set to true, or the search for the next control continues.
If a child control matches the search criteria, that control obtains the focus. If no such child control is found, the focus remains unchanged.
</summary></devnotes></procedure>
      <procedure name="SetChildOrder" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2560">
        <parameters>
          <parameter name="Child" type="TComponent"/>
          <parameter name="Order" type="Integer"/>
        </parameters>
      <devnotes><summary>
Changes the order in which the child component appears in the list of child components returned by the GetChildren method.
Use SetChildOrder when you want to change the order in which child objects are streamed in. Specify the child component whose order you want to change as the value of the Child parameter. Indicate the position you want the component to be in as the value of the Order parameter.
When SetChildOrder is called, items previously below the child's old position move up, and those below the new position move down.
</summary></devnotes></procedure>
      <procedure name="SetIme" visibility="protected" procflags="overload inline" file="Vcl.Controls.pas" line="2561">
      <devnotes><summary>
Activates an input method editor (IME) using the values specified by the ImeMode and ImeName properties.
Applications cannot call SetIme. SetIme is called automatically when the control receives input focus. It is exposed as a protected method so that descendant objects can cause the ImeMode and ImeName properties to take effect at other times.
</summary></devnotes></procedure>
      <procedure name="SetIme" visibility="protected" procflags="overload virtual" file="Vcl.Controls.pas" line="2562">
        <parameters>
          <parameter name="hWnd" type="HWND"/>
        </parameters>
      <devnotes><summary>
Activates an input method editor (IME) using the values specified by the ImeMode and ImeName properties.
Applications cannot call SetIme. SetIme is called automatically when the control receives input focus. It is exposed as a protected method so that descendant objects can cause the ImeMode and ImeName properties to take effect at other times.
</summary></devnotes></procedure>
      <function name="SetImeCompositionWindow" visibility="protected" file="Vcl.Controls.pas" line="2563">
        <parameters>
          <parameter name="Font" type="TFont"/>
          <parameter name="XPos" type="Integer"/>
          <parameter name="YPos" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sets the position and font of the composition window.
Call SetImeComposition to change the position or font of the composition window. The composition window is the window displayed by the input method editor (IME) that provides feedback to the user about what keystrokes have been typed, and how they are converted into asian characters.
The Font parameter describes the font that the composition window should use. Setting the Font parameter to nil (Delphi) or NULL (C++) repositions the composition window without changing the font. XPos and YPos specify the desired global coordinates for the composition window.
SetImeCompositionWindow returns true if the font and position are successfully assigned.
</summary></devnotes></function>
      <procedure name="SetParent" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2564">
        <parameters>
          <parameter name="AParent" type="TWinControl"/>
        </parameters>
      <devnotes><summary>
Sets the parent of the control.
Vcl.Controls.TWinControl.SetParent inherits from Vcl.Controls.TControl.SetParent. All content below this line refers to Vcl.Controls.TControl.SetParent.
Sets the parent of the control.
SetParent is the protected implementation of the Parent property. Override SetParent to execute additional code when the value of the Parent property changes.
The AParent parameter specifies the new parent of the control.
If the control already has a parent, SetParent removes the control from that parent's list of controls by calling the parent's RemoveControl method. If AParent is not nil (Delphi) or NULL (C++), SetParent calls its InsertControl method to add the control to its list of controls.
The TControl destructor calls SetParent(nil (Delphi) or NULL (C++)) to remove the control from its parent's control list before destroying the component.
</summary></devnotes></procedure>
      <procedure name="SetParentBackground" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2565">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sets the ParentBackground property.
SetParentBackground is a protected method that sets the value of ParentBackground. 
</summary></devnotes></procedure>
      <procedure name="SetParentDoubleBuffered" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2566">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Sets the ParentBackground property.
SetParentDoubleBuffered is a protected method that sets the value of ParentDoubleBuffered. 
</summary></devnotes></procedure>
      <procedure name="SetZOrder" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2567">
        <parameters>
          <parameter name="TopMost" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Moves the control to the top or bottom of the parent control's (or screen's) list of TWinControl controls.
Use SetZOrder to rearrange overlapping controls within a parent control or (if the control has no parent) overlapping windows on the screen. If the TopMost parameter is true, the control becomes the top control; otherwise, it becomes the bottom control. 
TWinControl controls always stack on top of other controls, regardless of the Z order.
After changing the order, SetZOrder invalidates the control to ensure repainting to reflect the new order.
</summary></devnotes></procedure>
      <procedure name="ShowControl" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2568">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      <devnotes><summary>
Ensures that a specified child control is visible.
Call ShowControl to display a child control. Specify the control you want to ensure will be visible as the value of the AControl parameter.
As implemented in TWinControl, ShowControl simply calls the ShowControl method of the control's parent. Derived objects override ShowControl to perform whatever actions are necessary to allow the indicated child object to be visible. Possible actions include scrolling the particular child object into view, or changing to the appropriate notebook page.
</summary></devnotes></procedure>
      <procedure name="UpdateBounds" visibility="protected" file="Vcl.Controls.pas" line="2569">
      <devnotes><summary>
Updates the bounds of the control.
UpdateBounds is a protected method that updates the bounds of the control.


</summary></devnotes></procedure>
      <procedure name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2570">
        <parameters>
          <parameter name="AControl" type="TControl"/>
          <parameter name="AOriginalParentSize" type="TPoint" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Updates the original size of the parent control.
UpdateControlOriginalParentSize is a protected method that updates the original size of the parent control. It is used internally to update the anchor rules of the control.


</summary></devnotes></procedure>
      <procedure name="UpdateRecreatingFlag" visibility="protected" file="Vcl.Controls.pas" line="2571">
        <parameters>
          <parameter name="Recreating" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Toggles the csRecreating flag in the ControlState property.
Switches on or off the csRecreating flag in the ControlState property, if the Recreating parameter is True or False, correspondingly.
If the control has any children, then the UpdateRecreatingFlag method is applied to all the children, using the same Recreating parameter.
</summary></devnotes></procedure>
      <procedure name="UpdateTIPStatus" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2572">
      <devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></procedure>
      <procedure name="UpdateUIState" visibility="protected" file="Vcl.Controls.pas" line="2573">
        <parameters>
          <parameter name="CharCode" type="Word"/>
        </parameters>
      <devnotes><summary>
Updates form User Interface State as needed
UpdateUIState is called in component code to ensure that the User Interface State is consistently updated. User Interface State determinates whether keyboard accelerators and focus indicators are hidden or shown. A control should call UpdateUIState whenever it receives a keyboard event that might invalidate the User Interface State. CharCode is the virtual key code of the keyboard event.


</summary></devnotes></procedure>
      <procedure name="WndProc" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2574">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Provides specific message responses for the control.
Override WndProc to change the initial Windows message handler for the control. The WindowProc property is initialized to point to the WndProc method.
WndProc for TWinControl overrides the inherited method to define responses for focus, mouse, and keyboard messages. It sends all others to its inherited WndProc.
When overriding WndProc to provide specialized responses to messages, call the inherited WndProc at the end to dispatch any unhandled messages.
</summary></devnotes></procedure>
      <procedure name="CreateSubClass" visibility="protected" file="Vcl.Controls.pas" line="2589">
        <parameters>
          <parameter name="Params" type="TCreateParams" paramflags="var"/>
          <parameter name="ControlClassName" type="PWideChar"/>
        </parameters>
      <devnotes><summary>
Creates a windowed control derived from an existing Windows window class.
Call CreateSubClass in the CreateParams method of a subclassed control, after calling the inherited CreateParams. Specify the parameter record as the value of the Params parameter. CreateSubClass allows VCL controls to create registered Windows controls.
</summary></devnotes></procedure>
      <procedure name="RemoveWindowProps" visibility="protected" file="Vcl.Controls.pas" line="2590">
      <devnotes><summary>
Removes the ControlAtom and WindowAtom properties of the control.
Call RemoveWindowProps to remove the ControlAtom and WindowAtom properties of the control.


</summary></devnotes></procedure>
      <function name="GetAllocatedWindowHandle" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2592">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></function>
      <property name="AlignControlList" visibility="protected" read="FAlignControlList" type="TList" file="Vcl.Controls.pas" line="2593"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <property name="BevelEdges" visibility="protected" read="FBevelEdges" write="SetBevelEdges" type="TBevelEdges" default="15" file="Vcl.Controls.pas" line="2594"><devnotes><summary>
Specifies which edges of the control are beveled.
Use BevelEdges to get or set which edges of the control are beveled. The BevelInner, BevelOuter, and BevelKind properties determine the appearance of the specified edges.
</summary></devnotes></property>
      <property name="BevelInner" visibility="protected" read="FBevelInner" write="SetBevelCut" type="TBevelCut" default="2" index="0" file="Vcl.Controls.pas" line="2595"><devnotes><summary>
Specifies the cut of the inner bevel.
Use BevelInner to specify whether the inner bevel has a raised, lowered, or flat look. 
The inner bevel appears immediately inside the outer bevel. If there is no outer bevel (BevelOuter is bvNone), the inner bevel appears immediately inside the border.
</summary></devnotes></property>
      <property name="BevelOuter" visibility="protected" read="FBevelOuter" write="SetBevelCut" type="TBevelCut" default="1" index="1" file="Vcl.Controls.pas" line="2596"><devnotes><summary>
Specifies the cut of the outer bevel.
Use BevelOuter to specify whether the outer bevel has a raised, lowered, or flat look.
The outer bevel appears immediately inside the border and outside the inner bevel.
</summary></devnotes></property>
      <property name="BevelKind" visibility="protected" read="FBevelKind" write="SetBevelKind" type="TBevelKind" default="0" file="Vcl.Controls.pas" line="2597"><devnotes><summary>
Specifies the control's bevel style.
Use BevelKind to modify the appearance of a bevel. BevelKind influences how sharply the bevel stands out.
BevelKind, in combination with BevelWidth and the cut of the bevel specified by BevelInner or BevelOuter, can create a variety of effects. Experiment with various combinations to get the look you want.
</summary></devnotes></property>
      <property name="BevelWidth" visibility="protected" read="FBevelWidth" write="SetBevelWidth" type="TBevelWidth" default="1" file="Vcl.Controls.pas" line="2598"><devnotes><summary>
Specifies the width of the inner and outer bevels.
Use BevelWidth to specify the width, in pixels, of the inner and outer bevels.
</summary></devnotes></property>
      <property name="BorderWidth" visibility="protected" read="FBorderWidth" write="SetBorderWidth" type="TBorderWidth" default="0" file="Vcl.Controls.pas" line="2599"><devnotes><summary>
Specifies the width of the control's border.
Use BorderWidth to get or set the width of the control's border. Graphics or text drawn by the control is clipped to the area within the border.
</summary></devnotes></property>
      <property name="Ctl3D" visibility="protected" read="FCtl3D" write="SetCtl3D" stored="IsCtl3DStored" type="Boolean" file="Vcl.Controls.pas" line="2600"><devnotes><summary>
Determines whether a control has a three-dimensional (3-D) or two-dimensional look.
Ctl3D is provided for backward compatibility. It is not used by 32-bit versions of Windows or NT4.0 and later, with the exception of Windows XP Home, where it is used on occasion.
On earlier platforms, Ctl3D controlled whether the control had a flat or beveled appearance.


Note RAD Studio no longer supports Windows Vista or earlier.

</summary></devnotes></property>
      <property name="ImeMode" visibility="protected" read="FImeMode" write="FImeMode" type="TImeMode" default="3" file="Vcl.Controls.pas" line="2601"><devnotes><summary>
Determines the behavior of the input method editor (IME).
Set ImeMode to configure the way an IME processes user keystrokes. An IME is a front-end input processor for Asian language characters. The IME hooks all keyboard input, converts it to Asian characters in a conversion window, and sends the converted characters or strings on to the application. 
ImeMode allows a control to influence the type of conversion performed by the IME so that it is appropriate for the input expected by the control. For example, a control that only accepts numeric input might specify an ImeMode of imClose, as no conversion is necessary for numeric input.

Note:  The value of ImeMode only takes effect when the control receives focus. To change the value of ImeMode when the control already has input focus, call the SetIme method.</summary></devnotes></property>
      <property name="ImeName" visibility="protected" read="FImeName" write="FImeName" type="TImeName" default="0" file="Vcl.Controls.pas" line="2602"><devnotes><summary>
Specifies the input method editor (IME) to use for converting keyboard input to Asian language characters.
Set ImeName to specify which IME to use for converting keystrokes. An IME is a front-end input processor for Asian language characters. The IME hooks all keyboard input, converts it to Asian characters in a conversion window, and sends the converted characters or strings on to the application.
ImeName must specify one of the IMEs that has been installed through the Windows control panel. The property inspector provides a drop-down list of all currently installed IMEs on the system. At runtime, applications can obtain a list of currently installed IMEs from the global Screen variable.
If ImeName specifies an unavailable IME, the IME that was active when the application started is used instead. No exception is generated.

Note:  The value of ImeName only takes effect when the control receives focus. To change the value of ImeName after the control has input focus, call the SetIme method.</summary></devnotes></property>
      <property name="ParentBackground" visibility="protected" read="GetParentBackground" write="SetParentBackground" type="Boolean" file="Vcl.Controls.pas" line="2603"><devnotes><summary>
Determines whether the control uses its parent's theme background.
If ParentBackground is True, the control uses the parent's theme background to draw its own background. 
If  ParentBackground is False, the control uses its own properties, such as Color, to draw its background.
ParentBackground has no effect unless XP themes are enabled.


</summary></devnotes></property>
      <property name="ParentCtl3D" visibility="protected" read="FParentCtl3D" write="SetParentCtl3D" type="Boolean" default="1" file="Vcl.Controls.pas" line="2604"><devnotes><summary>
Determines where a component looks to determine whether it should have a three-dimensional look.
ParentCtl3D is provided for backwards compatibility. It has no effect on 32-bit versions of Windows or NT 4.0 and later.
ParentCtl3D determines whether the control uses its parent's Ctl3D property.
</summary></devnotes></property>
      <property name="TipMode" visibility="protected" read="FTipMode" write="FTipMode" type="TTipMode" default="2" file="Vcl.Controls.pas" line="2605"><devnotes><summary>
TipMode indicates whether TabTip (onscreen keyboard equivalent) opens or closes when the control receives focus or if it receives a gesture. 
For example, in controls derived from TButtonControl the default mode is tipClose, so TabTip is instructed to disappear when the control receives focus or a gesture. The default for controls derived from TCustomEdit is tipOpen.

Note: The above applies only to devices that have touch screen support

</summary></devnotes></property>
      <property name="DefWndProc" visibility="protected" read="FDefWndProc" write="FDefWndProc" type="Pointer" file="Vcl.Controls.pas" line="2610"><devnotes><summary>
Specifies the default window procedure for the windowed control.
Windowed controls use the Windows API function CallWindowProc with DefWndProc to invoke the standard Windows message handling for a window message. Using DefWndProc instead of the WndProc method bypasses any message processing introduced by the WndProc method.
DefWndProc fills the role for windowed controls that DefaultHandler fills for all objects. The DefaultHandler for TWinControl uses DefWndProc to pass messages to Windows for processing.
For windowed controls, DefWndProc is initially set to the window procedure of the window class specified in the Params parameter in the CreateParams method. Change DefWndProc to subclass the window class of a windowed control.
</summary></devnotes></property>
      <property name="WindowHandle" visibility="protected" read="FHandle" write="FHandle" type="HWND" file="Vcl.Controls.pas" line="2611"><devnotes><summary>
Provides access to a window handle for the control.
The WindowHandle property provides access to the same window handle as the Handle property, but WindowHandle is protected, and therefore only accessible to code inside the control.
The advantage to using WindowHandle is that it can be written to, while the Handle property is read-only. Use WindowHandle when implementing methods that need to change the value of the control's window handle. Unlike the Handle property, reading the value of WindowHandle doesn't automatically create a valid handle. Reading WindowHandle can return a zero value.
</summary></devnotes></property>
      <event name="OnAlignInsertBefore" visibility="protected" read="FOnAlignInsertBefore" write="FOnAlignInsertBefore" type="Boolean" file="Vcl.Controls.pas" line="2613"><devnotes><summary>
Occurs when an object with custom alignment is aligned.
OnAlignInsertBefore occurs for each pair of child controls with an Align property of alCustom.
It can determine the order in which custom-aligned child controls are placed. OnAlignInsertBefore returns true if C2 should be presented before C1, and false otherwise. It holds a TAlignInsertBeforeEvent type.
CustomAlignInsertBefore triggers the OnAlignInsertBefore event. If this event is defined, CustomAlignInsertBefore returns the value returned by OnAlignInsertBefore. Defining this event allows users to define the order of control alignment without overriding CustomAlignInsertBefore.
</summary></devnotes></event>
      <event name="OnAlignPosition" visibility="protected" read="FOnAlignPosition" write="FOnAlignPosition" type="TAlignPositionEvent" file="Vcl.Controls.pas" line="2615"><devnotes><summary>
Occurs when an object with custom alignment is aligned.
OnAlignPosition occurs when child controls with an Align property of alCustom are aligned.
CustomAlignPosition triggers the OnAlignPosition event. If this event is defined, CustomAlignPosition uses the alignment parameters it obtains from OnAlignPosition. Defining this event allows users to set the alignment parameters without overriding CustomAlignPosition. It holds a TAlignPositionEvent type.
These are the parameters:





Parameter

Meaning



NewLeft | NewTop | NewWidth | NewHeight



Location and size of child control, as determined by container's size and the Anchors TControl_Anchors constraints for the control. OnAlignPosition can modify these values to reposition the control.




AlignRect



The client area in which the control is aligned. OnAlignPosition can modify this value.




AlignInfo



Alignment information in a TAlignInfo.




As implemented in TWinControl, OnAlignPosition does nothing. 






</summary></devnotes></event>
      <event name="OnDockDrop" visibility="protected" read="FOnDockDrop" write="FOnDockDrop" type="TDockDropEvent" file="Vcl.Controls.pas" line="2616"><devnotes><summary>
Occurs when another control is docked to the control.
Write code in the OnDockDrop event to perform actions when another control is docked on the control.
OnDockDrop can only occur if DockSite is true.
OnDockDrop is an event handler of type Vcl.Controls.TDockDropEvent. 
</summary></devnotes></event>
      <event name="OnDockOver" visibility="protected" read="FOnDockOver" write="FOnDockOver" type="TDockOverEvent" file="Vcl.Controls.pas" line="2617"><devnotes><summary>
Occurs when another control is dragged over the control.
Write code in the OnDockOver event to indicate whether a dockable control that is dragged over the windowed control can be accepted as a dock client. OnDockOver occurs after the TDragDockObject has been initialized by an OnGetSiteInfo event.
OnDockOver occurs only if DockSite is true.
</summary></devnotes></event>
      <event name="OnEnter" visibility="protected" read="FOnEnter" write="FOnEnter" type="TNotifyEvent" file="Vcl.Controls.pas" line="2618"><devnotes><summary>
Occurs when a control receives the input focus.
Use the OnEnter event handler to cause any special processing to occur when a control becomes active.
The OnEnter event does not occur when switching between forms or between another application and the application that includes the control.
When switching between controls in separate container controls such as the TPanel and the TGroupBox controls, an OnEnter event occurs for the container before the OnEnter event of the contained control.
Similarly, an OnExit event of the container occurs after the OnExit event of the control in a container when focus moves to another control outside the container.
For example, consider a form with an OK button and a group box that contains three radio buttons, where focus is currently on the OK button. When the user clicks one of the radio buttons, an OnExit event of the button occurs, followed by an OnEnter event on the group box, and finally an OnEnter event on the radio button that was clicked. If the user then clicks on the OK button, an OnExit event for the radio button occurs followed by an OnExit event for the group box, and then the button's OnEnter event occurs.
OnEnter is an event handler of type System.Classes.TNotifyEvent.
</summary></devnotes></event>
      <event name="OnExit" visibility="protected" read="FOnExit" write="FOnExit" type="TNotifyEvent" file="Vcl.Controls.pas" line="2619"><devnotes><summary>
Occurs when the input focus shifts away from one control to another.
Use the OnExit event handler to provide special processing when the control ceases to be active. 
The OnExit event does not occur when switching between forms or between another application and your application.
When switching between controls in separate container controls such as the TPanel and the TGroupBox controls, an OnExit event occurs for the control inside the container before the OnExit event of the container.
Similarly, an OnEnter event of the container occurs before the OnEnter event of the control in a container when the focus moves to a control inside a container.
For example, consider a form with an OK button and a group box that contains three radio buttons, where the focus is currently on the OK button. When the user clicks one of the radio buttons, an OnExit event on the button occurs, followed by an OnEnter event on the group box, and finally an OnEnter event on the radio button that was clicked. If the user then clicks the OK button, an OnExit event for the radio button occurs followed by an OnExit event for the group box, and then the button's OnEnter event occurs.

Note: In some control classes, the ActiveControl property updates before the OnExit event occurs.
OnExit is an event handler of type TNotifyEvent.
</summary></devnotes></event>
      <event name="OnGetSiteInfo" visibility="protected" read="FOnGetSiteInfo" write="FOnGetSiteInfo" type="TGetSiteInfoEvent" file="Vcl.Controls.pas" line="2620"><devnotes><summary>
Returns the control's docking information.
Write code in the OnGetSiteInfo event handler to initialize a TDragDockObject with information about where a dragged object can be docked, if at all. OnGetSiteInfo occurs before the OnDockOver event.
OnGetSiteInfo occurs only if DockSite is true.
OnGetSiteInfo is an event handler of type Vcl.Controls.TGetSiteInfoEvent.  See TGetSiteInfoEvent for a description of the parameters.
</summary></devnotes></event>
      <event name="OnKeyDown" visibility="protected" read="FOnKeyDown" write="FOnKeyDown" type="TKeyEvent" file="Vcl.Controls.pas" line="2621"><devnotes><summary>
Occurs when a user presses any key while the control has focus.
Use the OnKeyDown event handler to specify special processing to occur when a key is pressed. The OnKeyDown handler can respond to keyboard keys, including function keys and keys combined with the SHIFT, ALT, and CTRL keys, and pressed mouse buttons.

Note: TCheckBox does not fire OnKeyDown events for arrow keys.
OnKeyDown is an event handler of type Vcl.Controls.TKeyEvent.  See TKeyEvent for a description of the parameters.
An application gets Windows WM_KEYDOWN messages for all keys when the user presses a key. These messages indirectly fire the OnKeyDown event. Setting the Key parameter to #0 prevents any further processing of this message. But for keys that generate characters Windows also produces WM_CHAR. At the time your OnKeyDown event fires, the WM_CHAR message for the key will already be in the message queue. Setting Key to #0 does not stop it from being delivered, so it fires the OnKeyPress event. If you set the Key to #0, OnKeyPress will be prevented from being fired only for keys that do not have chars. For keys that represent characters, OnKeyPress will continue to be fired. 
This method of organizing key processing has advantages. Code that only deals with characters, including control characters like #13 for carriage return, #3 for CTRL-C, and so on, should go into the OnKeyPress event. Code that deals with keys that do not generate characters should be put into the OnKeyDown event. 
</summary></devnotes></event>
      <event name="OnKeyPress" visibility="protected" read="FOnKeyPress" write="FOnKeyPress" type="TKeyPressEvent" file="Vcl.Controls.pas" line="2622"><devnotes><summary>
Occurs when a key is pressed.
Use the OnKeyPress event handler to make something happen as a result of a single character key press. 
The Key parameter in the OnKeyPress event handler is of type Char; therefore, the OnKeyPress event registers the ASCII character of the key pressed. Keys that do not correspond to an ASCII Char value (SHIFT or F1, for example) do not generate an OnKeyPress event. Key combinations (such as SHIFT+A) generate only one OnKeyPress event (for this example, SHIFT+A results in a Key value of &quot;A&quot; if Caps Lock is off). To respond to non-ASCII keys or key combinations, use the OnKeyDown or OnKeyUp event handler. 
An application gets Windows WM_KEYDOWN messages for all keys when the user presses a key. These messages indirectly fire the OnKeyDown event. Setting the Key parameter to #0 prevents any further processing of this message. But for keys that generate characters Windows also produces WM_CHAR. At the time your OnKeyDown event fires, the WM_CHAR message for the key will already be in the message queue. Setting Key to #0 does not stop it from being delivered, so it fires the OnKeyPress event. If you set the Key to #0, OnKeyPress will be prevented from being fired only for keys that do not have chars. For keys that represent characters, OnKeyPress will continue to be fired. 
This method of organizing key processing has advantages. Code that only deals with characters, including control characters like #13 for carriage return, #3 for CTROL-C, and so on, should go into the OnKeyPress event. Code that deals with keys that do not generate characters should be put into the OnKeyDown event. 
OnKeyPress is an event handler of type Vcl.Controls.TKeyPressEvent.
</summary></devnotes></event>
      <event name="OnKeyUp" visibility="protected" read="FOnKeyUp" write="FOnKeyUp" type="TKeyEvent" file="Vcl.Controls.pas" line="2623"><devnotes><summary>
Occurs when the user releases a key that was pressed.
Use the OnKeyUp event handler to provide special processing that occurs when a key is released. The OnKeyUp handler can respond to all keyboard keys, keys that represent characters, function keys, and keys combined with the SHIFT, ALT, and CTRL keys.
If Key is set to #0, any further processing of the OnKeyUp event will be prevented. 
OnKeyUp is an event handler of type Vcl.Controls.TKeyEvent.  See TKeyEvent for a description of the parameters.
</summary></devnotes></event>
      <event name="OnUnDock" visibility="protected" read="FOnUnDock" write="FOnUnDock" type="TUnDockEvent" file="Vcl.Controls.pas" line="2624"><devnotes><summary>
Occurs when the application tries to undock a control that is docked to the windowed control.
Write an OnUnDock event handler to adjust the windowed control when a dock client is undocked. The OnUnDock event handler can make any necessary adjustments, or it can block the undock attempt by setting the Allow parameter to false.
OnUnDock is an event handler of type Vcl.Controls.TUnDockEvent.
</summary></devnotes></event>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2626">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TWinControl.
Call Create to construct and initialize a new control and insert the newly-constructed control into its owner, as specified by the AOwner parameter. Create inserts the control in the owner by calling the owner's InsertComponent method. 
Most controls override Create to initialize their unique properties. Objects that override the Create method must always call the inherited Create method first, and then proceed with the component-specific initialization. Specify the override directive when overriding the Create method.
If a component's Create method allocates resources or memory, override the Destroy method to free those resources. 
</summary></devnotes></constructor>
      <constructor name="CreateParented" visibility="public" file="Vcl.Controls.pas" line="2630">
        <parameters>
          <parameter name="ParentWindow" type="HWND"/>
        </parameters>
      </constructor>
      <function name="CreateParentedControl" visibility="public" procflags="class" file="Vcl.Controls.pas" line="2632">
        <parameters>
          <parameter name="ParentWindow" type="HWND"/>
          <retval type="TWinControl"/>
        </parameters>
      <devnotes><summary>
Creates and initializes a control as the child of a specified non-VCL window.
Call CreateParentedControl to embed a new control in a non-VCL parent. 
CreateParentedControl allocates memory for a new instance of the same class as the control (Delphi) or is the class specified by the vmt parameter (C++), sets its ParentWindow property to ParentWindow, and calls the constructor, passing in nil (Delphi) or NULL (C++) for the Owner parameter. CreateParentedControl returns the newly created control.
CreateParentedControl has the same purpose as CreateParented, but is a simple class function instead of a constructor. Unlike CreateParented, CreateParentedControl can be called from C++ code.
</summary></devnotes></function>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="2633">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys an instance of TWinControl.
Do not call Destroy directly in an application. Instead, call Free. Free verifies that the TWinControl reference is not nil, and only then calls Destroy.
</summary></devnotes></destructor>
      <procedure name="ScaleForPPI" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2635">
        <devnotes><summary>


Embarcadero Technologies does not currently have any additional information.


</summary></devnotes>
        <parameters>
          <parameter name="NewPPI" type="Integer"/>
        </parameters>
      </procedure>
      <procedure name="Broadcast" visibility="public" file="Vcl.Controls.pas" line="2636">
        <parameters>
          <parameter name="Message" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Sends a message to each of the child controls.
Use Broadcast when you want to send the same message to each of the child controls contained within the windowed control. Specify the message to be passed as the value of the Message parameter.
</summary></devnotes></procedure>
      <function name="CanFocus" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2637">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether a control can receive focus.
Call CanFocus to find out if the control can receive input from the user.
CanFocus returns true if both the control and its parent(s) have their Visible and Enabled properties set to true. If any of the Visible and Enabled properties of the control or the controls in which it is contained are not true, then CanFocus returns false. 
</summary></devnotes></function>
      <function name="ContainsControl" visibility="public" file="Vcl.Controls.pas" line="2638">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Indicates whether a specified control exists within the control.
Use ContainsControl to find out if a particular control exists within this control. ContainsControl returns true if the specified value of the Control parameter is a child control of this control. The Control parameter need not be an immediate child (in the Controls property), but may be contained in a child of the control, or in a child of a child of the control, for indefinitely many levels deep.
If the method returns false, the specified control is not within the control.
</summary></devnotes></function>
      <function name="ControlAtPos" visibility="public" file="Vcl.Controls.pas" line="2639">
        <parameters>
          <parameter name="Pos" type="TPoint" paramflags="const"/>
          <parameter name="AllowDisabled" type="Boolean"/>
          <parameter name="AllowWinControls" type="Boolean">
            <value>
              False
            </value>
          </parameter>
          <parameter name="AllLevels" type="Boolean">
            <value>
              False
            </value>
          </parameter>
          <retval type="TControl"/>
        </parameters>
      <devnotes><summary>
Returns the child control located at a specified position within the control.
Use ControlAtPos to determine which child control is at the specified location within the control. ControlAtPos returns an immediate child of the control; that is, one of the entries of the Controls property, that has this control for its Parent property.
Specify the position in client coordinates as the value of the Pos parameter. Pos can be anywhere within the boundaries of the child control, not just the upper left corner.
The AllowDisabled parameter determines whether the search for controls includes disabled controls.
The AllowWinControls parameter determines whether descendants of TWinControl are considered when looking for the child control.
If there is no control that matches the AllowDisabled and AllowWinControls parameters at the specified position, ControlAtPos returns nil (Delphi) or NULL (C++). 
</summary></devnotes></function>
      <procedure name="DefaultHandler" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2641">
        <parameters>
          <parameter name="Message" paramflags="var"/>
        </parameters>
      <devnotes><summary>
Provides message handling for all messages that the control does not fully process by itself.
Override DefaultHandler to change the default message handling for the control. The Message parameter can be cast to a TMessage type, to obtain the WParam, LParam, and Result of the message. If the Result of the message is non-zero, the message has already been handled. Set the Result field to a non-zero value to prevent further processing of the message by the inherited method.

Note:  In Delphi code, calling inherited in a message-handling method results in a call to the ancestor's DefaultHandler method unless that ancestor specifies an explicit handler for the message. 
TWinControl overrides the TControl DefaultHandler method to handle messages for all its descendant types. DefaultHandler passes any otherwise-unhandled messages to the control's window procedure using the CallWindowProc API function.
</summary></devnotes></procedure>
      <procedure name="DisableAlign" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="2642">
      <devnotes><summary>
Disables the realignment of child controls.
Call DisableAlign to temporarily prevent child controls from realigning. For example, while performing multiple manipulations of controls, such as reading from a form file or scaling, performance improves if child controls are not realigned until all manipulations are complete. The EnableAlign method restores normal child realignment.
Every call to DisableAlign must be followed by a matching call to EnableAlign. If an exception could be raised after the call to DisableAlign, use an exception block to ensure that EnableAlign will always be called.
DisableAlign/EnableAlign call sequences can be nested. An internal counter records the level of nesting. As long as the counter is positive, realignment is disabled and the AlignDisabled property returns true. Once the counter returns to zero, realignment is enabled and AlignDisabled returns false.
</summary></devnotes></procedure>
      <property name="DockClientCount" visibility="public" read="GetDockClientCount" type="Integer" file="Vcl.Controls.pas" line="2643"><devnotes><summary>
Specifies the number of controls that are docked on the windowed control.
Use DockClientCount to get the number of controls that are docked to the windowed control. This value can be used as an upper bound when iterating through the DockClients property.

Note:  The DockClients property can contain controls that are not visible. To get the number of docked clients that are visible, use the VisibleDockClientCount property instead.</summary></devnotes></property>
      <property name="DockClients[Index]" visibility="public" read="GetDockClients" type="TControl" file="Vcl.Controls.pas" line="2644"/>
      <procedure name="DockDrop" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2645">
        <parameters>
          <parameter name="Source" type="TDragDockObject"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Generates an OnDockDrop event.
DockDrop is called automatically when a control is docked to the windowed control. It instructs the control that is being dropped to prepare for the dock operation and then generates an OnDockDrop event.
Although you can override DockDrop to perform actions in addition to the generated OnDockDrop event, typically descendant classes override the DoAddDockClient method instead. This is because DoAddDockClient is called by the client after it has performed its own preparations, but before the OnDockDrop event.
DockDrop is called only if DockSite is True.
</summary></devnotes></procedure>
      <property name="DockSite" visibility="public" read="FDockSite" write="SetDockSite" type="Boolean" default="0" file="Vcl.Controls.pas" line="2646"><devnotes><summary>
Specifies whether the control can be the target of drag-and-dock operations.
Set DockSite to true to allow other controls to be docked to this windowed control.

Code Examples
Docking (Delphi)
Docking (C++)



</summary></devnotes></property>
      <property name="DockManager" visibility="public" read="FDockManager" write="FDockManager" type="IDockManager" file="Vcl.Controls.pas" line="2647"><devnotes><summary>
Specifies the control's docking manager interface.
Use DockManager to specify the control's docking manager. The docking manager handles the layout of docking zones (where controls are docked) and any painting associated with docking zones.
If you set DockSite and UseDockManager to true, but do not assign a value to DockManager, the windowed control generates a default docking manager, using the global DefaultDockTreeClass variable.
</summary></devnotes></property>
      <property name="DoubleBuffered" visibility="public" read="FDoubleBuffered" write="SetDoubleBuffered" stored="IsDoubleBufferedStored" type="Boolean" file="Vcl.Controls.pas" line="2648"><devnotes><summary>
Determines whether the control's image is rendered directly to the window or painted to an in-memory bitmap first.
When DoubleBuffered is false, the windowed control paints itself directly to the window. When DoubleBuffered is true, the windowed control paints itself to an in-memory bitmap that is then used to paint the window. Double buffering reduces the amount of flicker when the control repaints, but is more memory intensive.
When a windowed control is a dock site and has an associated dock manager, it must be double-buffered.

Note:  Some controls, such as TRichEdit, can't paint themselves into a bitmap. For such controls, DoubleBuffered must be set to false.</summary></devnotes></property>
      <procedure name="EnableAlign" visibility="public" file="Vcl.Controls.pas" line="2649">
      <devnotes><summary>
Decrements the reference count incremented by the DisableAlign method, eventually realigning the child controls.
Call EnableAlign to allow child controls within the control to realign again after they were prevented from realigning by a call to DisableAlign. 
Each time the DisableAlign method is called, it increments a reference count. Each time EnableAlign is called, it decrements the same reference count. When the reference count reaches zero, EnableAlign calls the Realign method to perform any pending realignments.
Be sure to pair each call to DisableAlign with a call to EnableAlign. If an exception could be raised after the call to DisableAlign, use an exception block to ensure that the corresponding call to EnableAlign is executed.
</summary></devnotes></procedure>
      <function name="FindChildControl" visibility="public" file="Vcl.Controls.pas" line="2650">
        <parameters>
          <parameter name="ControlName" type="string" paramflags="const"/>
          <retval type="TControl"/>
        </parameters>
      <devnotes><summary>
Returns a child control given its name.
Call FindChildControl to locate a specified child control. FindChildControl searches the control's children and returns the control with the specified name. If no child controls match the specified name, FindChildControl returns nil (Delphi) or NULL (C++).

Note: FindChildControl only locates immediate children of the control. It can't find a control that is a child of one of the control's children.</summary></devnotes></function>
      <procedure name="FlipChildren" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2651">
        <parameters>
          <parameter name="AllLevels" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Reverses the positions of child controls.
Call FlipChildren to flip the control's children; that is, to move children on the left side of the control to the right side and vice versa. FlipChildren reverses the position of all child controls and adjusts their Align properties, if necessary, to enforce the new position.
AllLevels specifies whether FlipChildren should be called recursively on the control's children.
FlipChildren can be used to reverse the layout of an application when it is running in Middle Eastern locales where users read from right to left instead of left to right: Call UseRightToLeftAlignment to determine whether the BiDiMode property dictates a reversal of alignment based on the system locale.

Note: FlipChildren does the same thing as the Flip Children command on the control's context menu in the IDE.</summary></devnotes></procedure>
      <function name="Focused" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2652">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Determines whether the control has input focus.
Use the Focused method to see if the control is the active control. When Focused returns true, the control has the input focus. If Focused returns false, the user cannot interact with the control.
</summary></devnotes></function>
      <procedure name="GetChildren" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2653">
        <parameters>
          <parameter name="Proc" type="TGetChildProc"/>
          <parameter name="Root" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Calls a specified method for each child of the control.
GetChildren is called by the streaming system that loads and saves components. Applications seldom need to call this routine.
GetChildren executes the callback specified by the Proc parameter for every child control listed by the Controls property that lists the Root parameter as its Owner.
Override GetChildren to limit or augment which child controls are saved with the control. When overriding GetChildren, call the procedure passed as the Proc parameter for every child control that should be saved. The Root parameter indicates the component (usually a form) that owns the control.
</summary></devnotes></procedure>
      <procedure name="GetTabControlList" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2654">
        <parameters>
          <parameter name="List" type="TList"/>
        </parameters>
      <devnotes><summary>
Builds a list of owned controls.
Call GetTabControlList to construct a list of child controls.
GetTabControlList iterates through the control's internal tab order list, adding each of the child controls to List. The result is a list of all the owned controls in TabOrder.
</summary></devnotes></procedure>
      <procedure name="GetTabOrderList" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2655">
        <parameters>
          <parameter name="List" type="TList"/>
        </parameters>
      <devnotes><summary>
Builds a list of controls in tab order.
Call GetTabOrderList to construct a list of child controls in tab order.
GetTabOrderList iterates through the control's internal tab order list, adding each of the child controls to List, including any controls contained in those controls. The result is a list of all the controls and their owned controls, in tab order.
The FindNextControl method calls GetTabOrderList to build a complete list of the controls that FindNextControl uses to locate the next control in the tab order.
</summary></devnotes></procedure>
      <function name="HandleAllocated" visibility="public" file="Vcl.Controls.pas" line="2656">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Reports whether a screen object handle exists for the control.
Query HandleAllocated to find out if the control's underlying screen object has been generated.
If the screen object exists, HandleAllocated returns true. If the screen object does not exist, HandleAllocated returns false. Testing the Handle property of a control directly causes the window to be created if it does not already exist. Call the HandleAllocated method to determine whether a window exists without creating one as a side effect.
</summary></devnotes></function>
      <procedure name="HandleNeeded" visibility="public" file="Vcl.Controls.pas" line="2657">
      <devnotes><summary>
Creates a screen object for the control if it doesn't already exist.
Call HandleNeeded to create a screen object for the control.
If the screen object does not exist, HandleNeeded calls the CreateHandle method for the parent of the control before it creates a screen object for this control.
</summary></devnotes></procedure>
      <procedure name="InsertControl" visibility="public" file="Vcl.Controls.pas" line="2658">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      <devnotes><summary>
Inserts a control into the Controls array property.
Applications should not need to call InsertControl directly. Child controls are automatically inserted and removed when added or deleted at design time. At run time, use the Parent property of the child control to insert it in the Controls array. If the child control is already the child of another control, setting the Parent property ensures that the child is removed from the Controls of the original parent.
InsertControl makes the inserted control a child, and the containing control the parent. The AControl parameter is the child control that is inserted into the Controls array.
</summary></devnotes></procedure>
      <procedure name="Invalidate" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2659">
      <devnotes><summary>
Schedules a control repaint.
Invalidate informs a control that its entire surface needs to be repainted. Calling Invalidate can prevent flicker caused by a series of partial repaints. There is no performance penalty for calling Invalidate multiple times before the control is actually repainted.
The actual repaint does not occur until the control is updated. To force an immediate repaint, call Repaint instead.
</summary></devnotes></procedure>
      <procedure name="PaintTo" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2660">
        <parameters>
          <parameter name="DC" type="HDC"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Draws the windowed control to a device context.
Call PaintTo to draw the control on a device context. Specify the device context as the value of the DC parameter and specify the X and Y coordinates on the device context where the top-left corner of the windowed control is to be drawn. PaintTo first erases the background of the device context and then paints the control.
PaintTo is useful for drawing an image of the control into a bitmap DC.

Warning:  When using PaintTo to draw on a canvas, you must lock the canvas first (and unlock it after the call to PaintTo. If you do not lock the canvas, Windows calls that occur while the control is painting can cause the canvas to lose its handle.</summary></devnotes></procedure>
      <procedure name="PaintTo" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="2661">
        <parameters>
          <parameter name="Canvas" type="TCanvas"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
        </parameters>
      <devnotes><summary>
Draws the windowed control to a device context.
Call PaintTo to draw the control on a device context. Specify the device context as the value of the DC parameter and specify the X and Y coordinates on the device context where the top-left corner of the windowed control is to be drawn. PaintTo first erases the background of the device context and then paints the control.
PaintTo is useful for drawing an image of the control into a bitmap DC.

Warning:  When using PaintTo to draw on a canvas, you must lock the canvas first (and unlock it after the call to PaintTo. If you do not lock the canvas, Windows calls that occur while the control is painting can cause the canvas to lose its handle.</summary></devnotes></procedure>
      <property name="PixelsPerInch" visibility="public" read="GetPixelsPerInch" write="SetPixelsPerInch" stored="False" type="Integer" file="Vcl.Controls.pas" line="2662"><devnotes><summary>
Embarcadero Technologies does not currently have any additional information.


</summary></devnotes></property>
      <function name="PreProcessMessage" visibility="public" procflags="dynamic" file="Vcl.Controls.pas" line="2664">
        <parameters>
          <parameter name="Msg" type="tagMSG" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      <devnotes><summary>
Returns False, no matter the value of Msg.
As a member of the TWinControl class, PreProcessMessage always returns False, no matter the value of Msg.

Note:  When overriding PreProcessMessage in descendant classes, we recommend to implement it such that it returns True if Msg is a preprocess message, and False otherwise. </summary></devnotes></function>
      <procedure name="RemoveControl" visibility="public" file="Vcl.Controls.pas" line="2665">
        <parameters>
          <parameter name="AControl" type="TControl"/>
        </parameters>
      <devnotes><summary>
Removes a specified control from the Controls array.
RemoveControl removes a child control from the Controls property. After calling RemoveControl, the control is no longer the parent of the child specified by the AControl parameter. 
Applications should not call RemoveControl directly. Child controls are automatically inserted and removed when added or deleted at design time. At runtime, use the Parent property of the child control to remove it from the Controls array.
</summary></devnotes></procedure>
      <procedure name="Realign" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="2666">
      <devnotes><summary>
Forces the control to realign children.
The EnableAlign method calls Realign when the reference count reaches zero. It adjusts the size and position of any child controls according to their Align properties.
If all of the child controls have their Align properties set to alNone, Realign has no effect.
</summary></devnotes></procedure>
      <procedure name="Repaint" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2667">
      <devnotes><summary>
Repaints the entire control.
Call Repaint to repaint the control.
As implemented in TWinControl, Repaint calls the Invalidate method and then the Update method to repaint the control.
</summary></devnotes></procedure>
      <procedure name="ScaleBy" visibility="public" file="Vcl.Controls.pas" line="2668">
        <parameters>
          <parameter name="M" type="Integer"/>
          <parameter name="D" type="Integer"/>
        </parameters>
      <devnotes><summary>
Rescale control and its children.
ScaleBy resizes a control without moving its upper left corner. This is similar to changing the Height and Width properties, but the control also attempts to rescale and rearrange any child controls to maintain their relative size and placement.
The M and D parameters define a multiplier and divisor by which to scale the control. For example, to make a control 75% of its original size, specify the value of M as 75, and the value of D as 100. Any pair of values that has the same ratio has the same effect. Thus M = 3 and D = 4 also makes the control 75% of its previous size.
To rescale the control's children without rescaling the control itself, use ScaleControls.
</summary></devnotes></procedure>
      <procedure name="ScrollBy" visibility="public" file="Vcl.Controls.pas" line="2669">
        <parameters>
          <parameter name="DeltaX" type="Integer"/>
          <parameter name="DeltaY" type="Integer"/>
        </parameters>
      <devnotes><summary>
Scroll control contents.
Call ScrollBy to scroll the contents within the control. While ScrollBy can be used for any TWinControl, it makes the most sense to use it for descendants of TScrollingWinControl.
Applications seldom need to call the ScrollBy method unless they implement their own scrolling interface rather than relying on a scroll bar.
The DeltaX parameter is the change in pixels along the X axis. A positive DeltaX value scrolls the contents to the right; a negative value scrolls the contents to the left. The DeltaY parameter is the change in pixels along the Y axis. A positive DeltaY value scrolls the contents down; a negative value scrolls the contents up.
</summary></devnotes></procedure>
      <procedure name="SetBounds" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2670">
        <parameters>
          <parameter name="ALeft" type="Integer"/>
          <parameter name="ATop" type="Integer"/>
          <parameter name="AWidth" type="Integer"/>
          <parameter name="AHeight" type="Integer"/>
        </parameters>
      <devnotes><summary>
Sets the windowed control's boundary properties all at once.
Use SetBounds to change all of the control's boundary properties at once. The same effect can be achieved by setting the Left, Top, Width, and Height properties separately. By setting all four properties at once, SetBounds ensures that the control will not repaint between changes
Specify the values for the Left, Top, Width, and Height properties as the value of the ALeft, ATop, AWidth, and AHeight parameters, respectively.
</summary></devnotes></procedure>
      <procedure name="SetDesignVisible" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2671">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      <devnotes><summary>
Makes a control visible at design time.
Vcl.Controls.TWinControl.SetDesignVisible inherits from Vcl.Controls.TControl.SetDesignVisible. All content below this line refers to Vcl.Controls.TControl.SetDesignVisible.
Makes a control visible at design time.
SetDesignVisible is used internally by Delphi during form design.
</summary></devnotes></procedure>
      <procedure name="SetFocus" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2672">
      <devnotes><summary>
Gives the input focus to the control.
Use SetFocus to change input focus to the control. When a control has focus, it receives keyboard events.
</summary></devnotes></procedure>
      <procedure name="Update" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2673">
      <devnotes><summary>
Forces the control to update.
Update repaints any part of the control surface that is out of date. Normally, updates occur automatically, but an Update call may be necessary before lengthy processing that might interfere with automatic updates. Calling Update unnecessarily can increase overhead and cause screen flicker.
Update only repaints areas of the control the have been determined to be out of date. To force immediate repainting of the entire control, call the Repaint method. To notify a control that it is out of date (without forcing an immediate repaint), call the Invalidate method.
</summary></devnotes></procedure>
      <procedure name="UpdateControlState" visibility="public" file="Vcl.Controls.pas" line="2674">
      <devnotes><summary>
Respond to state change.
UpdateControlState is called automatically when any display change occurs that might affect the internal state of the control.
As implemented in TWinControl, UpdateControlState climbs the chain of parent controls to verify that each control in the chain has Showing equal to true. If this is the case, UpdateControlState makes sure that the Showing property is accurate for this control and for all its descendants. Descendant classes can extend this behavior.
</summary></devnotes></procedure>
      <procedure name="LockDrawing" visibility="public" file="Vcl.Controls.pas" line="2675">
      <devnotes><summary>
Call LockDrawing method to prevent changes in that control from being redrawn. To resume redrawing call UnlockDrawing method. If to recreate a window handle after a LockDrawing call, the control will remain locked until the corresponding UnlockDrawing call. 
LockDrawing / UnlockDrawing calls may be nested.
</summary></devnotes></procedure>
      <procedure name="UnlockDrawing" visibility="public" file="Vcl.Controls.pas" line="2676">
      <devnotes><summary>
Call UnlockDrawing method to allow changes in that control to be redrawn. 
LockDrawing / UnlockDrawing calls may be nested.
</summary></devnotes></procedure>
      <property name="AlignDisabled" visibility="public" read="GetAlignDisabled" type="Boolean" file="Vcl.Controls.pas" line="2677"><devnotes><summary>
Indicates child control realignment disabled.
AlignDisabled returns true if child control realignment has been temporarily disabled by a call to DisableAlign.
</summary></devnotes></property>
      <property name="MouseInClient" visibility="public" read="FMouseInClient" type="Boolean" file="Vcl.Controls.pas" line="2678"><devnotes><summary>
Indicates whether the mouse pointer is currently in the client area of the control.
Use MouseInClient to check whether the mouse pointer is currently located in the client area of the control. MouseInClient is also used internally to fire the OnMouseEnter and OnMouseLeave events. 
</summary></devnotes></property>
      <property name="VisibleDockClientCount" visibility="public" read="GetVisibleDockClientCount" type="Integer" file="Vcl.Controls.pas" line="2679"><devnotes><summary>
Specifies the number of visible controls that are docked on the windowed control.
Use VisibleDockClientCount to determine the number of controls in the DockClients list that have a Visible property value of true. This value is less than or equal to the value of DockClientCount.
</summary></devnotes></property>
      <property name="Brush" visibility="public" read="FBrush" type="TBrush" file="Vcl.Controls.pas" line="2680"><devnotes><summary>
Determines the color and pattern used for painting the background of the control.
The Brush property accesses the TBrush object that determines pattern and color for the control background. Brush is a read-only property, but an application can manipulate the TBrush object by setting its properties or by using its Assign method.
</summary></devnotes></property>
      <property name="Controls[Index]" visibility="public" read="GetControl" type="TControl" file="Vcl.Controls.pas" line="2681"/>
      <property name="ControlCount" visibility="public" read="GetControlCount" type="Integer" file="Vcl.Controls.pas" line="2682"><devnotes><summary>
Returns the number of child controls.
Read ControlCount when iterating over all the children of this control. The children of the control are listed in the Controls property array.
ControlCount is a read-only property.

Note:  The value of ControlCount is always 1 greater than the highest Controls index, because the first Controls index is 0.</summary></devnotes></property>
      <property name="Handle" visibility="public" read="GetHandle" type="HWND" file="Vcl.Controls.pas" line="2683"><devnotes><summary>
Provides access to the underlying Windows screen object for the control.
The Handle property returns the window handle for the underlying Microsoft Windows screen object. Use the Handle property to bypass the VCL API and directly access the underlying window.
Do not refer to the Handle property during component creation or streaming. The underlying window does not exist until the first time the Handle property is referenced. When this occurs, the HandleNeeded method is called automatically.
Handle is a read-only property.

Note: On Win64, the size of HANDLE types has changed to 64-bits --except for OLE_HANDLE, which is now a 32bit Long even in Win64. This means that you need to change any code that assumed OLE_HANDLE and other HANDLE types are interchangeable. See also http://stackoverflow.com/questions/401812/what-is-the-proper-way-to-cast-from-an-ole-handle-to-an-hicon.</summary></devnotes></property>
      <property name="Padding" visibility="public" read="FPadding" write="SetPadding" type="TPadding" file="Vcl.Controls.pas" line="2684"><devnotes><summary>
Specifies the padding of a control.
Use Padding to specify the padding of a control. This value is an instance of the class TPadding.
</summary></devnotes></property>
      <property name="ParentDoubleBuffered" visibility="public" read="FParentDoubleBuffered" write="SetParentDoubleBuffered" type="Boolean" default="1" file="Vcl.Controls.pas" line="2685"><devnotes><summary>
ParentDoubleBuffered defers the DoubleBuffered property of this component to the value of the parent's DoubleBuffered property.
ParentDoubleBuffered is a boolean indicating that the DoubleBuffered property of this component is overridden by the value of the parent's DoubleBuffered property.


</summary></devnotes></property>
      <property name="ParentWindow" visibility="public" read="FParentWindow" write="SetParentWindow" type="HWND" file="Vcl.Controls.pas" line="2686"><devnotes><summary>
Reference to parent's underlying control.
ParentWindow refers to the window handle that underlies the parent control. To designate a non-VCL control as a parent, assign that control's handle to ParentWindow. This assignment causes the control to be moved into the parent's screen area. Setting ParentWindow has no effect if Parent is not nil (Delphi) or NULL (C++).
TActiveXControl objects use ParentWindow to insert a control in an ActiveX container window. ParentWindow is set automatically when a control is constructed with a call to CreateParented (Delphi) or the appropriate overloaded constructor (C++).
Use ParentWindow with windowed controls that are packaged in a DLL. This allows references to the control by applications based on other applications.
</summary></devnotes></property>
      <property name="Showing" visibility="public" read="FShowing" type="Boolean" file="Vcl.Controls.pas" line="2687"><devnotes><summary>
Indicates whether the control is showing on the screen.
Showing is used internally to optimize the allocation of Windows resources. Use Showing to determine when you must allocate resources that are required when the control is visible. When Showing is false, the control is not visible and you can delay the allocation of resources.
If the Visible properties of a component and all the parents in its parent hierarchy are true, Showing is guaranteed to be true. If one of the parents containing the control has a Visible property value of false, Showing may be either true or false.
Showing is a read-only property. 
</summary></devnotes></property>
      <property name="IsDrawingLocked" visibility="public" read="GetIsDrawingLocked" type="Boolean" file="Vcl.Controls.pas" line="2688"><devnotes><summary>
IsDrawingLocked property returns True when redrawing for this control is locked.  It is True when the number of LockDrawing calls is less than UnlockDrawing calls for this control.
</summary></devnotes></property>
      <property name="RedrawDisabled" visibility="public" read="GetRedrawDisabled" type="Boolean" file="Vcl.Controls.pas" line="2689"><devnotes><summary>
RedrawDisabled property returns True when redrawing for this control is locked.  It is similar to IsDrawingLocked, but uses Win32 API to determine when a Win32 window redrawing is disabled. 
For example, when a parent control redrawing is locked using LockDrawing, then IsDrawingLocked returns True for parent control and False for child control. RedrawDisabled returns True for both parent and child controls.
</summary></devnotes></property>
      <property name="TabOrder" visibility="public" read="GetTabOrder" write="SetTabOrder" type="TTabOrder" default="-1" file="Vcl.Controls.pas" line="2690"><devnotes><summary>
Indicates the position of the control in its parent's tab order.
TabOrder is the order in which child windows are visited when the user presses the Tab key. The control with the TabOrder value of 0 is the control that has the focus when the form first appears.
Initially, the tab order is always the order in which the controls were added to the form. The first control added to the form has a TabOrder value of 0, the second is 1, the third is 2, and so on. Change this by changing the TabOrder property.
Each control has a unique tab-order value within its parent. If you change the TabOrder property value of one control to be the same as the value of a second control, the TabOrder value for all the other controls changes. For example, suppose a control is sixth in the tab order. If you change the control's TabOrder property value to 3 (making the control fourth in the tab order), the control that was originally fourth in the tab order now becomes fifth, and the control that was fifth becomes sixth.
Assigning TabOrder a value greater than the number of controls contained in the parent control moves the control to the end of the tab order. The control does not take on the assigned value of TabOrder, but instead is given the number that assures the control is the last in the tab order.

Note: TabOrder is meaningful only if the TabStop property is True and if the control has a parent. (The TabOrder property of a form is not used unless the form is the child of another form.) A control with a TabOrder of -1 has no parent, and therefore cannot be reached by pressing the Tab key. To remove a parented control from the Tab order, set its TabStop property to False.</summary></devnotes></property>
      <property name="TabStop" visibility="public" read="FTabStop" write="SetTabStop" type="Boolean" default="0" file="Vcl.Controls.pas" line="2691"><devnotes><summary>
Determines whether the user can tab to a control.
Use the TabStop to allow or disallow access to the control using the Tab key.
If TabStop is True, the control is in the tab order. If TabStop is False, the control is not in the tab order and the user cannot press the TAB key to move to the control. 

Note: TabStop is not meaningful for a form unless the form assigns another form to be its parent.</summary></devnotes></property>
      <property name="UseDockManager" visibility="public" read="FUseDockManager" write="SetUseDockManager" type="Boolean" default="0" file="Vcl.Controls.pas" line="2692"><devnotes><summary>
Specifies whether the docking manager is used in drag-and-dock operations.
Use UseDockManager to get or set whether a docking manager is used in drag-and-dock operations. 
The docking manager handles the positioning of docked controls and any painting of docking zones around those controls. If you do not use a docking manager, docked controls are aligned to the windowed control based on the closest edge to where they are released. When you do not use a docking manager, there is no region for a user to grab to automatically undock a docked control.
</summary></devnotes></property>
    </members>
  <devnotes><summary>
TWinControl is the base class for all controls that are wrappers for Microsoft Windows screen objects.
TWinControl provides the common functionality for all controls that act as wrappers for Microsoft Windows screen objects (&quot;windows&quot;). Controls that are wrap underlying windows have the following features:

The control can incorporate the functionality of an underlying window. For example, if the underlying screen object is a text editor, the control can incorporate the editor ability to manage and display a text buffer.
The control can receive user input focus. The focused control can handle keyboard input events. Some controls change their appearance when they have the focus. For example, button controls typically indicate the focus by drawing a rectangle around the caption.
The control can serve as a container for other controls, referred to as child controls. This relationship is signified by the child's Parent property. Container controls provide important services to their children, including display services for controls that do not implement their own canvases. Examples of container controls include forms, panels, and toolbars.
Controls based on TWinControl can display standard screen objects provided by Microsoft Windows, or customized screen objects developed by the VCL programmer.
Descendants of TWinControl include abstract base classes that support most kinds of user interface objects. The most significant descendant is TCustomControl, which provides code to implement a canvas and handle paint messages. Other important abstract descendants include TScrollingWinControl, TButtonControl, TCustomComboBox, TCustomEdit, and TCustomListBox. When defining new control classes, consider these descendants before deriving directly from TWinControl.
Every TWinControl object has a Handle property which provides the window handle for the underlying Microsoft Windows screen object. Use the Handle property to bypass the VCL API and directly access the underlying window.
</summary></devnotes></class>
  <class name="TGraphicControl" file="Vcl.Controls.pas" line="2695">
    <ancestor name="TControl" namespace="Vcl.Controls">
      <methodref name="GetCustomHint" visibility="private"/>
      <methodref name="CalcDockSizes" visibility="private"/>
      <methodref name="CheckNewSize" visibility="private"/>
      <methodref name="CreateFloatingDockSite" visibility="private"/>
      <methodref name="DoActionChange" visibility="private"/>
      <methodref name="DoCanAutoSize" visibility="private"/>
      <methodref name="DoCanResize" visibility="private"/>
      <methodref name="DoConstraintsChange" visibility="private"/>
      <methodref name="DoConstrainedResize" visibility="private"/>
      <methodref name="DoDragMsg" visibility="private"/>
      <methodref name="DoMouseActivate" visibility="private"/>
      <methodref name="DoMouseDown" visibility="private"/>
      <methodref name="DoMouseUp" visibility="private"/>
      <methodref name="DoMarginChange" visibility="private"/>
      <methodref name="FontChanged" visibility="private"/>
      <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
      <methodref name="GetBoundsRect" visibility="private"/>
      <methodref name="GetClientHeight" visibility="private"/>
      <methodref name="GetClientWidth" visibility="private"/>
      <methodref name="GetLRDockWidth" visibility="private"/>
      <methodref name="GetMouseCapture" visibility="private"/>
      <methodref name="GetTBDockHeight" visibility="private"/>
      <methodref name="GetUndockWidth" visibility="private"/>
      <methodref name="GetUndockHeight" visibility="private"/>
      <methodref name="InvalidateControl" visibility="private"/>
      <methodref name="IsAnchorsStored" visibility="private"/>
      <methodref name="IsBiDiModeStored" visibility="private"/>
      <methodref name="IsCaptionStored" visibility="private"/>
      <methodref name="IsColorStored" visibility="private"/>
      <methodref name="IsEnabledStored" visibility="private"/>
      <methodref name="IsFontStored" visibility="private"/>
      <methodref name="IsHintStored" visibility="private"/>
      <methodref name="IsHelpContextStored" visibility="private"/>
      <methodref name="IsOnClickStored" visibility="private"/>
      <methodref name="IsShowHintStored" visibility="private"/>
      <methodref name="IsVisibleStored" visibility="private"/>
      <methodref name="ReadIsControl" visibility="private"/>
      <methodref name="ReadExplicitLeft" visibility="private"/>
      <methodref name="ReadExplicitTop" visibility="private"/>
      <methodref name="ReadExplicitWidth" visibility="private"/>
      <methodref name="ReadExplicitHeight" visibility="private"/>
      <methodref name="SetAlignWithMargins" visibility="private"/>
      <methodref name="SetAnchors" visibility="private"/>
      <methodref name="SetAction" visibility="private"/>
      <methodref name="SetAlign" visibility="private"/>
      <methodref name="SetBoundsRect" visibility="private"/>
      <methodref name="SetClientHeight" visibility="private"/>
      <methodref name="SetClientSize" visibility="private"/>
      <methodref name="SetClientWidth" visibility="private"/>
      <methodref name="SetColor" visibility="private"/>
      <methodref name="SetCursor" visibility="private"/>
      <methodref name="SetDesktopFont" visibility="private"/>
      <methodref name="SetFont" visibility="private"/>
      <methodref name="SetHeight" visibility="private"/>
      <methodref name="SetHelpContext" visibility="private"/>
      <methodref name="SetHelpKeyword" visibility="private"/>
      <methodref name="SetHostDockSite" visibility="private"/>
      <methodref name="SetLeft" visibility="private"/>
      <methodref name="SetMouseCapture" visibility="private"/>
      <methodref name="SetParentColor" visibility="private"/>
      <methodref name="SetParentFont" visibility="private"/>
      <methodref name="SetShowHint" visibility="private"/>
      <methodref name="SetParentShowHint" visibility="private"/>
      <methodref name="SetParentCustomHint" visibility="private"/>
      <methodref name="SetPopupMenu" visibility="private"/>
      <methodref name="SetTop" visibility="private"/>
      <methodref name="SetVisible" visibility="private"/>
      <methodref name="SetWidth" visibility="private"/>
      <methodref name="SetZOrderPosition" visibility="private"/>
      <methodref name="UpdateAnchorRules" visibility="private"/>
      <methodref name="WriteIsControl" visibility="private"/>
      <methodref name="WriteExplicitLeft" visibility="private"/>
      <methodref name="WriteExplicitTop" visibility="private"/>
      <methodref name="WriteExplicitWidth" visibility="private"/>
      <methodref name="WriteExplicitHeight" visibility="private"/>
      <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
      <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
      <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
      <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
      <methodref name="WMMouseMove" visibility="private" procflags="message"/>
      <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
      <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
      <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
      <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
      <methodref name="WMCancelMode" visibility="private" procflags="message"/>
      <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
      <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
      <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
      <methodref name="CMFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMColorChanged" visibility="private" procflags="message"/>
      <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
      <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
      <methodref name="CMHintShow" visibility="private" procflags="message"/>
      <methodref name="CMHitTest" visibility="private" procflags="message"/>
      <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
      <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
      <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
      <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
      <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
      <methodref name="CMGesture" visibility="private" procflags="message"/>
      <methodref name="WMContextMenu" visibility="private" procflags="message"/>
      <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
      <methodref name="SetConstraints" visibility="private"/>
      <methodref name="SetMargins" visibility="private"/>
      <methodref name="SetTouchManager" visibility="private"/>
      <methodref name="GetText" visibility="private"/>
      <methodref name="SetText" visibility="private"/>
      <methodref name="CMFloat" visibility="private" procflags="message"/>
      <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
      <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
      <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
      <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
      <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
      <methodref name="CanResize" visibility="protected" procflags="virtual"/>
      <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
      <methodref name="Changed" visibility="protected"/>
      <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
      <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
      <methodref name="Click" visibility="protected" procflags="dynamic"/>
      <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
      <methodref name="CalcCursorPos" visibility="protected"/>
      <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
      <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
      <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
      <methodref name="DefineProperties" visibility="protected" procflags="override"/>
      <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
      <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
      <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
      <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
      <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
      <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
      <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
      <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
      <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
      <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
      <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
      <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
      <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
      <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
      <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
      <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
      <methodref name="GetAction" visibility="protected" procflags="virtual"/>
      <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
      <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
      <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
      <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
      <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
      <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
      <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
      <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
      <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
      <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
      <methodref name="GetDragMode" visibility="protected"/>
      <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
      <methodref name="Loaded" visibility="protected" procflags="override"/>
      <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
      <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
      <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
      <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
      <methodref name="Notification" visibility="protected" procflags="override"/>
      <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
      <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
      <methodref name="ReadState" visibility="protected" procflags="override"/>
      <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
      <methodref name="Resize" visibility="protected" procflags="dynamic"/>
      <methodref name="ScaleConstraints" visibility="protected"/>
      <methodref name="ScaleMargins" visibility="protected"/>
      <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
      <methodref name="SendCancelMode" visibility="protected"/>
      <methodref name="SendDockNotification" visibility="protected"/>
      <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
      <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
      <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
      <methodref name="SetName" visibility="protected" procflags="override"/>
      <methodref name="SetParent" visibility="protected" procflags="virtual"/>
      <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
      <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
      <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
      <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
      <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
      <methodref name="SetCustomHint" visibility="protected"/>
      <methodref name="UpdateExplicitBounds" visibility="protected"/>
      <methodref name="UpdateBoundsRect" visibility="protected"/>
      <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
      <methodref name="WndProc" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
      <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
      <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
      <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
      <propertyref name="ActionLink" visibility="protected"/>
      <propertyref name="AutoSize" visibility="protected"/>
      <propertyref name="Caption" visibility="protected"/>
      <propertyref name="DesktopFont" visibility="protected"/>
      <propertyref name="DragKind" visibility="protected"/>
      <propertyref name="DragCursor" visibility="protected"/>
      <propertyref name="DragMode" visibility="protected"/>
      <propertyref name="IsControl" visibility="protected"/>
      <propertyref name="MouseCapture" visibility="protected"/>
      <propertyref name="ParentBiDiMode" visibility="protected"/>
      <propertyref name="ParentColor" visibility="protected"/>
      <propertyref name="ParentFont" visibility="protected"/>
      <propertyref name="ParentShowHint" visibility="protected"/>
      <propertyref name="PopupMenu" visibility="protected"/>
      <propertyref name="ScalingFlags" visibility="protected"/>
      <propertyref name="Text" visibility="protected"/>
      <propertyref name="WheelAccumulator" visibility="protected"/>
      <propertyref name="Color" visibility="protected"/>
      <propertyref name="Font" visibility="protected"/>
      <propertyref name="IScaling" visibility="protected"/>
      <propertyref name="WindowText" visibility="protected"/>
      <eventref name="OnCanResize" visibility="protected"/>
      <eventref name="OnClick" visibility="protected"/>
      <eventref name="OnConstrainedResize" visibility="protected"/>
      <eventref name="OnContextPopup" visibility="protected"/>
      <eventref name="OnDblClick" visibility="protected"/>
      <eventref name="OnDragDrop" visibility="protected"/>
      <eventref name="OnDragOver" visibility="protected"/>
      <eventref name="OnEndDock" visibility="protected"/>
      <eventref name="OnEndDrag" visibility="protected"/>
      <eventref name="OnMouseActivate" visibility="protected"/>
      <eventref name="OnMouseDown" visibility="protected"/>
      <eventref name="OnMouseEnter" visibility="protected"/>
      <eventref name="OnMouseLeave" visibility="protected"/>
      <eventref name="OnMouseMove" visibility="protected"/>
      <eventref name="OnMouseUp" visibility="protected"/>
      <eventref name="OnMouseWheel" visibility="protected"/>
      <eventref name="OnMouseWheelDown" visibility="protected"/>
      <eventref name="OnMouseWheelUp" visibility="protected"/>
      <eventref name="OnResize" visibility="protected"/>
      <eventref name="OnStartDock" visibility="protected"/>
      <eventref name="OnStartDrag" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="CheckNonMainThreadUsage" visibility="public"/>
      <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
      <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
      <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
      <methodref name="BeginDrag" visibility="public"/>
      <methodref name="BringToFront" visibility="public"/>
      <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
      <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
      <methodref name="ClientToParent" visibility="public"/>
      <methodref name="Dock" visibility="public" procflags="dynamic"/>
      <methodref name="Dragging" visibility="public"/>
      <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
      <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
      <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
      <propertyref name="Enabled" visibility="public"/>
      <methodref name="EndDrag" visibility="public"/>
      <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
      <methodref name="GetParentComponent" visibility="public" procflags="override"/>
      <methodref name="HasParent" visibility="public" procflags="override"/>
      <methodref name="Hide" visibility="public"/>
      <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
      <methodref name="Invalidate" visibility="public" procflags="virtual"/>
      <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
      <methodref name="IsRightToLeft" visibility="public"/>
      <methodref name="ManualDock" visibility="public"/>
      <methodref name="ManualFloat" visibility="public"/>
      <methodref name="Perform" visibility="public" procflags="overload"/>
      <methodref name="Refresh" visibility="public"/>
      <methodref name="Repaint" visibility="public" procflags="virtual"/>
      <methodref name="ReplaceDockedControl" visibility="public"/>
      <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
      <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
      <methodref name="ParentToClient" visibility="public"/>
      <methodref name="SendToBack" visibility="public"/>
      <methodref name="SetBounds" visibility="public" procflags="virtual"/>
      <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
      <methodref name="SetParentComponent" visibility="public" procflags="override"/>
      <methodref name="Show" visibility="public"/>
      <methodref name="Update" visibility="public" procflags="virtual"/>
      <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
      <methodref name="UseRightToLeftReading" visibility="public"/>
      <methodref name="UseRightToLeftScrollBar" visibility="public"/>
      <methodref name="DefaultHandler" visibility="public" procflags="override"/>
      <methodref name="GetTextBuf" visibility="public"/>
      <methodref name="GetTextLen" visibility="public"/>
      <methodref name="Perform" visibility="public" procflags="overload"/>
      <methodref name="Perform" visibility="public" procflags="overload"/>
      <methodref name="SetTextBuf" visibility="public"/>
      <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
      <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleValue" visibility="public" procflags="overload"/>
      <methodref name="ScaleRectSize" visibility="public"/>
      <propertyref name="Action" visibility="public"/>
      <propertyref name="Align" visibility="public"/>
      <propertyref name="Anchors" visibility="public"/>
      <propertyref name="BiDiMode" visibility="public"/>
      <propertyref name="BoundsRect" visibility="public"/>
      <propertyref name="ClientHeight" visibility="public"/>
      <propertyref name="ClientOrigin" visibility="public"/>
      <propertyref name="ClientRect" visibility="public"/>
      <propertyref name="ClientWidth" visibility="public"/>
      <propertyref name="Constraints" visibility="public"/>
      <propertyref name="ControlState" visibility="public"/>
      <propertyref name="ControlStyle" visibility="public"/>
      <propertyref name="CurrentPPI" visibility="public"/>
      <propertyref name="DockOrientation" visibility="public"/>
      <propertyref name="ExplicitLeft" visibility="public"/>
      <propertyref name="ExplicitTop" visibility="public"/>
      <propertyref name="ExplicitWidth" visibility="public"/>
      <propertyref name="ExplicitHeight" visibility="public"/>
      <propertyref name="Floating" visibility="public"/>
      <propertyref name="FloatingDockSiteClass" visibility="public"/>
      <propertyref name="HostDockSite" visibility="public"/>
      <propertyref name="LRDockWidth" visibility="public"/>
      <propertyref name="ScaleFactor" visibility="public"/>
      <propertyref name="ShowHint" visibility="public"/>
      <propertyref name="TBDockHeight" visibility="public"/>
      <propertyref name="Touch" visibility="public"/>
      <propertyref name="UndockHeight" visibility="public"/>
      <propertyref name="UndockWidth" visibility="public"/>
      <propertyref name="Visible" visibility="public"/>
      <eventref name="WindowProc" visibility="public"/>
      <propertyref name="Parent" visibility="public"/>
      <propertyref name="StyleElements" visibility="public"/>
      <propertyref name="StyleName" visibility="public"/>
      <eventref name="OnGesture" visibility="public"/>
      <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
      <propertyref name="AlignWithMargins" visibility="published"/>
      <propertyref name="Left" visibility="published"/>
      <propertyref name="Top" visibility="published"/>
      <propertyref name="Width" visibility="published"/>
      <propertyref name="Height" visibility="published"/>
      <propertyref name="Cursor" visibility="published"/>
      <propertyref name="Hint" visibility="published"/>
      <propertyref name="HelpType" visibility="published"/>
      <propertyref name="HelpKeyword" visibility="published"/>
      <propertyref name="HelpContext" visibility="published"/>
      <propertyref name="Margins" visibility="published"/>
      <propertyref name="CustomHint" visibility="published"/>
      <propertyref name="ParentCustomHint" visibility="published"/>
      <ancestor name="TComponent" namespace="System.Classes">
        <interfaces>
          <implements name="IInterfaceComponentReference"/>
          <implements name="IInterface"/>
        </interfaces>
        <methodref name="GetComObject" visibility="private">
        </methodref>
        <methodref name="GetComponent" visibility="private">
        </methodref>
        <methodref name="GetComponentCount" visibility="private">
        </methodref>
        <methodref name="GetComponentIndex" visibility="private">
        </methodref>
        <methodref name="Insert" visibility="private">
        </methodref>
        <methodref name="ReadLeft" visibility="private">
        </methodref>
        <methodref name="ReadTop" visibility="private">
        </methodref>
        <methodref name="Remove" visibility="private">
        </methodref>
        <methodref name="RemoveNotification" visibility="private">
        </methodref>
        <methodref name="SetComponentIndex" visibility="private">
        </methodref>
        <methodref name="SetReference" visibility="private">
        </methodref>
        <methodref name="WriteLeft" visibility="private">
        </methodref>
        <methodref name="WriteTop" visibility="private">
        </methodref>
        <methodref name="IntfGetComponent" visibility="private">
        </methodref>
        <methodref name="DoGetDeltaStreams" visibility="private">
        </methodref>
        <methodref name="ReadDeltaStream" visibility="private">
        </methodref>
        <methodref name="ReadDeltaState" visibility="private">
        </methodref>
        <methodref name="FindSortedComponent" visibility="private">
        </methodref>
        <methodref name="AddSortedComponent" visibility="private">
        </methodref>
        <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
        </methodref>
        <methodref name="Create@" visibility="class private" procflags="class constructor noself">
        </methodref>
        <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ChangeName" visibility="protected">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetChildren" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="override">
        </methodref>
        <methodref name="Loaded" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Notification" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="ReadState" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="CanObserve" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetObservers" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAncestor" visibility="protected">
        </methodref>
        <methodref name="SetDesigning" visibility="protected">
        </methodref>
        <methodref name="SetInline" visibility="protected">
        </methodref>
        <methodref name="SetDesignInstance" visibility="protected">
        </methodref>
        <methodref name="SetName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Updating" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Updated" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
        </methodref>
        <methodref name="ValidateRename" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="WriteState" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="RemoveFreeNotifications" visibility="protected">
        </methodref>
        <methodref name="QueryInterface" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="_AddRef" visibility="protected">
        </methodref>
        <methodref name="_Release" visibility="protected">
        </methodref>
        <methodref name="GetTypeInfoCount" visibility="protected">
        </methodref>
        <methodref name="GetTypeInfo" visibility="protected">
        </methodref>
        <methodref name="GetIDsOfNames" visibility="protected">
        </methodref>
        <methodref name="Invoke" visibility="protected">
        </methodref>
        <eventref name="OnGetDeltaStreams" visibility="protected">
        </eventref>
        <methodref name="Create" visibility="public" procflags="constructor virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndFunctionInvoke" visibility="public">
        </methodref>
        <methodref name="DestroyComponents" visibility="public">
        </methodref>
        <methodref name="Destroying" visibility="public">
        </methodref>
        <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="FindComponent" visibility="public">
        </methodref>
        <methodref name="FreeNotification" visibility="public">
        </methodref>
        <methodref name="RemoveFreeNotification" visibility="public">
        </methodref>
        <methodref name="FreeOnRelease" visibility="public">
        </methodref>
        <methodref name="GetEnumerator" visibility="public" procflags="inline">
        </methodref>
        <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="override">
        </methodref>
        <methodref name="HasParent" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="InsertComponent" visibility="public">
        </methodref>
        <methodref name="RemoveComponent" visibility="public">
        </methodref>
        <methodref name="SetSubComponent" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="override">
        </methodref>
        <methodref name="UpdateAction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="IsImplementorOf" visibility="public">
        </methodref>
        <methodref name="ReferenceInterface" visibility="public">
        </methodref>
        <propertyref name="ComObject" visibility="public">
        </propertyref>
        <propertyref name="Components" visibility="public">
        </propertyref>
        <propertyref name="ComponentCount" visibility="public">
        </propertyref>
        <propertyref name="ComponentIndex" visibility="public">
        </propertyref>
        <propertyref name="ComponentState" visibility="public">
        </propertyref>
        <propertyref name="ComponentStyle" visibility="public">
        </propertyref>
        <propertyref name="DesignInfo" visibility="public">
        </propertyref>
        <propertyref name="Owner" visibility="public">
        </propertyref>
        <propertyref name="VCLComObject" visibility="public">
        </propertyref>
        <propertyref name="Observers" visibility="public">
        </propertyref>
        <propertyref name="Name" visibility="published">
        </propertyref>
        <propertyref name="Tag" visibility="published">
        </propertyref>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FCanvas" type="TCanvas" visibility="private" size="4" offset="464" file="Vcl.Controls.pas" line="2697"/>
      <procedure name="WMPaint" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2698">
        <parameters>
          <parameter name="Message" type="TWMPaint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2700">
      </procedure>
      <property name="Canvas" visibility="protected" read="FCanvas" type="TCanvas" file="Vcl.Controls.pas" line="2707"/>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2710">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="2711">
        <parameters>
        </parameters>
      </destructor>
    </members>
  </class>
  <class name="TCustomControl" file="Vcl.Controls.pas" line="2714">
    <ancestor name="TWinControl" namespace="Vcl.Controls">
      <methodref name="AlignControl" visibility="private"/>
      <methodref name="CalcConstraints" visibility="private"/>
      <methodref name="DoPaddingChange" visibility="private"/>
      <methodref name="GetAlignDisabled" visibility="private"/>
      <methodref name="GetControl" visibility="private"/>
      <methodref name="GetControlCount" visibility="private"/>
      <methodref name="GetDockClientCount" visibility="private"/>
      <methodref name="GetDockClients" visibility="private"/>
      <methodref name="GetHandle" visibility="private"/>
      <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
      <methodref name="GetTabOrder" visibility="private"/>
      <methodref name="GetVisibleDockClientCount" visibility="private"/>
      <methodref name="Insert" visibility="private"/>
      <methodref name="InvalidateFrame" visibility="private"/>
      <methodref name="InvokeHelp" visibility="private"/>
      <methodref name="IsCtl3DStored" visibility="private"/>
      <methodref name="IsDoubleBufferedStored" visibility="private"/>
      <methodref name="PrecedingWindow" visibility="private"/>
      <methodref name="ReadDesignSize" visibility="private"/>
      <methodref name="ReadPixelsPerInch" visibility="private"/>
      <methodref name="Remove" visibility="private"/>
      <methodref name="RemoveFocus" visibility="private"/>
      <methodref name="SetBevelCut" visibility="private"/>
      <methodref name="SetBevelEdges" visibility="private"/>
      <methodref name="SetBevelKind" visibility="private"/>
      <methodref name="SetBevelWidth" visibility="private"/>
      <methodref name="SetBorderWidth" visibility="private"/>
      <methodref name="SetCtl3D" visibility="private"/>
      <methodref name="SetDockSite" visibility="private"/>
      <methodref name="SetDoubleBuffered" visibility="private"/>
      <methodref name="SetPadding" visibility="private"/>
      <methodref name="SetParentCtl3D" visibility="private"/>
      <methodref name="SetParentWindow" visibility="private"/>
      <methodref name="SetTabOrder" visibility="private"/>
      <methodref name="SetTabStop" visibility="private"/>
      <methodref name="SetUseDockManager" visibility="private"/>
      <methodref name="SetZOrderPosition" visibility="private"/>
      <methodref name="UpdateTabOrder" visibility="private"/>
      <methodref name="UpdateShowing" visibility="private"/>
      <methodref name="WriteDesignSize" visibility="private"/>
      <methodref name="WritePixelsPerInch" visibility="private"/>
      <methodref name="IsMenuKey" visibility="private"/>
      <methodref name="GetIsDrawingLocked" visibility="private"/>
      <methodref name="GetRedrawDisabled" visibility="private"/>
      <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
      <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
      <methodref name="WMPaint" visibility="private" procflags="message"/>
      <methodref name="WMCommand" visibility="private" procflags="message"/>
      <methodref name="WMNotify" visibility="private" procflags="message"/>
      <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
      <methodref name="WMHScroll" visibility="private" procflags="message"/>
      <methodref name="WMVScroll" visibility="private" procflags="message"/>
      <methodref name="WMCompareItem" visibility="private" procflags="message"/>
      <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
      <methodref name="WMDrawItem" visibility="private" procflags="message"/>
      <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
      <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
      <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
      <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
      <methodref name="WMSize" visibility="private" procflags="message"/>
      <methodref name="WMMove" visibility="private" procflags="message"/>
      <methodref name="WMSetCursor" visibility="private" procflags="message"/>
      <methodref name="WMKeyDown" visibility="private" procflags="message"/>
      <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
      <methodref name="WMKeyUp" visibility="private" procflags="message"/>
      <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
      <methodref name="WMChar" visibility="private" procflags="message"/>
      <methodref name="WMSysCommand" visibility="private" procflags="message"/>
      <methodref name="WMCharToItem" visibility="private" procflags="message"/>
      <methodref name="WMParentNotify" visibility="private" procflags="message"/>
      <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
      <methodref name="WMDestroy" visibility="private" procflags="message"/>
      <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
      <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
      <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
      <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
      <methodref name="WMNCPaint" visibility="private" procflags="message"/>
      <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
      <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
      <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
      <methodref name="WMFontChange" visibility="private" procflags="message"/>
      <methodref name="WMTimeChange" visibility="private" procflags="message"/>
      <methodref name="WMSetFocus" visibility="private" procflags="message"/>
      <methodref name="WMKillFocus" visibility="private" procflags="message"/>
      <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
      <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
      <methodref name="WMContextMenu" visibility="private" procflags="message"/>
      <methodref name="WMGesture" visibility="private" procflags="message"/>
      <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
      <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
      <methodref name="CMChanged" visibility="private" procflags="message"/>
      <methodref name="CMChildKey" visibility="private" procflags="message"/>
      <methodref name="CMDialogKey" visibility="private" procflags="message"/>
      <methodref name="CMDialogChar" visibility="private" procflags="message"/>
      <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
      <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
      <methodref name="CMColorChanged" visibility="private" procflags="message"/>
      <methodref name="CMFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
      <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
      <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
      <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
      <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
      <methodref name="CMEnter" visibility="private" procflags="message"/>
      <methodref name="CMExit" visibility="private" procflags="message"/>
      <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
      <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
      <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
      <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
      <methodref name="CMFontChange" visibility="private" procflags="message"/>
      <methodref name="CMTimeChange" visibility="private" procflags="message"/>
      <methodref name="CMDrag" visibility="private" procflags="message"/>
      <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
      <methodref name="CNKeyDown" visibility="private" procflags="message"/>
      <methodref name="CNKeyUp" visibility="private" procflags="message"/>
      <methodref name="CNChar" visibility="private" procflags="message"/>
      <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
      <methodref name="CNSysChar" visibility="private" procflags="message"/>
      <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
      <methodref name="CMSysCommand" visibility="private" procflags="message"/>
      <methodref name="CMInvalidate" visibility="private" procflags="message"/>
      <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
      <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
      <methodref name="CMTextChanged" visibility="private" procflags="message"/>
      <methodref name="WMPrintClient" visibility="private" procflags="message"/>
      <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
      <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
      <methodref name="CMControlListChange" visibility="private" procflags="message"/>
      <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
      <methodref name="CMDockClient" visibility="private" procflags="message"/>
      <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
      <methodref name="CMFloat" visibility="private" procflags="message"/>
      <methodref name="InvokeAsyncCalls" visibility="protected">
      </methodref>
      <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
      <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
      <methodref name="ActionChange" visibility="protected" procflags="override"/>
      <methodref name="AddBiDiModeExStyle" visibility="protected"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
      <methodref name="AdjustSize" visibility="protected" procflags="override"/>
      <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
      <methodref name="ArrangeControl" visibility="protected"/>
      <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
      <methodref name="CanResize" visibility="protected" procflags="override"/>
      <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
      <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
      <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
      <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
      <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
      <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
      <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
      <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
      <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
      <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
      <methodref name="DefineProperties" visibility="protected" procflags="override"/>
      <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
      <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
      <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
      <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
      <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
      <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
      <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
      <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
      <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
      <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
      <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
      <methodref name="DoKeyDown" visibility="protected"/>
      <methodref name="DoKeyPress" visibility="protected"/>
      <methodref name="DoKeyUp" visibility="protected"/>
      <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
      <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
      <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
      <methodref name="FindNextControl" visibility="protected"/>
      <methodref name="FixupTabList" visibility="protected"/>
      <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
      <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
      <methodref name="GetClientRect" visibility="protected" procflags="override"/>
      <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
      <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
      <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
      <methodref name="GetParentHandle" visibility="protected"/>
      <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
      <methodref name="GetTopParentHandle" visibility="protected"/>
      <methodref name="InvalidateDockHostSite" visibility="protected"/>
      <methodref name="IsControlMouseMsg" visibility="protected"/>
      <methodref name="IsControlActivateMsg" visibility="protected"/>
      <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
      <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
      <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
      <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
      <methodref name="MainWndProc" visibility="protected"/>
      <methodref name="Notification" visibility="protected" procflags="override"/>
      <methodref name="NotifyControls" visibility="protected"/>
      <methodref name="PaintControls" visibility="protected"/>
      <methodref name="PaintHandler" visibility="protected"/>
      <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
      <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
      <methodref name="ReadState" visibility="protected" procflags="override"/>
      <methodref name="RecreateWnd" visibility="protected"/>
      <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
      <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
      <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
      <methodref name="ResetImeComposition" visibility="protected"/>
      <methodref name="RequestAlign" visibility="protected" procflags="override"/>
      <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetCurrentPPIScreen" visibility="protected"/>
      <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
      <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
      <methodref name="ScaleControls" visibility="protected"/>
      <methodref name="ScalePadding" visibility="protected"/>
      <methodref name="SelectFirst" visibility="protected"/>
      <methodref name="SelectNext" visibility="protected"/>
      <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
      <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
      <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
      <methodref name="SetImeCompositionWindow" visibility="protected"/>
      <methodref name="SetParent" visibility="protected" procflags="override"/>
      <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
      <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
      <methodref name="SetZOrder" visibility="protected" procflags="override"/>
      <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateBounds" visibility="protected"/>
      <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateRecreatingFlag" visibility="protected"/>
      <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateUIState" visibility="protected"/>
      <methodref name="WndProc" visibility="protected" procflags="override"/>
      <methodref name="CreateSubClass" visibility="protected"/>
      <methodref name="RemoveWindowProps" visibility="protected"/>
      <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
      <propertyref name="AlignControlList" visibility="protected"/>
      <propertyref name="BevelEdges" visibility="protected"/>
      <propertyref name="BevelInner" visibility="protected"/>
      <propertyref name="BevelOuter" visibility="protected"/>
      <propertyref name="BevelKind" visibility="protected"/>
      <propertyref name="BevelWidth" visibility="protected"/>
      <propertyref name="BorderWidth" visibility="protected"/>
      <propertyref name="Ctl3D" visibility="protected"/>
      <propertyref name="ImeMode" visibility="protected"/>
      <propertyref name="ImeName" visibility="protected"/>
      <propertyref name="ParentBackground" visibility="protected"/>
      <propertyref name="ParentCtl3D" visibility="protected"/>
      <propertyref name="TipMode" visibility="protected"/>
      <propertyref name="DefWndProc" visibility="protected"/>
      <propertyref name="WindowHandle" visibility="protected"/>
      <eventref name="OnAlignInsertBefore" visibility="protected"/>
      <eventref name="OnAlignPosition" visibility="protected"/>
      <eventref name="OnDockDrop" visibility="protected"/>
      <eventref name="OnDockOver" visibility="protected"/>
      <eventref name="OnEnter" visibility="protected"/>
      <eventref name="OnExit" visibility="protected"/>
      <eventref name="OnGetSiteInfo" visibility="protected"/>
      <eventref name="OnKeyDown" visibility="protected"/>
      <eventref name="OnKeyPress" visibility="protected"/>
      <eventref name="OnKeyUp" visibility="protected"/>
      <eventref name="OnUnDock" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="CreateParented" visibility="public" procflags="constructor"/>
      <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="ScaleForPPI" visibility="public" procflags="override">
      </methodref>
      <methodref name="Broadcast" visibility="public"/>
      <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
      <methodref name="ContainsControl" visibility="public"/>
      <methodref name="ControlAtPos" visibility="public"/>
      <methodref name="DefaultHandler" visibility="public" procflags="override"/>
      <methodref name="DisableAlign" visibility="public" procflags="inline"/>
      <propertyref name="DockClientCount" visibility="public"/>
      <propertyref name="DockClients" visibility="public"/>
      <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
      <propertyref name="DockSite" visibility="public"/>
      <propertyref name="DockManager" visibility="public"/>
      <propertyref name="DoubleBuffered" visibility="public"/>
      <methodref name="EnableAlign" visibility="public"/>
      <methodref name="FindChildControl" visibility="public"/>
      <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
      <methodref name="Focused" visibility="public" procflags="dynamic"/>
      <methodref name="GetChildren" visibility="public" procflags="override"/>
      <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
      <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
      <methodref name="HandleAllocated" visibility="public"/>
      <methodref name="HandleNeeded" visibility="public"/>
      <methodref name="InsertControl" visibility="public"/>
      <methodref name="Invalidate" visibility="public" procflags="override"/>
      <methodref name="PaintTo" visibility="public" procflags="overload"/>
      <methodref name="PaintTo" visibility="public" procflags="overload"/>
      <propertyref name="PixelsPerInch" visibility="public"/>
      <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
      <methodref name="RemoveControl" visibility="public"/>
      <methodref name="Realign" visibility="public" procflags="inline"/>
      <methodref name="Repaint" visibility="public" procflags="override"/>
      <methodref name="ScaleBy" visibility="public"/>
      <methodref name="ScrollBy" visibility="public"/>
      <methodref name="SetBounds" visibility="public" procflags="override"/>
      <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
      <methodref name="SetFocus" visibility="public" procflags="virtual"/>
      <methodref name="Update" visibility="public" procflags="override"/>
      <methodref name="UpdateControlState" visibility="public"/>
      <methodref name="LockDrawing" visibility="public"/>
      <methodref name="UnlockDrawing" visibility="public"/>
      <propertyref name="AlignDisabled" visibility="public"/>
      <propertyref name="MouseInClient" visibility="public"/>
      <propertyref name="VisibleDockClientCount" visibility="public"/>
      <propertyref name="Brush" visibility="public"/>
      <propertyref name="Controls" visibility="public"/>
      <propertyref name="ControlCount" visibility="public"/>
      <propertyref name="Handle" visibility="public"/>
      <propertyref name="Padding" visibility="public"/>
      <propertyref name="ParentDoubleBuffered" visibility="public"/>
      <propertyref name="ParentWindow" visibility="public"/>
      <propertyref name="Showing" visibility="public"/>
      <propertyref name="IsDrawingLocked" visibility="public"/>
      <propertyref name="RedrawDisabled" visibility="public"/>
      <propertyref name="TabOrder" visibility="public"/>
      <propertyref name="TabStop" visibility="public"/>
      <propertyref name="UseDockManager" visibility="public"/>
      <ancestor name="TControl" namespace="Vcl.Controls">
        <methodref name="GetCustomHint" visibility="private"/>
        <methodref name="CalcDockSizes" visibility="private"/>
        <methodref name="CheckNewSize" visibility="private"/>
        <methodref name="CreateFloatingDockSite" visibility="private"/>
        <methodref name="DoActionChange" visibility="private"/>
        <methodref name="DoCanAutoSize" visibility="private"/>
        <methodref name="DoCanResize" visibility="private"/>
        <methodref name="DoConstraintsChange" visibility="private"/>
        <methodref name="DoConstrainedResize" visibility="private"/>
        <methodref name="DoDragMsg" visibility="private"/>
        <methodref name="DoMouseActivate" visibility="private"/>
        <methodref name="DoMouseDown" visibility="private"/>
        <methodref name="DoMouseUp" visibility="private"/>
        <methodref name="DoMarginChange" visibility="private"/>
        <methodref name="FontChanged" visibility="private"/>
        <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
        <methodref name="GetBoundsRect" visibility="private"/>
        <methodref name="GetClientHeight" visibility="private"/>
        <methodref name="GetClientWidth" visibility="private"/>
        <methodref name="GetLRDockWidth" visibility="private"/>
        <methodref name="GetMouseCapture" visibility="private"/>
        <methodref name="GetTBDockHeight" visibility="private"/>
        <methodref name="GetUndockWidth" visibility="private"/>
        <methodref name="GetUndockHeight" visibility="private"/>
        <methodref name="InvalidateControl" visibility="private"/>
        <methodref name="IsAnchorsStored" visibility="private"/>
        <methodref name="IsBiDiModeStored" visibility="private"/>
        <methodref name="IsCaptionStored" visibility="private"/>
        <methodref name="IsColorStored" visibility="private"/>
        <methodref name="IsEnabledStored" visibility="private"/>
        <methodref name="IsFontStored" visibility="private"/>
        <methodref name="IsHintStored" visibility="private"/>
        <methodref name="IsHelpContextStored" visibility="private"/>
        <methodref name="IsOnClickStored" visibility="private"/>
        <methodref name="IsShowHintStored" visibility="private"/>
        <methodref name="IsVisibleStored" visibility="private"/>
        <methodref name="ReadIsControl" visibility="private"/>
        <methodref name="ReadExplicitLeft" visibility="private"/>
        <methodref name="ReadExplicitTop" visibility="private"/>
        <methodref name="ReadExplicitWidth" visibility="private"/>
        <methodref name="ReadExplicitHeight" visibility="private"/>
        <methodref name="SetAlignWithMargins" visibility="private"/>
        <methodref name="SetAnchors" visibility="private"/>
        <methodref name="SetAction" visibility="private"/>
        <methodref name="SetAlign" visibility="private"/>
        <methodref name="SetBoundsRect" visibility="private"/>
        <methodref name="SetClientHeight" visibility="private"/>
        <methodref name="SetClientSize" visibility="private"/>
        <methodref name="SetClientWidth" visibility="private"/>
        <methodref name="SetColor" visibility="private"/>
        <methodref name="SetCursor" visibility="private"/>
        <methodref name="SetDesktopFont" visibility="private"/>
        <methodref name="SetFont" visibility="private"/>
        <methodref name="SetHeight" visibility="private"/>
        <methodref name="SetHelpContext" visibility="private"/>
        <methodref name="SetHelpKeyword" visibility="private"/>
        <methodref name="SetHostDockSite" visibility="private"/>
        <methodref name="SetLeft" visibility="private"/>
        <methodref name="SetMouseCapture" visibility="private"/>
        <methodref name="SetParentColor" visibility="private"/>
        <methodref name="SetParentFont" visibility="private"/>
        <methodref name="SetShowHint" visibility="private"/>
        <methodref name="SetParentShowHint" visibility="private"/>
        <methodref name="SetParentCustomHint" visibility="private"/>
        <methodref name="SetPopupMenu" visibility="private"/>
        <methodref name="SetTop" visibility="private"/>
        <methodref name="SetVisible" visibility="private"/>
        <methodref name="SetWidth" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateAnchorRules" visibility="private"/>
        <methodref name="WriteIsControl" visibility="private"/>
        <methodref name="WriteExplicitLeft" visibility="private"/>
        <methodref name="WriteExplicitTop" visibility="private"/>
        <methodref name="WriteExplicitWidth" visibility="private"/>
        <methodref name="WriteExplicitHeight" visibility="private"/>
        <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
        <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
        <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
        <methodref name="WMMouseMove" visibility="private" procflags="message"/>
        <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
        <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
        <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
        <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
        <methodref name="WMCancelMode" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMHintShow" visibility="private" procflags="message"/>
        <methodref name="CMHitTest" visibility="private" procflags="message"/>
        <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
        <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
        <methodref name="CMGesture" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="SetConstraints" visibility="private"/>
        <methodref name="SetMargins" visibility="private"/>
        <methodref name="SetTouchManager" visibility="private"/>
        <methodref name="GetText" visibility="private"/>
        <methodref name="SetText" visibility="private"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
        <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
        <methodref name="CanResize" visibility="protected" procflags="virtual"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
        <methodref name="Changed" visibility="protected"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
        <methodref name="Click" visibility="protected" procflags="dynamic"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
        <methodref name="CalcCursorPos" visibility="protected"/>
        <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
        <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
        <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
        <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
        <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
        <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
        <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
        <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
        <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
        <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
        <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
        <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
        <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
        <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
        <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
        <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
        <methodref name="GetAction" visibility="protected" procflags="virtual"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
        <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
        <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
        <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
        <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
        <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
        <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
        <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
        <methodref name="GetDragMode" visibility="protected"/>
        <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
        <methodref name="Loaded" visibility="protected" procflags="override"/>
        <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
        <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
        <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
        <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
        <methodref name="Resize" visibility="protected" procflags="dynamic"/>
        <methodref name="ScaleConstraints" visibility="protected"/>
        <methodref name="ScaleMargins" visibility="protected"/>
        <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
        <methodref name="SendCancelMode" visibility="protected"/>
        <methodref name="SendDockNotification" visibility="protected"/>
        <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
        <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
        <methodref name="SetName" visibility="protected" procflags="override"/>
        <methodref name="SetParent" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
        <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
        <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
        <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
        <methodref name="SetCustomHint" visibility="protected"/>
        <methodref name="UpdateExplicitBounds" visibility="protected"/>
        <methodref name="UpdateBoundsRect" visibility="protected"/>
        <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
        <methodref name="WndProc" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
        <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
        <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
        <propertyref name="ActionLink" visibility="protected"/>
        <propertyref name="AutoSize" visibility="protected"/>
        <propertyref name="Caption" visibility="protected"/>
        <propertyref name="DesktopFont" visibility="protected"/>
        <propertyref name="DragKind" visibility="protected"/>
        <propertyref name="DragCursor" visibility="protected"/>
        <propertyref name="DragMode" visibility="protected"/>
        <propertyref name="IsControl" visibility="protected"/>
        <propertyref name="MouseCapture" visibility="protected"/>
        <propertyref name="ParentBiDiMode" visibility="protected"/>
        <propertyref name="ParentColor" visibility="protected"/>
        <propertyref name="ParentFont" visibility="protected"/>
        <propertyref name="ParentShowHint" visibility="protected"/>
        <propertyref name="PopupMenu" visibility="protected"/>
        <propertyref name="ScalingFlags" visibility="protected"/>
        <propertyref name="Text" visibility="protected"/>
        <propertyref name="WheelAccumulator" visibility="protected"/>
        <propertyref name="Color" visibility="protected"/>
        <propertyref name="Font" visibility="protected"/>
        <propertyref name="IScaling" visibility="protected"/>
        <propertyref name="WindowText" visibility="protected"/>
        <eventref name="OnCanResize" visibility="protected"/>
        <eventref name="OnClick" visibility="protected"/>
        <eventref name="OnConstrainedResize" visibility="protected"/>
        <eventref name="OnContextPopup" visibility="protected"/>
        <eventref name="OnDblClick" visibility="protected"/>
        <eventref name="OnDragDrop" visibility="protected"/>
        <eventref name="OnDragOver" visibility="protected"/>
        <eventref name="OnEndDock" visibility="protected"/>
        <eventref name="OnEndDrag" visibility="protected"/>
        <eventref name="OnMouseActivate" visibility="protected"/>
        <eventref name="OnMouseDown" visibility="protected"/>
        <eventref name="OnMouseEnter" visibility="protected"/>
        <eventref name="OnMouseLeave" visibility="protected"/>
        <eventref name="OnMouseMove" visibility="protected"/>
        <eventref name="OnMouseUp" visibility="protected"/>
        <eventref name="OnMouseWheel" visibility="protected"/>
        <eventref name="OnMouseWheelDown" visibility="protected"/>
        <eventref name="OnMouseWheelUp" visibility="protected"/>
        <eventref name="OnResize" visibility="protected"/>
        <eventref name="OnStartDock" visibility="protected"/>
        <eventref name="OnStartDrag" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="CheckNonMainThreadUsage" visibility="public"/>
        <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
        <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
        <methodref name="BeginDrag" visibility="public"/>
        <methodref name="BringToFront" visibility="public"/>
        <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
        <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
        <methodref name="ClientToParent" visibility="public"/>
        <methodref name="Dock" visibility="public" procflags="dynamic"/>
        <methodref name="Dragging" visibility="public"/>
        <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
        <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
        <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
        <propertyref name="Enabled" visibility="public"/>
        <methodref name="EndDrag" visibility="public"/>
        <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
        <methodref name="GetParentComponent" visibility="public" procflags="override"/>
        <methodref name="HasParent" visibility="public" procflags="override"/>
        <methodref name="Hide" visibility="public"/>
        <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
        <methodref name="Invalidate" visibility="public" procflags="virtual"/>
        <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
        <methodref name="IsRightToLeft" visibility="public"/>
        <methodref name="ManualDock" visibility="public"/>
        <methodref name="ManualFloat" visibility="public"/>
        <methodref name="Perform" visibility="public" procflags="overload"/>
        <methodref name="Refresh" visibility="public"/>
        <methodref name="Repaint" visibility="public" procflags="virtual"/>
        <methodref name="ReplaceDockedControl" visibility="public"/>
        <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
        <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
        <methodref name="ParentToClient" visibility="public"/>
        <methodref name="SendToBack" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="virtual"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
        <methodref name="SetParentComponent" visibility="public" procflags="override"/>
        <methodref name="Show" visibility="public"/>
        <methodref name="Update" visibility="public" procflags="virtual"/>
        <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
        <methodref name="UseRightToLeftReading" visibility="public"/>
        <methodref name="UseRightToLeftScrollBar" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="GetTextBuf" visibility="public"/>
        <methodref name="GetTextLen" visibility="public"/>
        <methodref name="Perform" visibility="public" procflags="overload"/>
        <methodref name="Perform" visibility="public" procflags="overload"/>
        <methodref name="SetTextBuf" visibility="public"/>
        <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
        <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleRectSize" visibility="public"/>
        <propertyref name="Action" visibility="public"/>
        <propertyref name="Align" visibility="public"/>
        <propertyref name="Anchors" visibility="public"/>
        <propertyref name="BiDiMode" visibility="public"/>
        <propertyref name="BoundsRect" visibility="public"/>
        <propertyref name="ClientHeight" visibility="public"/>
        <propertyref name="ClientOrigin" visibility="public"/>
        <propertyref name="ClientRect" visibility="public"/>
        <propertyref name="ClientWidth" visibility="public"/>
        <propertyref name="Constraints" visibility="public"/>
        <propertyref name="ControlState" visibility="public"/>
        <propertyref name="ControlStyle" visibility="public"/>
        <propertyref name="CurrentPPI" visibility="public"/>
        <propertyref name="DockOrientation" visibility="public"/>
        <propertyref name="ExplicitLeft" visibility="public"/>
        <propertyref name="ExplicitTop" visibility="public"/>
        <propertyref name="ExplicitWidth" visibility="public"/>
        <propertyref name="ExplicitHeight" visibility="public"/>
        <propertyref name="Floating" visibility="public"/>
        <propertyref name="FloatingDockSiteClass" visibility="public"/>
        <propertyref name="HostDockSite" visibility="public"/>
        <propertyref name="LRDockWidth" visibility="public"/>
        <propertyref name="ScaleFactor" visibility="public"/>
        <propertyref name="ShowHint" visibility="public"/>
        <propertyref name="TBDockHeight" visibility="public"/>
        <propertyref name="Touch" visibility="public"/>
        <propertyref name="UndockHeight" visibility="public"/>
        <propertyref name="UndockWidth" visibility="public"/>
        <propertyref name="Visible" visibility="public"/>
        <eventref name="WindowProc" visibility="public"/>
        <propertyref name="Parent" visibility="public"/>
        <propertyref name="StyleElements" visibility="public"/>
        <propertyref name="StyleName" visibility="public"/>
        <eventref name="OnGesture" visibility="public"/>
        <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
        <propertyref name="AlignWithMargins" visibility="published"/>
        <propertyref name="Left" visibility="published"/>
        <propertyref name="Top" visibility="published"/>
        <propertyref name="Width" visibility="published"/>
        <propertyref name="Height" visibility="published"/>
        <propertyref name="Cursor" visibility="published"/>
        <propertyref name="Hint" visibility="published"/>
        <propertyref name="HelpType" visibility="published"/>
        <propertyref name="HelpKeyword" visibility="published"/>
        <propertyref name="HelpContext" visibility="published"/>
        <propertyref name="Margins" visibility="published"/>
        <propertyref name="CustomHint" visibility="published"/>
        <propertyref name="ParentCustomHint" visibility="published"/>
        <ancestor name="TComponent" namespace="System.Classes">
          <interfaces>
            <implements name="IInterfaceComponentReference"/>
            <implements name="IInterface"/>
          </interfaces>
          <methodref name="GetComObject" visibility="private">
          </methodref>
          <methodref name="GetComponent" visibility="private">
          </methodref>
          <methodref name="GetComponentCount" visibility="private">
          </methodref>
          <methodref name="GetComponentIndex" visibility="private">
          </methodref>
          <methodref name="Insert" visibility="private">
          </methodref>
          <methodref name="ReadLeft" visibility="private">
          </methodref>
          <methodref name="ReadTop" visibility="private">
          </methodref>
          <methodref name="Remove" visibility="private">
          </methodref>
          <methodref name="RemoveNotification" visibility="private">
          </methodref>
          <methodref name="SetComponentIndex" visibility="private">
          </methodref>
          <methodref name="SetReference" visibility="private">
          </methodref>
          <methodref name="WriteLeft" visibility="private">
          </methodref>
          <methodref name="WriteTop" visibility="private">
          </methodref>
          <methodref name="IntfGetComponent" visibility="private">
          </methodref>
          <methodref name="DoGetDeltaStreams" visibility="private">
          </methodref>
          <methodref name="ReadDeltaStream" visibility="private">
          </methodref>
          <methodref name="ReadDeltaState" visibility="private">
          </methodref>
          <methodref name="FindSortedComponent" visibility="private">
          </methodref>
          <methodref name="AddSortedComponent" visibility="private">
          </methodref>
          <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
          </methodref>
          <methodref name="Create@" visibility="class private" procflags="class constructor noself">
          </methodref>
          <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ChangeName" visibility="protected">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="override">
          </methodref>
          <methodref name="GetChildren" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="override">
          </methodref>
          <methodref name="Loaded" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Notification" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="ReadState" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="CanObserve" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetObservers" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAncestor" visibility="protected">
          </methodref>
          <methodref name="SetDesigning" visibility="protected">
          </methodref>
          <methodref name="SetInline" visibility="protected">
          </methodref>
          <methodref name="SetDesignInstance" visibility="protected">
          </methodref>
          <methodref name="SetName" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Updating" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Updated" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
          </methodref>
          <methodref name="ValidateRename" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="WriteState" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="RemoveFreeNotifications" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="GetTypeInfoCount" visibility="protected">
          </methodref>
          <methodref name="GetTypeInfo" visibility="protected">
          </methodref>
          <methodref name="GetIDsOfNames" visibility="protected">
          </methodref>
          <methodref name="Invoke" visibility="protected">
          </methodref>
          <eventref name="OnGetDeltaStreams" visibility="protected">
          </eventref>
          <methodref name="Create" visibility="public" procflags="constructor virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="override">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndFunctionInvoke" visibility="public">
          </methodref>
          <methodref name="DestroyComponents" visibility="public">
          </methodref>
          <methodref name="Destroying" visibility="public">
          </methodref>
          <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="FindComponent" visibility="public">
          </methodref>
          <methodref name="FreeNotification" visibility="public">
          </methodref>
          <methodref name="RemoveFreeNotification" visibility="public">
          </methodref>
          <methodref name="FreeOnRelease" visibility="public">
          </methodref>
          <methodref name="GetEnumerator" visibility="public" procflags="inline">
          </methodref>
          <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="override">
          </methodref>
          <methodref name="HasParent" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="InsertComponent" visibility="public">
          </methodref>
          <methodref name="RemoveComponent" visibility="public">
          </methodref>
          <methodref name="SetSubComponent" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="override">
          </methodref>
          <methodref name="UpdateAction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="IsImplementorOf" visibility="public">
          </methodref>
          <methodref name="ReferenceInterface" visibility="public">
          </methodref>
          <propertyref name="ComObject" visibility="public">
          </propertyref>
          <propertyref name="Components" visibility="public">
          </propertyref>
          <propertyref name="ComponentCount" visibility="public">
          </propertyref>
          <propertyref name="ComponentIndex" visibility="public">
          </propertyref>
          <propertyref name="ComponentState" visibility="public">
          </propertyref>
          <propertyref name="ComponentStyle" visibility="public">
          </propertyref>
          <propertyref name="DesignInfo" visibility="public">
          </propertyref>
          <propertyref name="Owner" visibility="public">
          </propertyref>
          <propertyref name="VCLComObject" visibility="public">
          </propertyref>
          <propertyref name="Observers" visibility="public">
          </propertyref>
          <propertyref name="Name" visibility="published">
          </propertyref>
          <propertyref name="Tag" visibility="published">
          </propertyref>
          <ancestor name="TPersistent" namespace="System.Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Assign" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="dynamic">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public" procflags="constructor">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="DisposeOf" visibility="public" procflags="inline">
              </methodref>
              <methodref name="InitInstance" visibility="public" procflags="class">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public" procflags="inline">
              </methodref>
              <methodref name="ClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassNameIs" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassParent" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="ClassInfo" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InstanceSize" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InheritsFrom" visibility="public" procflags="class">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodName" visibility="public" procflags="class">
              </methodref>
              <methodref name="QualifiedClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="UnitName" visibility="public" procflags="class">
              </methodref>
              <methodref name="UnitScope" visibility="public" procflags="class">
              </methodref>
              <methodref name="Equals" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetHashCode" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ToString" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AfterConstruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Dispatch" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DefaultHandler" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="NewInstance" visibility="public" procflags="class virtual">
              </methodref>
              <methodref name="FreeInstance" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor virtual">
              </methodref>
              <methodref name="GetDisposed" visibility="protected" procflags="inline">
              </methodref>
              <methodref name="CheckDisposed" visibility="protected" procflags="inline">
              </methodref>
              <propertyref name="Disposed" visibility="protected">
              </propertyref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FCanvas" type="TCanvas" visibility="private" size="4" offset="688" file="Vcl.Controls.pas" line="2716"/>
      <procedure name="WMPaint" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2717">
        <parameters>
          <parameter name="Message" type="TWMPaint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2719">
      <devnotes><summary>
Renders the image of a custom control.
The Paint method for TCustomControl does nothing other than provide the interface for a method that responds to WM_PAINT messages. Paint is called by the PaintWindow method, after that method has supplied the Canvas with the handle to a device context. When creating a custom control, always override Paint to draw the image of the control.

Tip:  To determine which portions of the control's canvas need to be repainted when Paint is called, use the ClipRect property of the canvas.</summary></devnotes></procedure>
      <procedure name="PaintWindow" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2720">
        <parameters>
          <parameter name="DC" type="HDC"/>
        </parameters>
      <devnotes><summary>
Renders the image of the control on a specified device context.
PaintWindow is called automatically when a custom control receives a WM_PAINT message. PaintWindow assigns the device context specified by the DC parameter to the custom control's canvas, calls the Paint method, and finally removes the device context. Override PaintWindow to provide additional responses to the WM_PAINT message. To draw the image of the control, override the Paint method instead.
</summary></devnotes></procedure>
      <property name="Canvas" visibility="protected" read="FCanvas" type="TCanvas" file="Vcl.Controls.pas" line="2722"><devnotes><summary>
Specifies the TCanvas object that presents a drawing surface for the control.
Use the properties of the TCanvas object to draw or paint on the surface of the control. Canvas encapsulates a Windows device context, providing all the tools and methods needed for drawing and painting.
Canvas is a protected property that is usually redeclared as public in descendants of TCustomControl.
</summary></devnotes></property>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2731">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      <devnotes><summary>
Creates an instance of TCustomControl.
Calling Create constructs and initializes an instance of TCustomControl. However, you should never attempt to instantiate a TCustomControl. This class is intended solely as a base class from which other control classes descend and you should only call Create to instantiate one of these descendants. Controls placed on forms at design time are created automatically.
After calling the inherited constructor, Create initializes the control and also a TCanvas object for its Canvas property.
When overriding Create, always call the inherited Create method first, then proceed with the control's initialization. Remember to specify the override directive when overriding the Create method.

Note: If a component's constructor allocates resources or memory, also override the destructor to free those resources. </summary></devnotes></constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="2732">
        <parameters>
        </parameters>
      <devnotes><summary>
Destroys an instance of TCustomControl.
Do not call Destroy directly in an application. Instead, call Free. Free verifies that the control is not nil, and only then calls Destroy. 
Applications should only free controls explicitly when the constructor was called without assigning an owner to the control.
As the control is destroyed, it destroys the TCanvas object in its Canvas property. 
Override Destroy to free any memory or resources allocated in the Create method. When declaring a Destroy method in a descendent control type, always add the override directive to the declaration and call the inherited Destroy as the last statement in the redeclared method. 
When a control is created, Delphi automatically provides exception handling around the constructor call. The destructor is called if an exception escapes from the constructor. This means that the destructor code must be prepared to clean up a partially constructed instance. Check all data fields for zero before disposing of their contents.
</summary></devnotes></destructor>
    </members>
  <devnotes><summary>
Base class for controls that wrap Windows screen objects but perform their own rendering.
In most descendants of TWinControl, the job of drawing the control's surface belongs to the underlying Windows screen object. If a control has visible features that cannot be rendered by a Windows screen object, it requires access to a canvas object so it can do its own drawing.
TCustomControl is one of two base classes for controls that draw their own surfaces. Because TCustomControl is descended from TWinControl, instances of its descendants can receive focus and serve as containers.
Classes of controls that perform their own screen rendering and do not need the features of TWinControl should be descendants of TGraphicControl instead of TCustomControl. TGraphicControl objects can render themselves with less overhead, because they do not have underlying Windows screen objects.
TCustomControl objects have a Paint method, which is called whenever the control needs to render its image. Custom controls paint themselves using the Canvas property.
</summary></devnotes></class>
  <class name="TCustomTransparentControl" file="Vcl.Controls.pas" line="2735">
    <ancestor name="TCustomControl" namespace="Vcl.Controls">
      <methodref name="WMPaint" visibility="private" procflags="message"/>
      <methodref name="Paint" visibility="protected" procflags="virtual"/>
      <methodref name="PaintWindow" visibility="protected" procflags="override"/>
      <propertyref name="Canvas" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <ancestor name="TWinControl" namespace="Vcl.Controls">
        <methodref name="AlignControl" visibility="private"/>
        <methodref name="CalcConstraints" visibility="private"/>
        <methodref name="DoPaddingChange" visibility="private"/>
        <methodref name="GetAlignDisabled" visibility="private"/>
        <methodref name="GetControl" visibility="private"/>
        <methodref name="GetControlCount" visibility="private"/>
        <methodref name="GetDockClientCount" visibility="private"/>
        <methodref name="GetDockClients" visibility="private"/>
        <methodref name="GetHandle" visibility="private"/>
        <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
        <methodref name="GetTabOrder" visibility="private"/>
        <methodref name="GetVisibleDockClientCount" visibility="private"/>
        <methodref name="Insert" visibility="private"/>
        <methodref name="InvalidateFrame" visibility="private"/>
        <methodref name="InvokeHelp" visibility="private"/>
        <methodref name="IsCtl3DStored" visibility="private"/>
        <methodref name="IsDoubleBufferedStored" visibility="private"/>
        <methodref name="PrecedingWindow" visibility="private"/>
        <methodref name="ReadDesignSize" visibility="private"/>
        <methodref name="ReadPixelsPerInch" visibility="private"/>
        <methodref name="Remove" visibility="private"/>
        <methodref name="RemoveFocus" visibility="private"/>
        <methodref name="SetBevelCut" visibility="private"/>
        <methodref name="SetBevelEdges" visibility="private"/>
        <methodref name="SetBevelKind" visibility="private"/>
        <methodref name="SetBevelWidth" visibility="private"/>
        <methodref name="SetBorderWidth" visibility="private"/>
        <methodref name="SetCtl3D" visibility="private"/>
        <methodref name="SetDockSite" visibility="private"/>
        <methodref name="SetDoubleBuffered" visibility="private"/>
        <methodref name="SetPadding" visibility="private"/>
        <methodref name="SetParentCtl3D" visibility="private"/>
        <methodref name="SetParentWindow" visibility="private"/>
        <methodref name="SetTabOrder" visibility="private"/>
        <methodref name="SetTabStop" visibility="private"/>
        <methodref name="SetUseDockManager" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateTabOrder" visibility="private"/>
        <methodref name="UpdateShowing" visibility="private"/>
        <methodref name="WriteDesignSize" visibility="private"/>
        <methodref name="WritePixelsPerInch" visibility="private"/>
        <methodref name="IsMenuKey" visibility="private"/>
        <methodref name="GetIsDrawingLocked" visibility="private"/>
        <methodref name="GetRedrawDisabled" visibility="private"/>
        <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="WMPaint" visibility="private" procflags="message"/>
        <methodref name="WMCommand" visibility="private" procflags="message"/>
        <methodref name="WMNotify" visibility="private" procflags="message"/>
        <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="WMHScroll" visibility="private" procflags="message"/>
        <methodref name="WMVScroll" visibility="private" procflags="message"/>
        <methodref name="WMCompareItem" visibility="private" procflags="message"/>
        <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
        <methodref name="WMDrawItem" visibility="private" procflags="message"/>
        <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
        <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
        <methodref name="WMSize" visibility="private" procflags="message"/>
        <methodref name="WMMove" visibility="private" procflags="message"/>
        <methodref name="WMSetCursor" visibility="private" procflags="message"/>
        <methodref name="WMKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMChar" visibility="private" procflags="message"/>
        <methodref name="WMSysCommand" visibility="private" procflags="message"/>
        <methodref name="WMCharToItem" visibility="private" procflags="message"/>
        <methodref name="WMParentNotify" visibility="private" procflags="message"/>
        <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
        <methodref name="WMDestroy" visibility="private" procflags="message"/>
        <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
        <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
        <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
        <methodref name="WMNCPaint" visibility="private" procflags="message"/>
        <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
        <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
        <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="WMFontChange" visibility="private" procflags="message"/>
        <methodref name="WMTimeChange" visibility="private" procflags="message"/>
        <methodref name="WMSetFocus" visibility="private" procflags="message"/>
        <methodref name="WMKillFocus" visibility="private" procflags="message"/>
        <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
        <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="WMGesture" visibility="private" procflags="message"/>
        <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
        <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
        <methodref name="CMChanged" visibility="private" procflags="message"/>
        <methodref name="CMChildKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogChar" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
        <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
        <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnter" visibility="private" procflags="message"/>
        <methodref name="CMExit" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
        <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="CMFontChange" visibility="private" procflags="message"/>
        <methodref name="CMTimeChange" visibility="private" procflags="message"/>
        <methodref name="CMDrag" visibility="private" procflags="message"/>
        <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
        <methodref name="CNKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNKeyUp" visibility="private" procflags="message"/>
        <methodref name="CNChar" visibility="private" procflags="message"/>
        <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNSysChar" visibility="private" procflags="message"/>
        <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
        <methodref name="CMSysCommand" visibility="private" procflags="message"/>
        <methodref name="CMInvalidate" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMTextChanged" visibility="private" procflags="message"/>
        <methodref name="WMPrintClient" visibility="private" procflags="message"/>
        <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
        <methodref name="CMControlListChange" visibility="private" procflags="message"/>
        <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
        <methodref name="CMDockClient" visibility="private" procflags="message"/>
        <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="InvokeAsyncCalls" visibility="protected">
        </methodref>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="override"/>
        <methodref name="AddBiDiModeExStyle" visibility="protected"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustSize" visibility="protected" procflags="override"/>
        <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
        <methodref name="ArrangeControl" visibility="protected"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
        <methodref name="CanResize" visibility="protected" procflags="override"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
        <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
        <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
        <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
        <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
        <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
        <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="DoKeyDown" visibility="protected"/>
        <methodref name="DoKeyPress" visibility="protected"/>
        <methodref name="DoKeyUp" visibility="protected"/>
        <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
        <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
        <methodref name="FindNextControl" visibility="protected"/>
        <methodref name="FixupTabList" visibility="protected"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
        <methodref name="GetClientRect" visibility="protected" procflags="override"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
        <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
        <methodref name="GetParentHandle" visibility="protected"/>
        <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
        <methodref name="GetTopParentHandle" visibility="protected"/>
        <methodref name="InvalidateDockHostSite" visibility="protected"/>
        <methodref name="IsControlMouseMsg" visibility="protected"/>
        <methodref name="IsControlActivateMsg" visibility="protected"/>
        <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="NotifyControls" visibility="protected"/>
        <methodref name="PaintControls" visibility="protected"/>
        <methodref name="PaintHandler" visibility="protected"/>
        <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RecreateWnd" visibility="protected"/>
        <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="ResetImeComposition" visibility="protected"/>
        <methodref name="RequestAlign" visibility="protected" procflags="override"/>
        <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPIScreen" visibility="protected"/>
        <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="ScaleControls" visibility="protected"/>
        <methodref name="ScalePadding" visibility="protected"/>
        <methodref name="SelectFirst" visibility="protected"/>
        <methodref name="SelectNext" visibility="protected"/>
        <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
        <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetImeCompositionWindow" visibility="protected"/>
        <methodref name="SetParent" visibility="protected" procflags="override"/>
        <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="override"/>
        <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateBounds" visibility="protected"/>
        <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateRecreatingFlag" visibility="protected"/>
        <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateUIState" visibility="protected"/>
        <methodref name="WndProc" visibility="protected" procflags="override"/>
        <methodref name="CreateSubClass" visibility="protected"/>
        <methodref name="RemoveWindowProps" visibility="protected"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
        <propertyref name="AlignControlList" visibility="protected"/>
        <propertyref name="BevelEdges" visibility="protected"/>
        <propertyref name="BevelInner" visibility="protected"/>
        <propertyref name="BevelOuter" visibility="protected"/>
        <propertyref name="BevelKind" visibility="protected"/>
        <propertyref name="BevelWidth" visibility="protected"/>
        <propertyref name="BorderWidth" visibility="protected"/>
        <propertyref name="Ctl3D" visibility="protected"/>
        <propertyref name="ImeMode" visibility="protected"/>
        <propertyref name="ImeName" visibility="protected"/>
        <propertyref name="ParentBackground" visibility="protected"/>
        <propertyref name="ParentCtl3D" visibility="protected"/>
        <propertyref name="TipMode" visibility="protected"/>
        <propertyref name="DefWndProc" visibility="protected"/>
        <propertyref name="WindowHandle" visibility="protected"/>
        <eventref name="OnAlignInsertBefore" visibility="protected"/>
        <eventref name="OnAlignPosition" visibility="protected"/>
        <eventref name="OnDockDrop" visibility="protected"/>
        <eventref name="OnDockOver" visibility="protected"/>
        <eventref name="OnEnter" visibility="protected"/>
        <eventref name="OnExit" visibility="protected"/>
        <eventref name="OnGetSiteInfo" visibility="protected"/>
        <eventref name="OnKeyDown" visibility="protected"/>
        <eventref name="OnKeyPress" visibility="protected"/>
        <eventref name="OnKeyUp" visibility="protected"/>
        <eventref name="OnUnDock" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="CreateParented" visibility="public" procflags="constructor"/>
        <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="override">
        </methodref>
        <methodref name="Broadcast" visibility="public"/>
        <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
        <methodref name="ContainsControl" visibility="public"/>
        <methodref name="ControlAtPos" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="DisableAlign" visibility="public" procflags="inline"/>
        <propertyref name="DockClientCount" visibility="public"/>
        <propertyref name="DockClients" visibility="public"/>
        <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
        <propertyref name="DockSite" visibility="public"/>
        <propertyref name="DockManager" visibility="public"/>
        <propertyref name="DoubleBuffered" visibility="public"/>
        <methodref name="EnableAlign" visibility="public"/>
        <methodref name="FindChildControl" visibility="public"/>
        <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
        <methodref name="Focused" visibility="public" procflags="dynamic"/>
        <methodref name="GetChildren" visibility="public" procflags="override"/>
        <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
        <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
        <methodref name="HandleAllocated" visibility="public"/>
        <methodref name="HandleNeeded" visibility="public"/>
        <methodref name="InsertControl" visibility="public"/>
        <methodref name="Invalidate" visibility="public" procflags="override"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <propertyref name="PixelsPerInch" visibility="public"/>
        <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
        <methodref name="RemoveControl" visibility="public"/>
        <methodref name="Realign" visibility="public" procflags="inline"/>
        <methodref name="Repaint" visibility="public" procflags="override"/>
        <methodref name="ScaleBy" visibility="public"/>
        <methodref name="ScrollBy" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="override"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
        <methodref name="SetFocus" visibility="public" procflags="virtual"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <methodref name="UpdateControlState" visibility="public"/>
        <methodref name="LockDrawing" visibility="public"/>
        <methodref name="UnlockDrawing" visibility="public"/>
        <propertyref name="AlignDisabled" visibility="public"/>
        <propertyref name="MouseInClient" visibility="public"/>
        <propertyref name="VisibleDockClientCount" visibility="public"/>
        <propertyref name="Brush" visibility="public"/>
        <propertyref name="Controls" visibility="public"/>
        <propertyref name="ControlCount" visibility="public"/>
        <propertyref name="Handle" visibility="public"/>
        <propertyref name="Padding" visibility="public"/>
        <propertyref name="ParentDoubleBuffered" visibility="public"/>
        <propertyref name="ParentWindow" visibility="public"/>
        <propertyref name="Showing" visibility="public"/>
        <propertyref name="IsDrawingLocked" visibility="public"/>
        <propertyref name="RedrawDisabled" visibility="public"/>
        <propertyref name="TabOrder" visibility="public"/>
        <propertyref name="TabStop" visibility="public"/>
        <propertyref name="UseDockManager" visibility="public"/>
        <ancestor name="TControl" namespace="Vcl.Controls">
          <methodref name="GetCustomHint" visibility="private"/>
          <methodref name="CalcDockSizes" visibility="private"/>
          <methodref name="CheckNewSize" visibility="private"/>
          <methodref name="CreateFloatingDockSite" visibility="private"/>
          <methodref name="DoActionChange" visibility="private"/>
          <methodref name="DoCanAutoSize" visibility="private"/>
          <methodref name="DoCanResize" visibility="private"/>
          <methodref name="DoConstraintsChange" visibility="private"/>
          <methodref name="DoConstrainedResize" visibility="private"/>
          <methodref name="DoDragMsg" visibility="private"/>
          <methodref name="DoMouseActivate" visibility="private"/>
          <methodref name="DoMouseDown" visibility="private"/>
          <methodref name="DoMouseUp" visibility="private"/>
          <methodref name="DoMarginChange" visibility="private"/>
          <methodref name="FontChanged" visibility="private"/>
          <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
          <methodref name="GetBoundsRect" visibility="private"/>
          <methodref name="GetClientHeight" visibility="private"/>
          <methodref name="GetClientWidth" visibility="private"/>
          <methodref name="GetLRDockWidth" visibility="private"/>
          <methodref name="GetMouseCapture" visibility="private"/>
          <methodref name="GetTBDockHeight" visibility="private"/>
          <methodref name="GetUndockWidth" visibility="private"/>
          <methodref name="GetUndockHeight" visibility="private"/>
          <methodref name="InvalidateControl" visibility="private"/>
          <methodref name="IsAnchorsStored" visibility="private"/>
          <methodref name="IsBiDiModeStored" visibility="private"/>
          <methodref name="IsCaptionStored" visibility="private"/>
          <methodref name="IsColorStored" visibility="private"/>
          <methodref name="IsEnabledStored" visibility="private"/>
          <methodref name="IsFontStored" visibility="private"/>
          <methodref name="IsHintStored" visibility="private"/>
          <methodref name="IsHelpContextStored" visibility="private"/>
          <methodref name="IsOnClickStored" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="IsVisibleStored" visibility="private"/>
          <methodref name="ReadIsControl" visibility="private"/>
          <methodref name="ReadExplicitLeft" visibility="private"/>
          <methodref name="ReadExplicitTop" visibility="private"/>
          <methodref name="ReadExplicitWidth" visibility="private"/>
          <methodref name="ReadExplicitHeight" visibility="private"/>
          <methodref name="SetAlignWithMargins" visibility="private"/>
          <methodref name="SetAnchors" visibility="private"/>
          <methodref name="SetAction" visibility="private"/>
          <methodref name="SetAlign" visibility="private"/>
          <methodref name="SetBoundsRect" visibility="private"/>
          <methodref name="SetClientHeight" visibility="private"/>
          <methodref name="SetClientSize" visibility="private"/>
          <methodref name="SetClientWidth" visibility="private"/>
          <methodref name="SetColor" visibility="private"/>
          <methodref name="SetCursor" visibility="private"/>
          <methodref name="SetDesktopFont" visibility="private"/>
          <methodref name="SetFont" visibility="private"/>
          <methodref name="SetHeight" visibility="private"/>
          <methodref name="SetHelpContext" visibility="private"/>
          <methodref name="SetHelpKeyword" visibility="private"/>
          <methodref name="SetHostDockSite" visibility="private"/>
          <methodref name="SetLeft" visibility="private"/>
          <methodref name="SetMouseCapture" visibility="private"/>
          <methodref name="SetParentColor" visibility="private"/>
          <methodref name="SetParentFont" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetParentCustomHint" visibility="private"/>
          <methodref name="SetPopupMenu" visibility="private"/>
          <methodref name="SetTop" visibility="private"/>
          <methodref name="SetVisible" visibility="private"/>
          <methodref name="SetWidth" visibility="private"/>
          <methodref name="SetZOrderPosition" visibility="private"/>
          <methodref name="UpdateAnchorRules" visibility="private"/>
          <methodref name="WriteIsControl" visibility="private"/>
          <methodref name="WriteExplicitLeft" visibility="private"/>
          <methodref name="WriteExplicitTop" visibility="private"/>
          <methodref name="WriteExplicitWidth" visibility="private"/>
          <methodref name="WriteExplicitHeight" visibility="private"/>
          <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMouseMove" visibility="private" procflags="message"/>
          <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="WMCancelMode" visibility="private" procflags="message"/>
          <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
          <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
          <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
          <methodref name="CMFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
          <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
          <methodref name="CMHintShow" visibility="private" procflags="message"/>
          <methodref name="CMHitTest" visibility="private" procflags="message"/>
          <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
          <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
          <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
          <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="CMGesture" visibility="private" procflags="message"/>
          <methodref name="WMContextMenu" visibility="private" procflags="message"/>
          <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
          <methodref name="SetConstraints" visibility="private"/>
          <methodref name="SetMargins" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="GetText" visibility="private"/>
          <methodref name="SetText" visibility="private"/>
          <methodref name="CMFloat" visibility="private" procflags="message"/>
          <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
          <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
          <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
          <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
          <methodref name="AssignTo" visibility="protected" procflags="override"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="CanResize" visibility="protected" procflags="virtual"/>
          <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="Changed" visibility="protected"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="Click" visibility="protected" procflags="dynamic"/>
          <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
          <methodref name="CalcCursorPos" visibility="protected"/>
          <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
          <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
          <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
          <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
          <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="GetAction" visibility="protected" procflags="virtual"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
          <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
          <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
          <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
          <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
          <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragMode" visibility="protected"/>
          <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
          <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
          <methodref name="ReadState" visibility="protected" procflags="override"/>
          <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="dynamic"/>
          <methodref name="ScaleConstraints" visibility="protected"/>
          <methodref name="ScaleMargins" visibility="protected"/>
          <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
          <methodref name="SendCancelMode" visibility="protected"/>
          <methodref name="SendDockNotification" visibility="protected"/>
          <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="SetName" visibility="protected" procflags="override"/>
          <methodref name="SetParent" visibility="protected" procflags="virtual"/>
          <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
          <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
          <methodref name="SetCustomHint" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateBoundsRect" visibility="protected"/>
          <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
          <propertyref name="ActionLink" visibility="protected"/>
          <propertyref name="AutoSize" visibility="protected"/>
          <propertyref name="Caption" visibility="protected"/>
          <propertyref name="DesktopFont" visibility="protected"/>
          <propertyref name="DragKind" visibility="protected"/>
          <propertyref name="DragCursor" visibility="protected"/>
          <propertyref name="DragMode" visibility="protected"/>
          <propertyref name="IsControl" visibility="protected"/>
          <propertyref name="MouseCapture" visibility="protected"/>
          <propertyref name="ParentBiDiMode" visibility="protected"/>
          <propertyref name="ParentColor" visibility="protected"/>
          <propertyref name="ParentFont" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected"/>
          <propertyref name="PopupMenu" visibility="protected"/>
          <propertyref name="ScalingFlags" visibility="protected"/>
          <propertyref name="Text" visibility="protected"/>
          <propertyref name="WheelAccumulator" visibility="protected"/>
          <propertyref name="Color" visibility="protected"/>
          <propertyref name="Font" visibility="protected"/>
          <propertyref name="IScaling" visibility="protected"/>
          <propertyref name="WindowText" visibility="protected"/>
          <eventref name="OnCanResize" visibility="protected"/>
          <eventref name="OnClick" visibility="protected"/>
          <eventref name="OnConstrainedResize" visibility="protected"/>
          <eventref name="OnContextPopup" visibility="protected"/>
          <eventref name="OnDblClick" visibility="protected"/>
          <eventref name="OnDragDrop" visibility="protected"/>
          <eventref name="OnDragOver" visibility="protected"/>
          <eventref name="OnEndDock" visibility="protected"/>
          <eventref name="OnEndDrag" visibility="protected"/>
          <eventref name="OnMouseActivate" visibility="protected"/>
          <eventref name="OnMouseDown" visibility="protected"/>
          <eventref name="OnMouseEnter" visibility="protected"/>
          <eventref name="OnMouseLeave" visibility="protected"/>
          <eventref name="OnMouseMove" visibility="protected"/>
          <eventref name="OnMouseUp" visibility="protected"/>
          <eventref name="OnMouseWheel" visibility="protected"/>
          <eventref name="OnMouseWheelDown" visibility="protected"/>
          <eventref name="OnMouseWheelUp" visibility="protected"/>
          <eventref name="OnResize" visibility="protected"/>
          <eventref name="OnStartDock" visibility="protected"/>
          <eventref name="OnStartDrag" visibility="protected"/>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="CheckNonMainThreadUsage" visibility="public"/>
          <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
          <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
          <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
          <methodref name="BeginDrag" visibility="public"/>
          <methodref name="BringToFront" visibility="public"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToParent" visibility="public"/>
          <methodref name="Dock" visibility="public" procflags="dynamic"/>
          <methodref name="Dragging" visibility="public"/>
          <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
          <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
          <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <methodref name="EndDrag" visibility="public"/>
          <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="GetParentComponent" visibility="public" procflags="override"/>
          <methodref name="HasParent" visibility="public" procflags="override"/>
          <methodref name="Hide" visibility="public"/>
          <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
          <methodref name="Invalidate" visibility="public" procflags="virtual"/>
          <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
          <methodref name="IsRightToLeft" visibility="public"/>
          <methodref name="ManualDock" visibility="public"/>
          <methodref name="ManualFloat" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Refresh" visibility="public"/>
          <methodref name="Repaint" visibility="public" procflags="virtual"/>
          <methodref name="ReplaceDockedControl" visibility="public"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ParentToClient" visibility="public"/>
          <methodref name="SendToBack" visibility="public"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
          <methodref name="SetParentComponent" visibility="public" procflags="override"/>
          <methodref name="Show" visibility="public"/>
          <methodref name="Update" visibility="public" procflags="virtual"/>
          <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="UseRightToLeftReading" visibility="public"/>
          <methodref name="UseRightToLeftScrollBar" visibility="public"/>
          <methodref name="DefaultHandler" visibility="public" procflags="override"/>
          <methodref name="GetTextBuf" visibility="public"/>
          <methodref name="GetTextLen" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="SetTextBuf" visibility="public"/>
          <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
          <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleRectSize" visibility="public"/>
          <propertyref name="Action" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="BiDiMode" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ClientHeight" visibility="public"/>
          <propertyref name="ClientOrigin" visibility="public"/>
          <propertyref name="ClientRect" visibility="public"/>
          <propertyref name="ClientWidth" visibility="public"/>
          <propertyref name="Constraints" visibility="public"/>
          <propertyref name="ControlState" visibility="public"/>
          <propertyref name="ControlStyle" visibility="public"/>
          <propertyref name="CurrentPPI" visibility="public"/>
          <propertyref name="DockOrientation" visibility="public"/>
          <propertyref name="ExplicitLeft" visibility="public"/>
          <propertyref name="ExplicitTop" visibility="public"/>
          <propertyref name="ExplicitWidth" visibility="public"/>
          <propertyref name="ExplicitHeight" visibility="public"/>
          <propertyref name="Floating" visibility="public"/>
          <propertyref name="FloatingDockSiteClass" visibility="public"/>
          <propertyref name="HostDockSite" visibility="public"/>
          <propertyref name="LRDockWidth" visibility="public"/>
          <propertyref name="ScaleFactor" visibility="public"/>
          <propertyref name="ShowHint" visibility="public"/>
          <propertyref name="TBDockHeight" visibility="public"/>
          <propertyref name="Touch" visibility="public"/>
          <propertyref name="UndockHeight" visibility="public"/>
          <propertyref name="UndockWidth" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="WindowProc" visibility="public"/>
          <propertyref name="Parent" visibility="public"/>
          <propertyref name="StyleElements" visibility="public"/>
          <propertyref name="StyleName" visibility="public"/>
          <eventref name="OnGesture" visibility="public"/>
          <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
          <propertyref name="AlignWithMargins" visibility="published"/>
          <propertyref name="Left" visibility="published"/>
          <propertyref name="Top" visibility="published"/>
          <propertyref name="Width" visibility="published"/>
          <propertyref name="Height" visibility="published"/>
          <propertyref name="Cursor" visibility="published"/>
          <propertyref name="Hint" visibility="published"/>
          <propertyref name="HelpType" visibility="published"/>
          <propertyref name="HelpKeyword" visibility="published"/>
          <propertyref name="HelpContext" visibility="published"/>
          <propertyref name="Margins" visibility="published"/>
          <propertyref name="CustomHint" visibility="published"/>
          <propertyref name="ParentCustomHint" visibility="published"/>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FInterceptMouse" type="Boolean" visibility="private" size="1" offset="696" file="Vcl.Controls.pas" line="2737"/>
      <procedure name="WMNCHitTest" visibility="protected" procflags="message" file="Vcl.Controls.pas" line="2739">
        <parameters>
          <parameter name="Message" type="TWMNCHitTest" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CreateParams" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2740">
        <parameters>
          <parameter name="Params" type="TCreateParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="InvalidateControlsUnderneath" visibility="protected" file="Vcl.Controls.pas" line="2741">
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2743">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <procedure name="Invalidate" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2744">
      </procedure>
      <property name="InterceptMouse" visibility="public" read="FInterceptMouse" write="FInterceptMouse" type="Boolean" default="0" file="Vcl.Controls.pas" line="2745"/>
    </members>
  </class>
  <class name="THintWindow" file="Vcl.Controls.pas" line="2748">
    <ancestor name="TCustomControl" namespace="Vcl.Controls">
      <methodref name="WMPaint" visibility="private" procflags="message"/>
      <methodref name="Paint" visibility="protected" procflags="virtual"/>
      <methodref name="PaintWindow" visibility="protected" procflags="override"/>
      <propertyref name="Canvas" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <ancestor name="TWinControl" namespace="Vcl.Controls">
        <methodref name="AlignControl" visibility="private"/>
        <methodref name="CalcConstraints" visibility="private"/>
        <methodref name="DoPaddingChange" visibility="private"/>
        <methodref name="GetAlignDisabled" visibility="private"/>
        <methodref name="GetControl" visibility="private"/>
        <methodref name="GetControlCount" visibility="private"/>
        <methodref name="GetDockClientCount" visibility="private"/>
        <methodref name="GetDockClients" visibility="private"/>
        <methodref name="GetHandle" visibility="private"/>
        <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
        <methodref name="GetTabOrder" visibility="private"/>
        <methodref name="GetVisibleDockClientCount" visibility="private"/>
        <methodref name="Insert" visibility="private"/>
        <methodref name="InvalidateFrame" visibility="private"/>
        <methodref name="InvokeHelp" visibility="private"/>
        <methodref name="IsCtl3DStored" visibility="private"/>
        <methodref name="IsDoubleBufferedStored" visibility="private"/>
        <methodref name="PrecedingWindow" visibility="private"/>
        <methodref name="ReadDesignSize" visibility="private"/>
        <methodref name="ReadPixelsPerInch" visibility="private"/>
        <methodref name="Remove" visibility="private"/>
        <methodref name="RemoveFocus" visibility="private"/>
        <methodref name="SetBevelCut" visibility="private"/>
        <methodref name="SetBevelEdges" visibility="private"/>
        <methodref name="SetBevelKind" visibility="private"/>
        <methodref name="SetBevelWidth" visibility="private"/>
        <methodref name="SetBorderWidth" visibility="private"/>
        <methodref name="SetCtl3D" visibility="private"/>
        <methodref name="SetDockSite" visibility="private"/>
        <methodref name="SetDoubleBuffered" visibility="private"/>
        <methodref name="SetPadding" visibility="private"/>
        <methodref name="SetParentCtl3D" visibility="private"/>
        <methodref name="SetParentWindow" visibility="private"/>
        <methodref name="SetTabOrder" visibility="private"/>
        <methodref name="SetTabStop" visibility="private"/>
        <methodref name="SetUseDockManager" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateTabOrder" visibility="private"/>
        <methodref name="UpdateShowing" visibility="private"/>
        <methodref name="WriteDesignSize" visibility="private"/>
        <methodref name="WritePixelsPerInch" visibility="private"/>
        <methodref name="IsMenuKey" visibility="private"/>
        <methodref name="GetIsDrawingLocked" visibility="private"/>
        <methodref name="GetRedrawDisabled" visibility="private"/>
        <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="WMPaint" visibility="private" procflags="message"/>
        <methodref name="WMCommand" visibility="private" procflags="message"/>
        <methodref name="WMNotify" visibility="private" procflags="message"/>
        <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="WMHScroll" visibility="private" procflags="message"/>
        <methodref name="WMVScroll" visibility="private" procflags="message"/>
        <methodref name="WMCompareItem" visibility="private" procflags="message"/>
        <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
        <methodref name="WMDrawItem" visibility="private" procflags="message"/>
        <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
        <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
        <methodref name="WMSize" visibility="private" procflags="message"/>
        <methodref name="WMMove" visibility="private" procflags="message"/>
        <methodref name="WMSetCursor" visibility="private" procflags="message"/>
        <methodref name="WMKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMChar" visibility="private" procflags="message"/>
        <methodref name="WMSysCommand" visibility="private" procflags="message"/>
        <methodref name="WMCharToItem" visibility="private" procflags="message"/>
        <methodref name="WMParentNotify" visibility="private" procflags="message"/>
        <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
        <methodref name="WMDestroy" visibility="private" procflags="message"/>
        <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
        <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
        <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
        <methodref name="WMNCPaint" visibility="private" procflags="message"/>
        <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
        <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
        <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="WMFontChange" visibility="private" procflags="message"/>
        <methodref name="WMTimeChange" visibility="private" procflags="message"/>
        <methodref name="WMSetFocus" visibility="private" procflags="message"/>
        <methodref name="WMKillFocus" visibility="private" procflags="message"/>
        <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
        <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="WMGesture" visibility="private" procflags="message"/>
        <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
        <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
        <methodref name="CMChanged" visibility="private" procflags="message"/>
        <methodref name="CMChildKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogChar" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
        <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
        <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnter" visibility="private" procflags="message"/>
        <methodref name="CMExit" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
        <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="CMFontChange" visibility="private" procflags="message"/>
        <methodref name="CMTimeChange" visibility="private" procflags="message"/>
        <methodref name="CMDrag" visibility="private" procflags="message"/>
        <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
        <methodref name="CNKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNKeyUp" visibility="private" procflags="message"/>
        <methodref name="CNChar" visibility="private" procflags="message"/>
        <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNSysChar" visibility="private" procflags="message"/>
        <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
        <methodref name="CMSysCommand" visibility="private" procflags="message"/>
        <methodref name="CMInvalidate" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMTextChanged" visibility="private" procflags="message"/>
        <methodref name="WMPrintClient" visibility="private" procflags="message"/>
        <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
        <methodref name="CMControlListChange" visibility="private" procflags="message"/>
        <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
        <methodref name="CMDockClient" visibility="private" procflags="message"/>
        <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="InvokeAsyncCalls" visibility="protected">
        </methodref>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="override"/>
        <methodref name="AddBiDiModeExStyle" visibility="protected"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustSize" visibility="protected" procflags="override"/>
        <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
        <methodref name="ArrangeControl" visibility="protected"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
        <methodref name="CanResize" visibility="protected" procflags="override"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
        <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
        <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
        <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
        <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
        <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
        <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="DoKeyDown" visibility="protected"/>
        <methodref name="DoKeyPress" visibility="protected"/>
        <methodref name="DoKeyUp" visibility="protected"/>
        <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
        <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
        <methodref name="FindNextControl" visibility="protected"/>
        <methodref name="FixupTabList" visibility="protected"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
        <methodref name="GetClientRect" visibility="protected" procflags="override"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
        <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
        <methodref name="GetParentHandle" visibility="protected"/>
        <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
        <methodref name="GetTopParentHandle" visibility="protected"/>
        <methodref name="InvalidateDockHostSite" visibility="protected"/>
        <methodref name="IsControlMouseMsg" visibility="protected"/>
        <methodref name="IsControlActivateMsg" visibility="protected"/>
        <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="NotifyControls" visibility="protected"/>
        <methodref name="PaintControls" visibility="protected"/>
        <methodref name="PaintHandler" visibility="protected"/>
        <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RecreateWnd" visibility="protected"/>
        <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="ResetImeComposition" visibility="protected"/>
        <methodref name="RequestAlign" visibility="protected" procflags="override"/>
        <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPIScreen" visibility="protected"/>
        <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="ScaleControls" visibility="protected"/>
        <methodref name="ScalePadding" visibility="protected"/>
        <methodref name="SelectFirst" visibility="protected"/>
        <methodref name="SelectNext" visibility="protected"/>
        <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
        <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetImeCompositionWindow" visibility="protected"/>
        <methodref name="SetParent" visibility="protected" procflags="override"/>
        <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="override"/>
        <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateBounds" visibility="protected"/>
        <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateRecreatingFlag" visibility="protected"/>
        <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateUIState" visibility="protected"/>
        <methodref name="WndProc" visibility="protected" procflags="override"/>
        <methodref name="CreateSubClass" visibility="protected"/>
        <methodref name="RemoveWindowProps" visibility="protected"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
        <propertyref name="AlignControlList" visibility="protected"/>
        <propertyref name="BevelEdges" visibility="protected"/>
        <propertyref name="BevelInner" visibility="protected"/>
        <propertyref name="BevelOuter" visibility="protected"/>
        <propertyref name="BevelKind" visibility="protected"/>
        <propertyref name="BevelWidth" visibility="protected"/>
        <propertyref name="BorderWidth" visibility="protected"/>
        <propertyref name="Ctl3D" visibility="protected"/>
        <propertyref name="ImeMode" visibility="protected"/>
        <propertyref name="ImeName" visibility="protected"/>
        <propertyref name="ParentBackground" visibility="protected"/>
        <propertyref name="ParentCtl3D" visibility="protected"/>
        <propertyref name="TipMode" visibility="protected"/>
        <propertyref name="DefWndProc" visibility="protected"/>
        <propertyref name="WindowHandle" visibility="protected"/>
        <eventref name="OnAlignInsertBefore" visibility="protected"/>
        <eventref name="OnAlignPosition" visibility="protected"/>
        <eventref name="OnDockDrop" visibility="protected"/>
        <eventref name="OnDockOver" visibility="protected"/>
        <eventref name="OnEnter" visibility="protected"/>
        <eventref name="OnExit" visibility="protected"/>
        <eventref name="OnGetSiteInfo" visibility="protected"/>
        <eventref name="OnKeyDown" visibility="protected"/>
        <eventref name="OnKeyPress" visibility="protected"/>
        <eventref name="OnKeyUp" visibility="protected"/>
        <eventref name="OnUnDock" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="CreateParented" visibility="public" procflags="constructor"/>
        <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="override">
        </methodref>
        <methodref name="Broadcast" visibility="public"/>
        <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
        <methodref name="ContainsControl" visibility="public"/>
        <methodref name="ControlAtPos" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="DisableAlign" visibility="public" procflags="inline"/>
        <propertyref name="DockClientCount" visibility="public"/>
        <propertyref name="DockClients" visibility="public"/>
        <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
        <propertyref name="DockSite" visibility="public"/>
        <propertyref name="DockManager" visibility="public"/>
        <propertyref name="DoubleBuffered" visibility="public"/>
        <methodref name="EnableAlign" visibility="public"/>
        <methodref name="FindChildControl" visibility="public"/>
        <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
        <methodref name="Focused" visibility="public" procflags="dynamic"/>
        <methodref name="GetChildren" visibility="public" procflags="override"/>
        <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
        <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
        <methodref name="HandleAllocated" visibility="public"/>
        <methodref name="HandleNeeded" visibility="public"/>
        <methodref name="InsertControl" visibility="public"/>
        <methodref name="Invalidate" visibility="public" procflags="override"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <propertyref name="PixelsPerInch" visibility="public"/>
        <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
        <methodref name="RemoveControl" visibility="public"/>
        <methodref name="Realign" visibility="public" procflags="inline"/>
        <methodref name="Repaint" visibility="public" procflags="override"/>
        <methodref name="ScaleBy" visibility="public"/>
        <methodref name="ScrollBy" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="override"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
        <methodref name="SetFocus" visibility="public" procflags="virtual"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <methodref name="UpdateControlState" visibility="public"/>
        <methodref name="LockDrawing" visibility="public"/>
        <methodref name="UnlockDrawing" visibility="public"/>
        <propertyref name="AlignDisabled" visibility="public"/>
        <propertyref name="MouseInClient" visibility="public"/>
        <propertyref name="VisibleDockClientCount" visibility="public"/>
        <propertyref name="Brush" visibility="public"/>
        <propertyref name="Controls" visibility="public"/>
        <propertyref name="ControlCount" visibility="public"/>
        <propertyref name="Handle" visibility="public"/>
        <propertyref name="Padding" visibility="public"/>
        <propertyref name="ParentDoubleBuffered" visibility="public"/>
        <propertyref name="ParentWindow" visibility="public"/>
        <propertyref name="Showing" visibility="public"/>
        <propertyref name="IsDrawingLocked" visibility="public"/>
        <propertyref name="RedrawDisabled" visibility="public"/>
        <propertyref name="TabOrder" visibility="public"/>
        <propertyref name="TabStop" visibility="public"/>
        <propertyref name="UseDockManager" visibility="public"/>
        <ancestor name="TControl" namespace="Vcl.Controls">
          <methodref name="GetCustomHint" visibility="private"/>
          <methodref name="CalcDockSizes" visibility="private"/>
          <methodref name="CheckNewSize" visibility="private"/>
          <methodref name="CreateFloatingDockSite" visibility="private"/>
          <methodref name="DoActionChange" visibility="private"/>
          <methodref name="DoCanAutoSize" visibility="private"/>
          <methodref name="DoCanResize" visibility="private"/>
          <methodref name="DoConstraintsChange" visibility="private"/>
          <methodref name="DoConstrainedResize" visibility="private"/>
          <methodref name="DoDragMsg" visibility="private"/>
          <methodref name="DoMouseActivate" visibility="private"/>
          <methodref name="DoMouseDown" visibility="private"/>
          <methodref name="DoMouseUp" visibility="private"/>
          <methodref name="DoMarginChange" visibility="private"/>
          <methodref name="FontChanged" visibility="private"/>
          <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
          <methodref name="GetBoundsRect" visibility="private"/>
          <methodref name="GetClientHeight" visibility="private"/>
          <methodref name="GetClientWidth" visibility="private"/>
          <methodref name="GetLRDockWidth" visibility="private"/>
          <methodref name="GetMouseCapture" visibility="private"/>
          <methodref name="GetTBDockHeight" visibility="private"/>
          <methodref name="GetUndockWidth" visibility="private"/>
          <methodref name="GetUndockHeight" visibility="private"/>
          <methodref name="InvalidateControl" visibility="private"/>
          <methodref name="IsAnchorsStored" visibility="private"/>
          <methodref name="IsBiDiModeStored" visibility="private"/>
          <methodref name="IsCaptionStored" visibility="private"/>
          <methodref name="IsColorStored" visibility="private"/>
          <methodref name="IsEnabledStored" visibility="private"/>
          <methodref name="IsFontStored" visibility="private"/>
          <methodref name="IsHintStored" visibility="private"/>
          <methodref name="IsHelpContextStored" visibility="private"/>
          <methodref name="IsOnClickStored" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="IsVisibleStored" visibility="private"/>
          <methodref name="ReadIsControl" visibility="private"/>
          <methodref name="ReadExplicitLeft" visibility="private"/>
          <methodref name="ReadExplicitTop" visibility="private"/>
          <methodref name="ReadExplicitWidth" visibility="private"/>
          <methodref name="ReadExplicitHeight" visibility="private"/>
          <methodref name="SetAlignWithMargins" visibility="private"/>
          <methodref name="SetAnchors" visibility="private"/>
          <methodref name="SetAction" visibility="private"/>
          <methodref name="SetAlign" visibility="private"/>
          <methodref name="SetBoundsRect" visibility="private"/>
          <methodref name="SetClientHeight" visibility="private"/>
          <methodref name="SetClientSize" visibility="private"/>
          <methodref name="SetClientWidth" visibility="private"/>
          <methodref name="SetColor" visibility="private"/>
          <methodref name="SetCursor" visibility="private"/>
          <methodref name="SetDesktopFont" visibility="private"/>
          <methodref name="SetFont" visibility="private"/>
          <methodref name="SetHeight" visibility="private"/>
          <methodref name="SetHelpContext" visibility="private"/>
          <methodref name="SetHelpKeyword" visibility="private"/>
          <methodref name="SetHostDockSite" visibility="private"/>
          <methodref name="SetLeft" visibility="private"/>
          <methodref name="SetMouseCapture" visibility="private"/>
          <methodref name="SetParentColor" visibility="private"/>
          <methodref name="SetParentFont" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetParentCustomHint" visibility="private"/>
          <methodref name="SetPopupMenu" visibility="private"/>
          <methodref name="SetTop" visibility="private"/>
          <methodref name="SetVisible" visibility="private"/>
          <methodref name="SetWidth" visibility="private"/>
          <methodref name="SetZOrderPosition" visibility="private"/>
          <methodref name="UpdateAnchorRules" visibility="private"/>
          <methodref name="WriteIsControl" visibility="private"/>
          <methodref name="WriteExplicitLeft" visibility="private"/>
          <methodref name="WriteExplicitTop" visibility="private"/>
          <methodref name="WriteExplicitWidth" visibility="private"/>
          <methodref name="WriteExplicitHeight" visibility="private"/>
          <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMouseMove" visibility="private" procflags="message"/>
          <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="WMCancelMode" visibility="private" procflags="message"/>
          <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
          <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
          <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
          <methodref name="CMFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
          <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
          <methodref name="CMHintShow" visibility="private" procflags="message"/>
          <methodref name="CMHitTest" visibility="private" procflags="message"/>
          <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
          <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
          <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
          <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="CMGesture" visibility="private" procflags="message"/>
          <methodref name="WMContextMenu" visibility="private" procflags="message"/>
          <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
          <methodref name="SetConstraints" visibility="private"/>
          <methodref name="SetMargins" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="GetText" visibility="private"/>
          <methodref name="SetText" visibility="private"/>
          <methodref name="CMFloat" visibility="private" procflags="message"/>
          <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
          <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
          <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
          <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
          <methodref name="AssignTo" visibility="protected" procflags="override"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="CanResize" visibility="protected" procflags="virtual"/>
          <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="Changed" visibility="protected"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="Click" visibility="protected" procflags="dynamic"/>
          <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
          <methodref name="CalcCursorPos" visibility="protected"/>
          <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
          <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
          <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
          <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
          <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="GetAction" visibility="protected" procflags="virtual"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
          <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
          <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
          <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
          <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
          <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragMode" visibility="protected"/>
          <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
          <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
          <methodref name="ReadState" visibility="protected" procflags="override"/>
          <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="dynamic"/>
          <methodref name="ScaleConstraints" visibility="protected"/>
          <methodref name="ScaleMargins" visibility="protected"/>
          <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
          <methodref name="SendCancelMode" visibility="protected"/>
          <methodref name="SendDockNotification" visibility="protected"/>
          <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="SetName" visibility="protected" procflags="override"/>
          <methodref name="SetParent" visibility="protected" procflags="virtual"/>
          <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
          <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
          <methodref name="SetCustomHint" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateBoundsRect" visibility="protected"/>
          <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
          <propertyref name="ActionLink" visibility="protected"/>
          <propertyref name="AutoSize" visibility="protected"/>
          <propertyref name="Caption" visibility="protected"/>
          <propertyref name="DesktopFont" visibility="protected"/>
          <propertyref name="DragKind" visibility="protected"/>
          <propertyref name="DragCursor" visibility="protected"/>
          <propertyref name="DragMode" visibility="protected"/>
          <propertyref name="IsControl" visibility="protected"/>
          <propertyref name="MouseCapture" visibility="protected"/>
          <propertyref name="ParentBiDiMode" visibility="protected"/>
          <propertyref name="ParentColor" visibility="protected"/>
          <propertyref name="ParentFont" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected"/>
          <propertyref name="PopupMenu" visibility="protected"/>
          <propertyref name="ScalingFlags" visibility="protected"/>
          <propertyref name="Text" visibility="protected"/>
          <propertyref name="WheelAccumulator" visibility="protected"/>
          <propertyref name="Color" visibility="protected"/>
          <propertyref name="Font" visibility="protected"/>
          <propertyref name="IScaling" visibility="protected"/>
          <propertyref name="WindowText" visibility="protected"/>
          <eventref name="OnCanResize" visibility="protected"/>
          <eventref name="OnClick" visibility="protected"/>
          <eventref name="OnConstrainedResize" visibility="protected"/>
          <eventref name="OnContextPopup" visibility="protected"/>
          <eventref name="OnDblClick" visibility="protected"/>
          <eventref name="OnDragDrop" visibility="protected"/>
          <eventref name="OnDragOver" visibility="protected"/>
          <eventref name="OnEndDock" visibility="protected"/>
          <eventref name="OnEndDrag" visibility="protected"/>
          <eventref name="OnMouseActivate" visibility="protected"/>
          <eventref name="OnMouseDown" visibility="protected"/>
          <eventref name="OnMouseEnter" visibility="protected"/>
          <eventref name="OnMouseLeave" visibility="protected"/>
          <eventref name="OnMouseMove" visibility="protected"/>
          <eventref name="OnMouseUp" visibility="protected"/>
          <eventref name="OnMouseWheel" visibility="protected"/>
          <eventref name="OnMouseWheelDown" visibility="protected"/>
          <eventref name="OnMouseWheelUp" visibility="protected"/>
          <eventref name="OnResize" visibility="protected"/>
          <eventref name="OnStartDock" visibility="protected"/>
          <eventref name="OnStartDrag" visibility="protected"/>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="CheckNonMainThreadUsage" visibility="public"/>
          <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
          <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
          <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
          <methodref name="BeginDrag" visibility="public"/>
          <methodref name="BringToFront" visibility="public"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToParent" visibility="public"/>
          <methodref name="Dock" visibility="public" procflags="dynamic"/>
          <methodref name="Dragging" visibility="public"/>
          <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
          <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
          <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <methodref name="EndDrag" visibility="public"/>
          <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="GetParentComponent" visibility="public" procflags="override"/>
          <methodref name="HasParent" visibility="public" procflags="override"/>
          <methodref name="Hide" visibility="public"/>
          <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
          <methodref name="Invalidate" visibility="public" procflags="virtual"/>
          <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
          <methodref name="IsRightToLeft" visibility="public"/>
          <methodref name="ManualDock" visibility="public"/>
          <methodref name="ManualFloat" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Refresh" visibility="public"/>
          <methodref name="Repaint" visibility="public" procflags="virtual"/>
          <methodref name="ReplaceDockedControl" visibility="public"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ParentToClient" visibility="public"/>
          <methodref name="SendToBack" visibility="public"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
          <methodref name="SetParentComponent" visibility="public" procflags="override"/>
          <methodref name="Show" visibility="public"/>
          <methodref name="Update" visibility="public" procflags="virtual"/>
          <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="UseRightToLeftReading" visibility="public"/>
          <methodref name="UseRightToLeftScrollBar" visibility="public"/>
          <methodref name="DefaultHandler" visibility="public" procflags="override"/>
          <methodref name="GetTextBuf" visibility="public"/>
          <methodref name="GetTextLen" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="SetTextBuf" visibility="public"/>
          <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
          <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleRectSize" visibility="public"/>
          <propertyref name="Action" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="BiDiMode" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ClientHeight" visibility="public"/>
          <propertyref name="ClientOrigin" visibility="public"/>
          <propertyref name="ClientRect" visibility="public"/>
          <propertyref name="ClientWidth" visibility="public"/>
          <propertyref name="Constraints" visibility="public"/>
          <propertyref name="ControlState" visibility="public"/>
          <propertyref name="ControlStyle" visibility="public"/>
          <propertyref name="CurrentPPI" visibility="public"/>
          <propertyref name="DockOrientation" visibility="public"/>
          <propertyref name="ExplicitLeft" visibility="public"/>
          <propertyref name="ExplicitTop" visibility="public"/>
          <propertyref name="ExplicitWidth" visibility="public"/>
          <propertyref name="ExplicitHeight" visibility="public"/>
          <propertyref name="Floating" visibility="public"/>
          <propertyref name="FloatingDockSiteClass" visibility="public"/>
          <propertyref name="HostDockSite" visibility="public"/>
          <propertyref name="LRDockWidth" visibility="public"/>
          <propertyref name="ScaleFactor" visibility="public"/>
          <propertyref name="ShowHint" visibility="public"/>
          <propertyref name="TBDockHeight" visibility="public"/>
          <propertyref name="Touch" visibility="public"/>
          <propertyref name="UndockHeight" visibility="public"/>
          <propertyref name="UndockWidth" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="WindowProc" visibility="public"/>
          <propertyref name="Parent" visibility="public"/>
          <propertyref name="StyleElements" visibility="public"/>
          <propertyref name="StyleName" visibility="public"/>
          <eventref name="OnGesture" visibility="public"/>
          <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
          <propertyref name="AlignWithMargins" visibility="published"/>
          <propertyref name="Left" visibility="published"/>
          <propertyref name="Top" visibility="published"/>
          <propertyref name="Width" visibility="published"/>
          <propertyref name="Height" visibility="published"/>
          <propertyref name="Cursor" visibility="published"/>
          <propertyref name="Hint" visibility="published"/>
          <propertyref name="HelpType" visibility="published"/>
          <propertyref name="HelpKeyword" visibility="published"/>
          <propertyref name="HelpContext" visibility="published"/>
          <propertyref name="Margins" visibility="published"/>
          <propertyref name="CustomHint" visibility="published"/>
          <propertyref name="ParentCustomHint" visibility="published"/>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FActivating" type="Boolean" visibility="private" size="1" offset="696" file="Vcl.Controls.pas" line="2750"/>
      <field name="FLastActive" type="Cardinal" visibility="private" size="4" offset="700" file="Vcl.Controls.pas" line="2751"/>
      <procedure name="WMNCHitTest" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2752">
        <parameters>
          <parameter name="Message" type="TWMNCHitTest" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCPaint" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2753">
        <parameters>
          <parameter name="Message" type="TWMNCPaint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMTextChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="2754">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CreateParams" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2756">
        <parameters>
          <parameter name="Params" type="TCreateParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="NCPaint" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2757">
        <parameters>
          <parameter name="DC" type="HDC"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2758">
      </procedure>
      <procedure name="WMPrint" visibility="protected" procflags="message" file="Vcl.Controls.pas" line="2759">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2761">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <procedure name="ActivateHint" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2762">
        <parameters>
          <parameter name="Rect" type="TRect"/>
          <parameter name="AHint" type="string" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="IsHintMsg" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2763">
        <parameters>
          <parameter name="Msg" type="tagMSG" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="ShouldHideHint" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2764">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ReleaseHandle" visibility="public" file="Vcl.Controls.pas" line="2765">
      </procedure>
      <procedure name="ActivateHintData" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2766">
        <parameters>
          <parameter name="Rect" type="TRect"/>
          <parameter name="AHint" type="string" paramflags="const"/>
          <parameter name="AData" type="Pointer"/>
        </parameters>
      </procedure>
      <function name="CalcHintRect" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2767">
        <parameters>
          <parameter name="MaxWidth" type="Integer"/>
          <parameter name="AHint" type="string" paramflags="const"/>
          <parameter name="AData" type="Pointer"/>
          <retval type="TRect"/>
        </parameters>
      </function>
      <property name="BiDiMode" visibility="public" read="FBiDiMode" write="SetBiDiMode" stored="IsBiDiModeStored" type="TBiDiMode" hoisted="true" file="Vcl.Controls.pas" line="2769"/>
      <property name="Caption" visibility="public" read="GetText" write="SetText" stored="IsCaptionStored" type="TCaption" default="0" hoisted="true" file="Vcl.Controls.pas" line="2770"/>
      <property name="Color" visibility="public" read="FColor" write="SetColor" stored="IsColorStored" type="TColor" default="-16777211" hoisted="true" file="Vcl.Controls.pas" line="2771"/>
      <property name="Canvas" visibility="public" read="FCanvas" type="TCanvas" hoisted="true" file="Vcl.Controls.pas" line="2772"/>
      <property name="Font" visibility="public" read="FFont" write="SetFont" stored="IsFontStored" type="TFont" hoisted="true" file="Vcl.Controls.pas" line="2773"/>
    </members>
  </class>
  <class name="TDragImageList" file="Vcl.Controls.pas" line="2778">
    <ancestor name="TCustomImageList" namespace="Vcl.ImgList">
      <methodref name="InitBitmap" visibility="private"/>
      <methodref name="CopyImages" visibility="private"/>
      <methodref name="CopyFromImageList" visibility="private"/>
      <methodref name="CreateImageList" visibility="private"/>
      <methodref name="Equal" visibility="private"/>
      <methodref name="FreeHandle" visibility="private"/>
      <methodref name="GetBitmapHandle" visibility="private"/>
      <methodref name="GetBkColor" visibility="private"/>
      <methodref name="GetHandle" visibility="private"/>
      <methodref name="GetImageHandle" visibility="private"/>
      <methodref name="InsertImage" visibility="private"/>
      <methodref name="SetBkColor" visibility="private"/>
      <methodref name="SetDrawingStyle" visibility="private"/>
      <methodref name="SetHandle" visibility="private"/>
      <methodref name="SetHeight" visibility="private"/>
      <methodref name="SetNewDimensions" visibility="private"/>
      <methodref name="SetShareImages" visibility="private"/>
      <methodref name="SetWidth" visibility="private"/>
      <methodref name="SetColorDepth" visibility="private"/>
      <methodref name="ReadD2Stream" visibility="private"/>
      <methodref name="ReadD3Stream" visibility="private"/>
      <methodref name="InternalGetInstRes" visibility="private"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="DefineProperties" visibility="protected" procflags="override"/>
      <methodref name="DoDraw" visibility="protected" procflags="virtual"/>
      <methodref name="GetCount" visibility="protected" procflags="override"/>
      <methodref name="GetImages" visibility="protected"/>
      <methodref name="HandleNeeded" visibility="protected"/>
      <methodref name="Initialize" visibility="protected" procflags="virtual"/>
      <methodref name="ReadData" visibility="protected" procflags="virtual"/>
      <methodref name="WriteData" visibility="protected" procflags="virtual"/>
      <methodref name="DoChange" visibility="protected" procflags="override"/>
      <propertyref name="StoreBitmap" visibility="protected"/>
      <propertyref name="Scaled" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="CreateSize" visibility="public" procflags="constructor"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="Assign" visibility="public" procflags="override"/>
      <methodref name="Add" visibility="public"/>
      <methodref name="AddIcon" visibility="public"/>
      <methodref name="AddImage" visibility="public"/>
      <methodref name="AddDisabledImage" visibility="public"/>
      <methodref name="AddImages" visibility="public"/>
      <methodref name="AddDisabledImages" visibility="public"/>
      <methodref name="AddMasked" visibility="public"/>
      <methodref name="Clear" visibility="public"/>
      <methodref name="Delete" visibility="public"/>
      <methodref name="Draw" visibility="public" procflags="overload"/>
      <methodref name="Draw" visibility="public" procflags="overload"/>
      <methodref name="DrawOverlay" visibility="public" procflags="overload"/>
      <methodref name="DrawOverlay" visibility="public" procflags="overload"/>
      <methodref name="FileLoad" visibility="public"/>
      <methodref name="GetBitmap" visibility="public"/>
      <methodref name="GetHotSpot" visibility="public" procflags="virtual"/>
      <methodref name="GetIcon" visibility="public" procflags="overload"/>
      <methodref name="GetIcon" visibility="public" procflags="overload"/>
      <methodref name="GetImageBitmap" visibility="public"/>
      <methodref name="GetMaskBitmap" visibility="public"/>
      <methodref name="GetResource" visibility="public"/>
      <methodref name="GetInstRes" visibility="public" procflags="overload"/>
      <methodref name="GetInstRes" visibility="public" procflags="overload"/>
      <methodref name="HandleAllocated" visibility="public" procflags="inline"/>
      <methodref name="Insert" visibility="public"/>
      <methodref name="InsertIcon" visibility="public"/>
      <methodref name="InsertMasked" visibility="public"/>
      <methodref name="Move" visibility="public"/>
      <methodref name="Overlay" visibility="public"/>
      <methodref name="RegisterChanges" visibility="public"/>
      <methodref name="ResourceLoad" visibility="public"/>
      <methodref name="ResInstLoad" visibility="public"/>
      <methodref name="Replace" visibility="public"/>
      <methodref name="ReplaceIcon" visibility="public"/>
      <methodref name="ReplaceMasked" visibility="public"/>
      <methodref name="SetSize" visibility="public"/>
      <methodref name="UnRegisterChanges" visibility="public"/>
      <propertyref name="ColorDepth" visibility="public"/>
      <propertyref name="Handle" visibility="public"/>
      <propertyref name="Scaling" visibility="public"/>
      <methodref name="IsImageNameAvailable" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="IsScaled" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetIndexByName" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetNameByIndex" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="CheckIndexAndName" visibility="public">
      </methodref>
      <propertyref name="AllocBy" visibility="public"/>
      <propertyref name="BlendColor" visibility="public"/>
      <propertyref name="GrayscaleFactor" visibility="public"/>
      <propertyref name="BkColor" visibility="public"/>
      <propertyref name="DrawingStyle" visibility="public"/>
      <propertyref name="Height" visibility="public"/>
      <propertyref name="ImageType" visibility="public"/>
      <propertyref name="Masked" visibility="public"/>
      <propertyref name="ShareImages" visibility="public"/>
      <propertyref name="Width" visibility="public"/>
      <eventref name="OnChange" visibility="public"/>
      <ancestor name="TBaseImageList" namespace="System.ImageList">
        <methodref name="GetLinkCount" visibility="private">
        </methodref>
        <methodref name="GetLinks" visibility="private">
        </methodref>
        <methodref name="AddLink" visibility="protected">
        </methodref>
        <methodref name="DeleteLink" visibility="protected">
        </methodref>
        <propertyref name="LinkCount" visibility="protected">
        </propertyref>
        <propertyref name="Links" visibility="protected">
        </propertyref>
        <methodref name="LinkContains" visibility="protected">
        </methodref>
        <methodref name="DoChange" visibility="protected" procflags="abstract virtual">
        </methodref>
        <methodref name="GetCount" visibility="protected" procflags="abstract virtual">
        </methodref>
        <methodref name="Updated" visibility="protected" procflags="override">
        </methodref>
        <methodref name="Loaded" visibility="protected" procflags="override">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="Change" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeginUpdate" visibility="public">
        </methodref>
        <methodref name="EndUpdate" visibility="public">
        </methodref>
        <propertyref name="Count" visibility="public">
        </propertyref>
        <ancestor name="TComponent" namespace="System.Classes">
          <interfaces>
            <implements name="IInterfaceComponentReference"/>
            <implements name="IInterface"/>
          </interfaces>
          <methodref name="GetComObject" visibility="private">
          </methodref>
          <methodref name="GetComponent" visibility="private">
          </methodref>
          <methodref name="GetComponentCount" visibility="private">
          </methodref>
          <methodref name="GetComponentIndex" visibility="private">
          </methodref>
          <methodref name="Insert" visibility="private">
          </methodref>
          <methodref name="ReadLeft" visibility="private">
          </methodref>
          <methodref name="ReadTop" visibility="private">
          </methodref>
          <methodref name="Remove" visibility="private">
          </methodref>
          <methodref name="RemoveNotification" visibility="private">
          </methodref>
          <methodref name="SetComponentIndex" visibility="private">
          </methodref>
          <methodref name="SetReference" visibility="private">
          </methodref>
          <methodref name="WriteLeft" visibility="private">
          </methodref>
          <methodref name="WriteTop" visibility="private">
          </methodref>
          <methodref name="IntfGetComponent" visibility="private">
          </methodref>
          <methodref name="DoGetDeltaStreams" visibility="private">
          </methodref>
          <methodref name="ReadDeltaStream" visibility="private">
          </methodref>
          <methodref name="ReadDeltaState" visibility="private">
          </methodref>
          <methodref name="FindSortedComponent" visibility="private">
          </methodref>
          <methodref name="AddSortedComponent" visibility="private">
          </methodref>
          <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
          </methodref>
          <methodref name="Create@" visibility="class private" procflags="class constructor noself">
          </methodref>
          <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ChangeName" visibility="protected">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="override">
          </methodref>
          <methodref name="GetChildren" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="override">
          </methodref>
          <methodref name="Loaded" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Notification" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="ReadState" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="CanObserve" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetObservers" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAncestor" visibility="protected">
          </methodref>
          <methodref name="SetDesigning" visibility="protected">
          </methodref>
          <methodref name="SetInline" visibility="protected">
          </methodref>
          <methodref name="SetDesignInstance" visibility="protected">
          </methodref>
          <methodref name="SetName" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Updating" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Updated" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
          </methodref>
          <methodref name="ValidateRename" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="WriteState" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="RemoveFreeNotifications" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="GetTypeInfoCount" visibility="protected">
          </methodref>
          <methodref name="GetTypeInfo" visibility="protected">
          </methodref>
          <methodref name="GetIDsOfNames" visibility="protected">
          </methodref>
          <methodref name="Invoke" visibility="protected">
          </methodref>
          <eventref name="OnGetDeltaStreams" visibility="protected">
          </eventref>
          <methodref name="Create" visibility="public" procflags="constructor virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="override">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndFunctionInvoke" visibility="public">
          </methodref>
          <methodref name="DestroyComponents" visibility="public">
          </methodref>
          <methodref name="Destroying" visibility="public">
          </methodref>
          <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="FindComponent" visibility="public">
          </methodref>
          <methodref name="FreeNotification" visibility="public">
          </methodref>
          <methodref name="RemoveFreeNotification" visibility="public">
          </methodref>
          <methodref name="FreeOnRelease" visibility="public">
          </methodref>
          <methodref name="GetEnumerator" visibility="public" procflags="inline">
          </methodref>
          <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="override">
          </methodref>
          <methodref name="HasParent" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="InsertComponent" visibility="public">
          </methodref>
          <methodref name="RemoveComponent" visibility="public">
          </methodref>
          <methodref name="SetSubComponent" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="override">
          </methodref>
          <methodref name="UpdateAction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="IsImplementorOf" visibility="public">
          </methodref>
          <methodref name="ReferenceInterface" visibility="public">
          </methodref>
          <propertyref name="ComObject" visibility="public">
          </propertyref>
          <propertyref name="Components" visibility="public">
          </propertyref>
          <propertyref name="ComponentCount" visibility="public">
          </propertyref>
          <propertyref name="ComponentIndex" visibility="public">
          </propertyref>
          <propertyref name="ComponentState" visibility="public">
          </propertyref>
          <propertyref name="ComponentStyle" visibility="public">
          </propertyref>
          <propertyref name="DesignInfo" visibility="public">
          </propertyref>
          <propertyref name="Owner" visibility="public">
          </propertyref>
          <propertyref name="VCLComObject" visibility="public">
          </propertyref>
          <propertyref name="Observers" visibility="public">
          </propertyref>
          <propertyref name="Name" visibility="published">
          </propertyref>
          <propertyref name="Tag" visibility="published">
          </propertyref>
          <ancestor name="TPersistent" namespace="System.Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Assign" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="dynamic">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public" procflags="constructor">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="DisposeOf" visibility="public" procflags="inline">
              </methodref>
              <methodref name="InitInstance" visibility="public" procflags="class">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public" procflags="inline">
              </methodref>
              <methodref name="ClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassNameIs" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassParent" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="ClassInfo" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InstanceSize" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InheritsFrom" visibility="public" procflags="class">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodName" visibility="public" procflags="class">
              </methodref>
              <methodref name="QualifiedClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="UnitName" visibility="public" procflags="class">
              </methodref>
              <methodref name="UnitScope" visibility="public" procflags="class">
              </methodref>
              <methodref name="Equals" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetHashCode" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ToString" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AfterConstruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Dispatch" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DefaultHandler" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="NewInstance" visibility="public" procflags="class virtual">
              </methodref>
              <methodref name="FreeInstance" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor virtual">
              </methodref>
              <methodref name="GetDisposed" visibility="protected" procflags="inline">
              </methodref>
              <methodref name="CheckDisposed" visibility="protected" procflags="inline">
              </methodref>
              <propertyref name="Disposed" visibility="protected">
              </propertyref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FDragCursor" type="TCursor" visibility="private" size="2" offset="144" file="Vcl.Controls.pas" line="2780"/>
      <field name="FDragging" type="Boolean" visibility="private" size="1" offset="146" file="Vcl.Controls.pas" line="2781"/>
      <field name="FDragHandle" type="HWND" visibility="private" size="4" offset="148" file="Vcl.Controls.pas" line="2782"/>
      <field name="FDragHotspot" type="TPoint" visibility="private" size="8" offset="152" file="Vcl.Controls.pas" line="2783"/>
      <field name="FDragIndex" type="Integer" visibility="private" size="4" offset="160" file="Vcl.Controls.pas" line="2784"/>
      <field name="FOldCursor" type="TCursor" visibility="private" size="2" offset="164" file="Vcl.Controls.pas" line="2785"/>
      <procedure name="SetDragCursor" visibility="private" file="Vcl.Controls.pas" line="2786">
        <parameters>
          <parameter name="Value" type="TCursor"/>
        </parameters>
      </procedure>
      <procedure name="Initialize" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="2788">
      </procedure>
      <function name="BeginDrag" visibility="public" file="Vcl.Controls.pas" line="2790">
        <parameters>
          <parameter name="Window" type="HWND"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="DragLock" visibility="public" file="Vcl.Controls.pas" line="2791">
        <parameters>
          <parameter name="Window" type="HWND"/>
          <parameter name="XPos" type="Integer"/>
          <parameter name="YPos" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="DragMove" visibility="public" file="Vcl.Controls.pas" line="2792">
        <parameters>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="DragUnlock" visibility="public" file="Vcl.Controls.pas" line="2793">
      </procedure>
      <function name="EndDrag" visibility="public" file="Vcl.Controls.pas" line="2794">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetHotSpot" visibility="public" procflags="override" file="Vcl.Controls.pas" line="2795">
        <parameters>
          <retval type="TPoint"/>
        </parameters>
      </function>
      <procedure name="HideDragImage" visibility="public" file="Vcl.Controls.pas" line="2796">
      </procedure>
      <function name="SetDragImage" visibility="public" file="Vcl.Controls.pas" line="2797">
        <parameters>
          <parameter name="Index" type="Integer"/>
          <parameter name="HotSpotX" type="Integer"/>
          <parameter name="HotSpotY" type="Integer"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="ShowDragImage" visibility="public" file="Vcl.Controls.pas" line="2798">
      </procedure>
      <property name="DragCursor" visibility="public" read="FDragCursor" write="SetDragCursor" type="TCursor" file="Vcl.Controls.pas" line="2799"/>
      <property name="DragHotspot" visibility="public" read="FDragHotspot" write="FDragHotspot" type="TPoint" file="Vcl.Controls.pas" line="2800"/>
      <property name="Dragging" visibility="public" read="FDragging" type="Boolean" file="Vcl.Controls.pas" line="2801"/>
      <property name="ColorDepth" visibility="published" read="FColorDepth" write="SetColorDepth" type="TColorDepth" default="1" hoisted="true" file="Vcl.Controls.pas" line="2803"/>
    </members>
  </class>
  <class name="TImageList" file="Vcl.Controls.pas" line="2808">
    <ancestor name="TDragImageList" namespace="Vcl.Controls">
      <methodref name="SetDragCursor" visibility="private"/>
      <methodref name="Initialize" visibility="protected" procflags="override"/>
      <methodref name="BeginDrag" visibility="public"/>
      <methodref name="DragLock" visibility="public"/>
      <methodref name="DragMove" visibility="public"/>
      <methodref name="DragUnlock" visibility="public"/>
      <methodref name="EndDrag" visibility="public"/>
      <methodref name="GetHotSpot" visibility="public" procflags="override"/>
      <methodref name="HideDragImage" visibility="public"/>
      <methodref name="SetDragImage" visibility="public"/>
      <methodref name="ShowDragImage" visibility="public"/>
      <propertyref name="DragCursor" visibility="public"/>
      <propertyref name="DragHotspot" visibility="public"/>
      <propertyref name="Dragging" visibility="public"/>
      <propertyref name="ColorDepth" visibility="published"/>
      <ancestor name="TCustomImageList" namespace="Vcl.ImgList">
        <methodref name="InitBitmap" visibility="private"/>
        <methodref name="CopyImages" visibility="private"/>
        <methodref name="CopyFromImageList" visibility="private"/>
        <methodref name="CreateImageList" visibility="private"/>
        <methodref name="Equal" visibility="private"/>
        <methodref name="FreeHandle" visibility="private"/>
        <methodref name="GetBitmapHandle" visibility="private"/>
        <methodref name="GetBkColor" visibility="private"/>
        <methodref name="GetHandle" visibility="private"/>
        <methodref name="GetImageHandle" visibility="private"/>
        <methodref name="InsertImage" visibility="private"/>
        <methodref name="SetBkColor" visibility="private"/>
        <methodref name="SetDrawingStyle" visibility="private"/>
        <methodref name="SetHandle" visibility="private"/>
        <methodref name="SetHeight" visibility="private"/>
        <methodref name="SetNewDimensions" visibility="private"/>
        <methodref name="SetShareImages" visibility="private"/>
        <methodref name="SetWidth" visibility="private"/>
        <methodref name="SetColorDepth" visibility="private"/>
        <methodref name="ReadD2Stream" visibility="private"/>
        <methodref name="ReadD3Stream" visibility="private"/>
        <methodref name="InternalGetInstRes" visibility="private"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DoDraw" visibility="protected" procflags="virtual"/>
        <methodref name="GetCount" visibility="protected" procflags="override"/>
        <methodref name="GetImages" visibility="protected"/>
        <methodref name="HandleNeeded" visibility="protected"/>
        <methodref name="Initialize" visibility="protected" procflags="virtual"/>
        <methodref name="ReadData" visibility="protected" procflags="virtual"/>
        <methodref name="WriteData" visibility="protected" procflags="virtual"/>
        <methodref name="DoChange" visibility="protected" procflags="override"/>
        <propertyref name="StoreBitmap" visibility="protected"/>
        <propertyref name="Scaled" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="CreateSize" visibility="public" procflags="constructor"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="Assign" visibility="public" procflags="override"/>
        <methodref name="Add" visibility="public"/>
        <methodref name="AddIcon" visibility="public"/>
        <methodref name="AddImage" visibility="public"/>
        <methodref name="AddDisabledImage" visibility="public"/>
        <methodref name="AddImages" visibility="public"/>
        <methodref name="AddDisabledImages" visibility="public"/>
        <methodref name="AddMasked" visibility="public"/>
        <methodref name="Clear" visibility="public"/>
        <methodref name="Delete" visibility="public"/>
        <methodref name="Draw" visibility="public" procflags="overload"/>
        <methodref name="Draw" visibility="public" procflags="overload"/>
        <methodref name="DrawOverlay" visibility="public" procflags="overload"/>
        <methodref name="DrawOverlay" visibility="public" procflags="overload"/>
        <methodref name="FileLoad" visibility="public"/>
        <methodref name="GetBitmap" visibility="public"/>
        <methodref name="GetHotSpot" visibility="public" procflags="virtual"/>
        <methodref name="GetIcon" visibility="public" procflags="overload"/>
        <methodref name="GetIcon" visibility="public" procflags="overload"/>
        <methodref name="GetImageBitmap" visibility="public"/>
        <methodref name="GetMaskBitmap" visibility="public"/>
        <methodref name="GetResource" visibility="public"/>
        <methodref name="GetInstRes" visibility="public" procflags="overload"/>
        <methodref name="GetInstRes" visibility="public" procflags="overload"/>
        <methodref name="HandleAllocated" visibility="public" procflags="inline"/>
        <methodref name="Insert" visibility="public"/>
        <methodref name="InsertIcon" visibility="public"/>
        <methodref name="InsertMasked" visibility="public"/>
        <methodref name="Move" visibility="public"/>
        <methodref name="Overlay" visibility="public"/>
        <methodref name="RegisterChanges" visibility="public"/>
        <methodref name="ResourceLoad" visibility="public"/>
        <methodref name="ResInstLoad" visibility="public"/>
        <methodref name="Replace" visibility="public"/>
        <methodref name="ReplaceIcon" visibility="public"/>
        <methodref name="ReplaceMasked" visibility="public"/>
        <methodref name="SetSize" visibility="public"/>
        <methodref name="UnRegisterChanges" visibility="public"/>
        <propertyref name="ColorDepth" visibility="public"/>
        <propertyref name="Handle" visibility="public"/>
        <propertyref name="Scaling" visibility="public"/>
        <methodref name="IsImageNameAvailable" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="IsScaled" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetIndexByName" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNameByIndex" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="CheckIndexAndName" visibility="public">
        </methodref>
        <propertyref name="AllocBy" visibility="public"/>
        <propertyref name="BlendColor" visibility="public"/>
        <propertyref name="GrayscaleFactor" visibility="public"/>
        <propertyref name="BkColor" visibility="public"/>
        <propertyref name="DrawingStyle" visibility="public"/>
        <propertyref name="Height" visibility="public"/>
        <propertyref name="ImageType" visibility="public"/>
        <propertyref name="Masked" visibility="public"/>
        <propertyref name="ShareImages" visibility="public"/>
        <propertyref name="Width" visibility="public"/>
        <eventref name="OnChange" visibility="public"/>
        <ancestor name="TBaseImageList" namespace="System.ImageList">
          <methodref name="GetLinkCount" visibility="private">
          </methodref>
          <methodref name="GetLinks" visibility="private">
          </methodref>
          <methodref name="AddLink" visibility="protected">
          </methodref>
          <methodref name="DeleteLink" visibility="protected">
          </methodref>
          <propertyref name="LinkCount" visibility="protected">
          </propertyref>
          <propertyref name="Links" visibility="protected">
          </propertyref>
          <methodref name="LinkContains" visibility="protected">
          </methodref>
          <methodref name="DoChange" visibility="protected" procflags="abstract virtual">
          </methodref>
          <methodref name="GetCount" visibility="protected" procflags="abstract virtual">
          </methodref>
          <methodref name="Updated" visibility="protected" procflags="override">
          </methodref>
          <methodref name="Loaded" visibility="protected" procflags="override">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="override">
          </methodref>
          <methodref name="Change" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeginUpdate" visibility="public">
          </methodref>
          <methodref name="EndUpdate" visibility="public">
          </methodref>
          <propertyref name="Count" visibility="public">
          </propertyref>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <property name="BlendColor" visibility="published" read="FBlendColor" write="FBlendColor" type="TColor" default="536870911" hoisted="true" file="Vcl.Controls.pas" line="2810"/>
      <property name="BkColor" visibility="published" read="GetBkColor" write="SetBkColor" type="TColor" default="536870911" hoisted="true" file="Vcl.Controls.pas" line="2811"/>
      <property name="AllocBy" visibility="published" read="FAllocBy" write="FAllocBy" type="Integer" default="4" hoisted="true" file="Vcl.Controls.pas" line="2812"/>
      <property name="ColorDepth" visibility="published" read="FColorDepth" write="SetColorDepth" type="TColorDepth" default="1" hoisted="true" file="Vcl.Controls.pas" line="2813"/>
      <property name="DrawingStyle" visibility="published" read="FDrawingStyle" write="SetDrawingStyle" type="TDrawingStyle" default="2" hoisted="true" file="Vcl.Controls.pas" line="2814"/>
      <property name="GrayscaleFactor" visibility="published" read="FGrayscaleFactor" write="FGrayscaleFactor" type="Byte" default="0" hoisted="true" file="Vcl.Controls.pas" line="2815"/>
      <property name="Height" visibility="published" read="FHeight" write="SetHeight" type="Integer" default="16" hoisted="true" file="Vcl.Controls.pas" line="2816"/>
      <property name="ImageType" visibility="published" read="FImageType" write="FImageType" type="TImageType" default="0" hoisted="true" file="Vcl.Controls.pas" line="2817"/>
      <property name="Masked" visibility="published" read="FMasked" write="FMasked" type="Boolean" default="1" hoisted="true" file="Vcl.Controls.pas" line="2818"/>
      <event name="OnChange" visibility="published" read="FOnChange" write="FOnChange" type="TNotifyEvent" hoisted="true" file="Vcl.Controls.pas" line="2819"/>
      <property name="ShareImages" visibility="published" read="FShareImages" write="SetShareImages" type="Boolean" default="0" hoisted="true" file="Vcl.Controls.pas" line="2820"/>
      <property name="Width" visibility="published" read="FWidth" write="SetWidth" type="Integer" default="16" hoisted="true" file="Vcl.Controls.pas" line="2821"/>
    </members>
  </class>
  <class name="TDockZone" file="Vcl.Controls.pas" line="2839">
    <devnotes>
       TDockZone encapsulates a region into which other zones are contained.
       A TDockZone can be a parent to other zones (when FChildZones &lt;&gt; nil) or
       can contain only a control (when FChildControl &lt;&gt; nil).  A TDockZone also
       stores pointers to previous and next siblings and its parent.  Parents
       store a pointer to only the first child in a doubly-linked list of child
       zones, though each child maintains a pointer to its parent.  Thus, the
       data structure of relating TDockZones works out to a kind of a
       doubly-linked list tree.  The FZoneLimit field of TDockZone represents
       the coordinate of either the left or bottom of the zone, depending on
       whether its parent zone's orientation is doVertical or doHorizontal.
    </devnotes>
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="FChildControl" type="TControl" visibility="private" size="4" offset="4" file="Vcl.Controls.pas" line="2841"/>
      <field name="FChildZones" type="TDockZone" visibility="private" size="4" offset="8" file="Vcl.Controls.pas" line="2842"/>
      <field name="FNextSibling" type="TDockZone" visibility="private" size="4" offset="12" file="Vcl.Controls.pas" line="2843"/>
      <field name="FOrientation" type="TDockOrientation" visibility="private" size="1" offset="16" file="Vcl.Controls.pas" line="2844"/>
      <field name="FParentZone" type="TDockZone" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="2845"/>
      <field name="FPrevSibling" type="TDockZone" visibility="private" size="4" offset="24" file="Vcl.Controls.pas" line="2846"/>
      <field name="FTree" type="TDockTree" visibility="private" size="4" offset="28" file="Vcl.Controls.pas" line="2847"/>
      <field name="FZoneLimit" type="Integer" visibility="private" size="4" offset="32" file="Vcl.Controls.pas" line="2848"/>
      <field name="FOldSize" type="Integer" visibility="private" size="4" offset="36" file="Vcl.Controls.pas" line="2849"/>
      <function name="GetChildCount" visibility="private" file="Vcl.Controls.pas" line="2850">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetControlName" visibility="private" file="Vcl.Controls.pas" line="2851">
        <parameters>
          <retval type="string"/>
        </parameters>
      </function>
      <function name="GetLimitBegin" visibility="private" file="Vcl.Controls.pas" line="2852">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetLimitSize" visibility="private" file="Vcl.Controls.pas" line="2853">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetTopLeft" visibility="private" file="Vcl.Controls.pas" line="2854">
        <parameters>
          <parameter name="Orient" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetHeightWidth" visibility="private" file="Vcl.Controls.pas" line="2855">
        <parameters>
          <parameter name="Orient" type="Integer"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetVisible" visibility="private" file="Vcl.Controls.pas" line="2856">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="GetVisibleChildCount" visibility="private" file="Vcl.Controls.pas" line="2857">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="GetZoneLimit" visibility="private" file="Vcl.Controls.pas" line="2858">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="SetControlName" visibility="private" file="Vcl.Controls.pas" line="2859">
        <parameters>
          <parameter name="Value" type="string" paramflags="const"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetZoneLimit" visibility="private" procflags="inline" file="Vcl.Controls.pas" line="2860">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2862">
        <parameters>
          <parameter name="Tree" type="TDockTree"/>
        </parameters>
      </constructor>
      <procedure name="ExpandZoneLimit" visibility="public" file="Vcl.Controls.pas" line="2863">
        <parameters>
          <parameter name="NewLimit" type="Integer"/>
        </parameters>
      </procedure>
      <function name="FirstVisibleChild" visibility="public" file="Vcl.Controls.pas" line="2864">
        <parameters>
          <retval type="TDockZone">
            <devnotes>
               TDockZone encapsulates a region into which other zones are contained.
               A TDockZone can be a parent to other zones (when FChildZones &lt;&gt; nil) or
               can contain only a control (when FChildControl &lt;&gt; nil).  A TDockZone also
               stores pointers to previous and next siblings and its parent.  Parents
               store a pointer to only the first child in a doubly-linked list of child
               zones, though each child maintains a pointer to its parent.  Thus, the
               data structure of relating TDockZones works out to a kind of a
               doubly-linked list tree.  The FZoneLimit field of TDockZone represents
               the coordinate of either the left or bottom of the zone, depending on
               whether its parent zone's orientation is doVertical or doHorizontal.
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="NextVisible" visibility="public" file="Vcl.Controls.pas" line="2865">
        <parameters>
          <retval type="TDockZone">
            <devnotes>
               TDockZone encapsulates a region into which other zones are contained.
               A TDockZone can be a parent to other zones (when FChildZones &lt;&gt; nil) or
               can contain only a control (when FChildControl &lt;&gt; nil).  A TDockZone also
               stores pointers to previous and next siblings and its parent.  Parents
               store a pointer to only the first child in a doubly-linked list of child
               zones, though each child maintains a pointer to its parent.  Thus, the
               data structure of relating TDockZones works out to a kind of a
               doubly-linked list tree.  The FZoneLimit field of TDockZone represents
               the coordinate of either the left or bottom of the zone, depending on
               whether its parent zone's orientation is doVertical or doHorizontal.
            </devnotes>
          </retval>
        </parameters>
      </function>
      <function name="PrevVisible" visibility="public" file="Vcl.Controls.pas" line="2866">
        <parameters>
          <retval type="TDockZone">
            <devnotes>
               TDockZone encapsulates a region into which other zones are contained.
               A TDockZone can be a parent to other zones (when FChildZones &lt;&gt; nil) or
               can contain only a control (when FChildControl &lt;&gt; nil).  A TDockZone also
               stores pointers to previous and next siblings and its parent.  Parents
               store a pointer to only the first child in a doubly-linked list of child
               zones, though each child maintains a pointer to its parent.  Thus, the
               data structure of relating TDockZones works out to a kind of a
               doubly-linked list tree.  The FZoneLimit field of TDockZone represents
               the coordinate of either the left or bottom of the zone, depending on
               whether its parent zone's orientation is doVertical or doHorizontal.
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="ResetChildren" visibility="public" file="Vcl.Controls.pas" line="2867">
      </procedure>
      <procedure name="ResetZoneLimits" visibility="public" file="Vcl.Controls.pas" line="2868">
      </procedure>
      <procedure name="Update" visibility="public" file="Vcl.Controls.pas" line="2869">
      </procedure>
      <property name="ChildCount" visibility="public" read="GetChildCount" type="Integer" file="Vcl.Controls.pas" line="2870"/>
      <property name="ChildControl" visibility="public" read="FChildControl" type="TControl" file="Vcl.Controls.pas" line="2871"/>
      <property name="Height" visibility="public" read="GetHeightWidth" type="Integer" index="1" file="Vcl.Controls.pas" line="2872"/>
      <property name="Left" visibility="public" read="GetTopLeft" type="Integer" index="2" file="Vcl.Controls.pas" line="2873"/>
      <property name="LimitBegin" visibility="public" read="GetLimitBegin" type="Integer" file="Vcl.Controls.pas" line="2874"/>
      <property name="LimitSize" visibility="public" read="GetLimitSize" type="Integer" file="Vcl.Controls.pas" line="2875"/>
      <property name="Top" visibility="public" read="GetTopLeft" type="Integer" index="1" file="Vcl.Controls.pas" line="2876"/>
      <property name="Visible" visibility="public" read="GetVisible" type="Boolean" file="Vcl.Controls.pas" line="2877"/>
      <property name="VisibleChildCount" visibility="public" read="GetVisibleChildCount" type="Integer" file="Vcl.Controls.pas" line="2878"/>
      <property name="Width" visibility="public" read="GetHeightWidth" type="Integer" index="2" file="Vcl.Controls.pas" line="2879"/>
      <property name="ZoneLimit" visibility="public" read="GetZoneLimit" write="SetZoneLimit" type="Integer" file="Vcl.Controls.pas" line="2880"/>
    </members>
  </class>
  <type name="TForEachZoneProc" file="Vcl.Controls.pas" line="2885" procflags="closure">
  </type>
  <classref name="TDockTreeClass" ref="TDockTree" file="Vcl.Controls.pas" line="2887"/>
  <class name="TDockTree" file="Vcl.Controls.pas" line="2893">
    <devnotes>
       TDockTree serves as a manager for a tree of TDockZones.  It is responsible
       for inserting and removing controls (and thus zones) from the tree and
       associated housekeeping, such as orientation, zone limits, parent zone
       creation, and painting of controls into zone bounds.
    </devnotes>
    <ancestor name="TInterfacedObject" namespace="System">
      <interfaces>
        <implements name="IInterface"/>
      </interfaces>
      <methodref name="GetRefCount" visibility="private" procflags="inline">
      </methodref>
      <methodref name="__MarkDestroying" visibility="protected" procflags="static inline">
      </methodref>
      <methodref name="QueryInterface" visibility="protected">
      </methodref>
      <methodref name="_AddRef" visibility="protected">
      </methodref>
      <methodref name="_Release" visibility="protected">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class override">
      </methodref>
      <propertyref name="RefCount" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <interfaces>
      <implements name="IDockManager"/>
    </interfaces>
    <members>
      <field name="FBorderWidth" type="Integer" visibility="private" size="4" offset="12" file="Vcl.Controls.pas" line="2895"/>
      <field name="FBrush" type="TBrush" visibility="private" size="4" offset="16" file="Vcl.Controls.pas" line="2896"/>
      <field name="FDockSite" type="TWinControl" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="2897"/>
      <field name="FGrabberSize" type="Integer" visibility="private" size="4" offset="24" file="Vcl.Controls.pas" line="2898"/>
      <field name="FGrabbersOnTop" type="Boolean" visibility="private" size="1" offset="28" file="Vcl.Controls.pas" line="2899"/>
      <field name="FOldRect" type="TRect" visibility="private" size="16" offset="32" file="Vcl.Controls.pas" line="2900"/>
      <field name="FOldWndProc" type="TWndMethod" visibility="private" size="8" offset="48" file="Vcl.Controls.pas" line="2901"/>
      <field name="FReplacementZone" type="TDockZone" visibility="private" size="4" offset="56" file="Vcl.Controls.pas" line="2902"/>
      <field name="FScaleBy" type="Double" visibility="private" size="8" offset="64" file="Vcl.Controls.pas" line="2903"/>
      <field name="FShiftScaleOrient" type="TDockOrientation" visibility="private" size="1" offset="72" file="Vcl.Controls.pas" line="2904"/>
      <field name="FShiftBy" type="Integer" visibility="private" size="4" offset="76" file="Vcl.Controls.pas" line="2905"/>
      <field name="FSizePos" type="TPoint" visibility="private" size="8" offset="80" file="Vcl.Controls.pas" line="2906"/>
      <field name="FSizingDC" type="HDC" visibility="private" size="4" offset="88" file="Vcl.Controls.pas" line="2907"/>
      <field name="FSizingWnd" type="HWND" visibility="private" size="4" offset="92" file="Vcl.Controls.pas" line="2908"/>
      <field name="FSizingZone" type="TDockZone" visibility="private" size="4" offset="96" file="Vcl.Controls.pas" line="2909"/>
      <field name="FTopZone" type="TDockZone" visibility="private" size="4" offset="100" file="Vcl.Controls.pas" line="2910"/>
      <field name="FTopXYLimit" type="Integer" visibility="private" size="4" offset="104" file="Vcl.Controls.pas" line="2911"/>
      <field name="FUpdateCount" type="Integer" visibility="private" size="4" offset="108" file="Vcl.Controls.pas" line="2912"/>
      <field name="FVersion" type="Integer" visibility="private" size="4" offset="112" file="Vcl.Controls.pas" line="2913"/>
      <field name="FRelativeSizes" type="Boolean" visibility="private" size="1" offset="116" file="Vcl.Controls.pas" line="2914"/>
      <procedure name="ControlVisibilityChanged" visibility="private" file="Vcl.Controls.pas" line="2915">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="Visible" type="Boolean"/>
        </parameters>
      </procedure>
      <function name="ActualSize" visibility="private" file="Vcl.Controls.pas" line="2916">
        <parameters>
          <parameter name="RelativeSize" type="Integer" paramflags="const"/>
          <parameter name="Reference" type="Integer" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="RelativeSize" visibility="private" file="Vcl.Controls.pas" line="2917">
        <parameters>
          <parameter name="ActualSize" type="Integer" paramflags="const"/>
          <parameter name="Reference" type="Integer" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="DrawSizeSplitter" visibility="private" file="Vcl.Controls.pas" line="2918">
      </procedure>
      <function name="FindControlZone" visibility="private" file="Vcl.Controls.pas" line="2919">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <retval type="TDockZone">
            <devnotes>
               TDockZone encapsulates a region into which other zones are contained.
               A TDockZone can be a parent to other zones (when FChildZones &lt;&gt; nil) or
               can contain only a control (when FChildControl &lt;&gt; nil).  A TDockZone also
               stores pointers to previous and next siblings and its parent.  Parents
               store a pointer to only the first child in a doubly-linked list of child
               zones, though each child maintains a pointer to its parent.  Thus, the
               data structure of relating TDockZones works out to a kind of a
               doubly-linked list tree.  The FZoneLimit field of TDockZone represents
               the coordinate of either the left or bottom of the zone, depending on
               whether its parent zone's orientation is doVertical or doHorizontal.
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="ForEachAt" visibility="private" file="Vcl.Controls.pas" line="2920">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
          <parameter name="Proc" type="TForEachZoneProc"/>
        </parameters>
      </procedure>
      <function name="GetNextLimit" visibility="private" file="Vcl.Controls.pas" line="2921">
        <parameters>
          <parameter name="AZone" type="TDockZone"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="InsertNewParent" visibility="private" file="Vcl.Controls.pas" line="2922">
        <parameters>
          <parameter name="NewZone" type="TDockZone"/>
          <parameter name="SiblingZone" type="TDockZone"/>
          <parameter name="ParentOrientation" type="TDockOrientation"/>
          <parameter name="InsertLast" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="InsertSibling" visibility="private" file="Vcl.Controls.pas" line="2924">
        <parameters>
          <parameter name="NewZone" type="TDockZone"/>
          <parameter name="SiblingZone" type="TDockZone"/>
          <parameter name="InsertLast" type="Boolean"/>
        </parameters>
      </procedure>
      <function name="InternalHitTest" visibility="private" file="Vcl.Controls.pas" line="2925">
        <parameters>
          <parameter name="MousePos" type="TPoint" paramflags="const"/>
          <parameter name="HTFlag" type="Integer" paramflags="out"/>
          <retval type="TDockZone">
            <devnotes>
               TDockZone encapsulates a region into which other zones are contained.
               A TDockZone can be a parent to other zones (when FChildZones &lt;&gt; nil) or
               can contain only a control (when FChildControl &lt;&gt; nil).  A TDockZone also
               stores pointers to previous and next siblings and its parent.  Parents
               store a pointer to only the first child in a doubly-linked list of child
               zones, though each child maintains a pointer to its parent.  Thus, the
               data structure of relating TDockZones works out to a kind of a
               doubly-linked list tree.  The FZoneLimit field of TDockZone represents
               the coordinate of either the left or bottom of the zone, depending on
               whether its parent zone's orientation is doVertical or doHorizontal.
            </devnotes>
          </retval>
        </parameters>
      </function>
      <procedure name="PruneZone" visibility="private" file="Vcl.Controls.pas" line="2926">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
        </parameters>
      </procedure>
      <procedure name="RemoveZone" visibility="private" file="Vcl.Controls.pas" line="2927">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
        </parameters>
      </procedure>
      <procedure name="ScaleZone" visibility="private" file="Vcl.Controls.pas" line="2928">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
        </parameters>
      </procedure>
      <procedure name="SetNewBounds" visibility="private" file="Vcl.Controls.pas" line="2929">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
        </parameters>
      </procedure>
      <procedure name="ShiftZone" visibility="private" file="Vcl.Controls.pas" line="2930">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
        </parameters>
      </procedure>
      <procedure name="SplitterMouseDown" visibility="private" file="Vcl.Controls.pas" line="2931">
        <parameters>
          <parameter name="OnZone" type="TDockZone"/>
          <parameter name="MousePos" type="TPoint"/>
        </parameters>
      </procedure>
      <procedure name="SplitterMouseUp" visibility="private" file="Vcl.Controls.pas" line="2932">
      </procedure>
      <procedure name="UpdateZone" visibility="private" file="Vcl.Controls.pas" line="2933">
        <parameters>
          <parameter name="Zone" type="TDockZone"/>
        </parameters>
      </procedure>
      <procedure name="WindowProc" visibility="private" file="Vcl.Controls.pas" line="2934">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="AdjustDockRect" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2936">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="ARect" type="TRect" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="AdjustFrameRect" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2937">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="ARect" type="TRect" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="BeginUpdate" visibility="protected" file="Vcl.Controls.pas" line="2938">
      </procedure>
      <procedure name="EndUpdate" visibility="protected" file="Vcl.Controls.pas" line="2939">
      </procedure>
      <function name="FindControlAtPos" visibility="protected" file="Vcl.Controls.pas" line="2940">
        <parameters>
          <parameter name="Pos" type="TPoint" paramflags="const"/>
          <retval type="TControl"/>
        </parameters>
      </function>
      <procedure name="GetControlBounds" visibility="protected" file="Vcl.Controls.pas" line="2941">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="CtlBounds" type="TRect" paramflags="out"/>
        </parameters>
      </procedure>
      <function name="HitTest" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2942">
        <parameters>
          <parameter name="MousePos" type="TPoint" paramflags="const"/>
          <parameter name="HTFlag" type="Integer" paramflags="out"/>
          <retval type="TControl"/>
        </parameters>
      </function>
      <procedure name="InsertControl" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2943">
        <parameters>
          <parameter name="Control" type="TControl"/>
          <parameter name="InsertAt" type="TAlign"/>
          <parameter name="DropCtl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="LoadFromStream" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2945">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      </procedure>
      <procedure name="MouseDown" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2946">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="MouseMove" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2948">
        <parameters>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="MouseLeave" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2950">
        <parameters>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="MouseUp" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2951">
        <parameters>
          <parameter name="Button" type="TMouseButton"/>
          <parameter name="Shift" type="TShiftState"/>
          <parameter name="X" type="Integer"/>
          <parameter name="Y" type="Integer"/>
          <parameter name="Handled" type="Boolean" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="PaintDockFrame" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2953">
        <parameters>
          <parameter name="Canvas" type="TCanvas"/>
          <parameter name="Control" type="TControl"/>
          <parameter name="ARect" type="TRect" paramflags="const"/>
        </parameters>
      </procedure>
      <procedure name="PositionDockRect" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2955">
        <parameters>
          <parameter name="Client" type="TControl"/>
          <parameter name="DropCtl" type="TControl"/>
          <parameter name="DropAlign" type="TAlign"/>
          <parameter name="DockRect" type="TRect" paramflags="var"/>
        </parameters>
      </procedure>
      <function name="ReferenceFromOrient" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2957">
        <parameters>
          <parameter name="Orient" type="TDockOrientation" paramflags="const"/>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="RemoveControl" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2958">
        <parameters>
          <parameter name="Control" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="SaveToStream" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2959">
        <parameters>
          <parameter name="Stream" type="TStream"/>
        </parameters>
      </procedure>
      <procedure name="SetReplacingControl" visibility="protected" file="Vcl.Controls.pas" line="2960">
        <parameters>
          <parameter name="Control" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="ShowHint" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2961">
        <parameters>
          <parameter name="CursorPos" type="TPoint"/>
          <parameter name="CursorRect" type="TRect" paramflags="var"/>
          <parameter name="HintStr" type="string" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="ResetBounds" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2963">
        <parameters>
          <parameter name="Force" type="Boolean"/>
        </parameters>
      </procedure>
      <procedure name="UpdateAll" visibility="protected" file="Vcl.Controls.pas" line="2964">
      </procedure>
      <procedure name="WndProc" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2965">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <function name="ZoneCaptionHitTest" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="2966">
        <parameters>
          <parameter name="Zone" type="TDockZone" paramflags="const"/>
          <parameter name="MousePos" type="TPoint" paramflags="const"/>
          <parameter name="HTFlag" type="Integer" paramflags="var"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <property name="DockSite" visibility="protected" read="FDockSite" write="FDockSite" type="TWinControl" file="Vcl.Controls.pas" line="2968"/>
      <property name="RelativeSizes" visibility="protected" read="FRelativeSizes" write="FRelativeSizes" type="Boolean" file="Vcl.Controls.pas" line="2969"/>
      <property name="TopZone" visibility="protected" read="FTopZone" type="TDockZone" file="Vcl.Controls.pas" line="2970"/>
      <property name="BorderWidth" visibility="protected" read="FBorderWidth" write="FBorderWidth" type="Integer" file="Vcl.Controls.pas" line="2971"/>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="2973">
        <parameters>
          <parameter name="DockSite" type="TWinControl"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="2974">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="PaintSite" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="2975">
        <parameters>
          <parameter name="DC" type="HDC"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <classref name="TPanningWindowClass" ref="TCustomPanningWindow" file="Vcl.Controls.pas" line="2980"/>
  <class name="TCustomPanningWindow" file="Vcl.Controls.pas" line="2983">
    <ancestor name="TCustomControl" namespace="Vcl.Controls">
      <methodref name="WMPaint" visibility="private" procflags="message"/>
      <methodref name="Paint" visibility="protected" procflags="virtual"/>
      <methodref name="PaintWindow" visibility="protected" procflags="override"/>
      <propertyref name="Canvas" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <ancestor name="TWinControl" namespace="Vcl.Controls">
        <methodref name="AlignControl" visibility="private"/>
        <methodref name="CalcConstraints" visibility="private"/>
        <methodref name="DoPaddingChange" visibility="private"/>
        <methodref name="GetAlignDisabled" visibility="private"/>
        <methodref name="GetControl" visibility="private"/>
        <methodref name="GetControlCount" visibility="private"/>
        <methodref name="GetDockClientCount" visibility="private"/>
        <methodref name="GetDockClients" visibility="private"/>
        <methodref name="GetHandle" visibility="private"/>
        <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
        <methodref name="GetTabOrder" visibility="private"/>
        <methodref name="GetVisibleDockClientCount" visibility="private"/>
        <methodref name="Insert" visibility="private"/>
        <methodref name="InvalidateFrame" visibility="private"/>
        <methodref name="InvokeHelp" visibility="private"/>
        <methodref name="IsCtl3DStored" visibility="private"/>
        <methodref name="IsDoubleBufferedStored" visibility="private"/>
        <methodref name="PrecedingWindow" visibility="private"/>
        <methodref name="ReadDesignSize" visibility="private"/>
        <methodref name="ReadPixelsPerInch" visibility="private"/>
        <methodref name="Remove" visibility="private"/>
        <methodref name="RemoveFocus" visibility="private"/>
        <methodref name="SetBevelCut" visibility="private"/>
        <methodref name="SetBevelEdges" visibility="private"/>
        <methodref name="SetBevelKind" visibility="private"/>
        <methodref name="SetBevelWidth" visibility="private"/>
        <methodref name="SetBorderWidth" visibility="private"/>
        <methodref name="SetCtl3D" visibility="private"/>
        <methodref name="SetDockSite" visibility="private"/>
        <methodref name="SetDoubleBuffered" visibility="private"/>
        <methodref name="SetPadding" visibility="private"/>
        <methodref name="SetParentCtl3D" visibility="private"/>
        <methodref name="SetParentWindow" visibility="private"/>
        <methodref name="SetTabOrder" visibility="private"/>
        <methodref name="SetTabStop" visibility="private"/>
        <methodref name="SetUseDockManager" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateTabOrder" visibility="private"/>
        <methodref name="UpdateShowing" visibility="private"/>
        <methodref name="WriteDesignSize" visibility="private"/>
        <methodref name="WritePixelsPerInch" visibility="private"/>
        <methodref name="IsMenuKey" visibility="private"/>
        <methodref name="GetIsDrawingLocked" visibility="private"/>
        <methodref name="GetRedrawDisabled" visibility="private"/>
        <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="WMPaint" visibility="private" procflags="message"/>
        <methodref name="WMCommand" visibility="private" procflags="message"/>
        <methodref name="WMNotify" visibility="private" procflags="message"/>
        <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="WMHScroll" visibility="private" procflags="message"/>
        <methodref name="WMVScroll" visibility="private" procflags="message"/>
        <methodref name="WMCompareItem" visibility="private" procflags="message"/>
        <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
        <methodref name="WMDrawItem" visibility="private" procflags="message"/>
        <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
        <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
        <methodref name="WMSize" visibility="private" procflags="message"/>
        <methodref name="WMMove" visibility="private" procflags="message"/>
        <methodref name="WMSetCursor" visibility="private" procflags="message"/>
        <methodref name="WMKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMChar" visibility="private" procflags="message"/>
        <methodref name="WMSysCommand" visibility="private" procflags="message"/>
        <methodref name="WMCharToItem" visibility="private" procflags="message"/>
        <methodref name="WMParentNotify" visibility="private" procflags="message"/>
        <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
        <methodref name="WMDestroy" visibility="private" procflags="message"/>
        <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
        <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
        <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
        <methodref name="WMNCPaint" visibility="private" procflags="message"/>
        <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
        <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
        <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="WMFontChange" visibility="private" procflags="message"/>
        <methodref name="WMTimeChange" visibility="private" procflags="message"/>
        <methodref name="WMSetFocus" visibility="private" procflags="message"/>
        <methodref name="WMKillFocus" visibility="private" procflags="message"/>
        <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
        <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="WMGesture" visibility="private" procflags="message"/>
        <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
        <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
        <methodref name="CMChanged" visibility="private" procflags="message"/>
        <methodref name="CMChildKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogChar" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
        <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
        <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnter" visibility="private" procflags="message"/>
        <methodref name="CMExit" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
        <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="CMFontChange" visibility="private" procflags="message"/>
        <methodref name="CMTimeChange" visibility="private" procflags="message"/>
        <methodref name="CMDrag" visibility="private" procflags="message"/>
        <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
        <methodref name="CNKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNKeyUp" visibility="private" procflags="message"/>
        <methodref name="CNChar" visibility="private" procflags="message"/>
        <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNSysChar" visibility="private" procflags="message"/>
        <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
        <methodref name="CMSysCommand" visibility="private" procflags="message"/>
        <methodref name="CMInvalidate" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMTextChanged" visibility="private" procflags="message"/>
        <methodref name="WMPrintClient" visibility="private" procflags="message"/>
        <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
        <methodref name="CMControlListChange" visibility="private" procflags="message"/>
        <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
        <methodref name="CMDockClient" visibility="private" procflags="message"/>
        <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="InvokeAsyncCalls" visibility="protected">
        </methodref>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="override"/>
        <methodref name="AddBiDiModeExStyle" visibility="protected"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustSize" visibility="protected" procflags="override"/>
        <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
        <methodref name="ArrangeControl" visibility="protected"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
        <methodref name="CanResize" visibility="protected" procflags="override"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
        <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
        <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
        <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
        <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
        <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
        <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="DoKeyDown" visibility="protected"/>
        <methodref name="DoKeyPress" visibility="protected"/>
        <methodref name="DoKeyUp" visibility="protected"/>
        <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
        <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
        <methodref name="FindNextControl" visibility="protected"/>
        <methodref name="FixupTabList" visibility="protected"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
        <methodref name="GetClientRect" visibility="protected" procflags="override"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
        <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
        <methodref name="GetParentHandle" visibility="protected"/>
        <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
        <methodref name="GetTopParentHandle" visibility="protected"/>
        <methodref name="InvalidateDockHostSite" visibility="protected"/>
        <methodref name="IsControlMouseMsg" visibility="protected"/>
        <methodref name="IsControlActivateMsg" visibility="protected"/>
        <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="NotifyControls" visibility="protected"/>
        <methodref name="PaintControls" visibility="protected"/>
        <methodref name="PaintHandler" visibility="protected"/>
        <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RecreateWnd" visibility="protected"/>
        <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="ResetImeComposition" visibility="protected"/>
        <methodref name="RequestAlign" visibility="protected" procflags="override"/>
        <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPIScreen" visibility="protected"/>
        <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="ScaleControls" visibility="protected"/>
        <methodref name="ScalePadding" visibility="protected"/>
        <methodref name="SelectFirst" visibility="protected"/>
        <methodref name="SelectNext" visibility="protected"/>
        <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
        <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetImeCompositionWindow" visibility="protected"/>
        <methodref name="SetParent" visibility="protected" procflags="override"/>
        <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="override"/>
        <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateBounds" visibility="protected"/>
        <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateRecreatingFlag" visibility="protected"/>
        <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateUIState" visibility="protected"/>
        <methodref name="WndProc" visibility="protected" procflags="override"/>
        <methodref name="CreateSubClass" visibility="protected"/>
        <methodref name="RemoveWindowProps" visibility="protected"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
        <propertyref name="AlignControlList" visibility="protected"/>
        <propertyref name="BevelEdges" visibility="protected"/>
        <propertyref name="BevelInner" visibility="protected"/>
        <propertyref name="BevelOuter" visibility="protected"/>
        <propertyref name="BevelKind" visibility="protected"/>
        <propertyref name="BevelWidth" visibility="protected"/>
        <propertyref name="BorderWidth" visibility="protected"/>
        <propertyref name="Ctl3D" visibility="protected"/>
        <propertyref name="ImeMode" visibility="protected"/>
        <propertyref name="ImeName" visibility="protected"/>
        <propertyref name="ParentBackground" visibility="protected"/>
        <propertyref name="ParentCtl3D" visibility="protected"/>
        <propertyref name="TipMode" visibility="protected"/>
        <propertyref name="DefWndProc" visibility="protected"/>
        <propertyref name="WindowHandle" visibility="protected"/>
        <eventref name="OnAlignInsertBefore" visibility="protected"/>
        <eventref name="OnAlignPosition" visibility="protected"/>
        <eventref name="OnDockDrop" visibility="protected"/>
        <eventref name="OnDockOver" visibility="protected"/>
        <eventref name="OnEnter" visibility="protected"/>
        <eventref name="OnExit" visibility="protected"/>
        <eventref name="OnGetSiteInfo" visibility="protected"/>
        <eventref name="OnKeyDown" visibility="protected"/>
        <eventref name="OnKeyPress" visibility="protected"/>
        <eventref name="OnKeyUp" visibility="protected"/>
        <eventref name="OnUnDock" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="CreateParented" visibility="public" procflags="constructor"/>
        <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="override">
        </methodref>
        <methodref name="Broadcast" visibility="public"/>
        <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
        <methodref name="ContainsControl" visibility="public"/>
        <methodref name="ControlAtPos" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="DisableAlign" visibility="public" procflags="inline"/>
        <propertyref name="DockClientCount" visibility="public"/>
        <propertyref name="DockClients" visibility="public"/>
        <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
        <propertyref name="DockSite" visibility="public"/>
        <propertyref name="DockManager" visibility="public"/>
        <propertyref name="DoubleBuffered" visibility="public"/>
        <methodref name="EnableAlign" visibility="public"/>
        <methodref name="FindChildControl" visibility="public"/>
        <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
        <methodref name="Focused" visibility="public" procflags="dynamic"/>
        <methodref name="GetChildren" visibility="public" procflags="override"/>
        <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
        <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
        <methodref name="HandleAllocated" visibility="public"/>
        <methodref name="HandleNeeded" visibility="public"/>
        <methodref name="InsertControl" visibility="public"/>
        <methodref name="Invalidate" visibility="public" procflags="override"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <propertyref name="PixelsPerInch" visibility="public"/>
        <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
        <methodref name="RemoveControl" visibility="public"/>
        <methodref name="Realign" visibility="public" procflags="inline"/>
        <methodref name="Repaint" visibility="public" procflags="override"/>
        <methodref name="ScaleBy" visibility="public"/>
        <methodref name="ScrollBy" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="override"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
        <methodref name="SetFocus" visibility="public" procflags="virtual"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <methodref name="UpdateControlState" visibility="public"/>
        <methodref name="LockDrawing" visibility="public"/>
        <methodref name="UnlockDrawing" visibility="public"/>
        <propertyref name="AlignDisabled" visibility="public"/>
        <propertyref name="MouseInClient" visibility="public"/>
        <propertyref name="VisibleDockClientCount" visibility="public"/>
        <propertyref name="Brush" visibility="public"/>
        <propertyref name="Controls" visibility="public"/>
        <propertyref name="ControlCount" visibility="public"/>
        <propertyref name="Handle" visibility="public"/>
        <propertyref name="Padding" visibility="public"/>
        <propertyref name="ParentDoubleBuffered" visibility="public"/>
        <propertyref name="ParentWindow" visibility="public"/>
        <propertyref name="Showing" visibility="public"/>
        <propertyref name="IsDrawingLocked" visibility="public"/>
        <propertyref name="RedrawDisabled" visibility="public"/>
        <propertyref name="TabOrder" visibility="public"/>
        <propertyref name="TabStop" visibility="public"/>
        <propertyref name="UseDockManager" visibility="public"/>
        <ancestor name="TControl" namespace="Vcl.Controls">
          <methodref name="GetCustomHint" visibility="private"/>
          <methodref name="CalcDockSizes" visibility="private"/>
          <methodref name="CheckNewSize" visibility="private"/>
          <methodref name="CreateFloatingDockSite" visibility="private"/>
          <methodref name="DoActionChange" visibility="private"/>
          <methodref name="DoCanAutoSize" visibility="private"/>
          <methodref name="DoCanResize" visibility="private"/>
          <methodref name="DoConstraintsChange" visibility="private"/>
          <methodref name="DoConstrainedResize" visibility="private"/>
          <methodref name="DoDragMsg" visibility="private"/>
          <methodref name="DoMouseActivate" visibility="private"/>
          <methodref name="DoMouseDown" visibility="private"/>
          <methodref name="DoMouseUp" visibility="private"/>
          <methodref name="DoMarginChange" visibility="private"/>
          <methodref name="FontChanged" visibility="private"/>
          <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
          <methodref name="GetBoundsRect" visibility="private"/>
          <methodref name="GetClientHeight" visibility="private"/>
          <methodref name="GetClientWidth" visibility="private"/>
          <methodref name="GetLRDockWidth" visibility="private"/>
          <methodref name="GetMouseCapture" visibility="private"/>
          <methodref name="GetTBDockHeight" visibility="private"/>
          <methodref name="GetUndockWidth" visibility="private"/>
          <methodref name="GetUndockHeight" visibility="private"/>
          <methodref name="InvalidateControl" visibility="private"/>
          <methodref name="IsAnchorsStored" visibility="private"/>
          <methodref name="IsBiDiModeStored" visibility="private"/>
          <methodref name="IsCaptionStored" visibility="private"/>
          <methodref name="IsColorStored" visibility="private"/>
          <methodref name="IsEnabledStored" visibility="private"/>
          <methodref name="IsFontStored" visibility="private"/>
          <methodref name="IsHintStored" visibility="private"/>
          <methodref name="IsHelpContextStored" visibility="private"/>
          <methodref name="IsOnClickStored" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="IsVisibleStored" visibility="private"/>
          <methodref name="ReadIsControl" visibility="private"/>
          <methodref name="ReadExplicitLeft" visibility="private"/>
          <methodref name="ReadExplicitTop" visibility="private"/>
          <methodref name="ReadExplicitWidth" visibility="private"/>
          <methodref name="ReadExplicitHeight" visibility="private"/>
          <methodref name="SetAlignWithMargins" visibility="private"/>
          <methodref name="SetAnchors" visibility="private"/>
          <methodref name="SetAction" visibility="private"/>
          <methodref name="SetAlign" visibility="private"/>
          <methodref name="SetBoundsRect" visibility="private"/>
          <methodref name="SetClientHeight" visibility="private"/>
          <methodref name="SetClientSize" visibility="private"/>
          <methodref name="SetClientWidth" visibility="private"/>
          <methodref name="SetColor" visibility="private"/>
          <methodref name="SetCursor" visibility="private"/>
          <methodref name="SetDesktopFont" visibility="private"/>
          <methodref name="SetFont" visibility="private"/>
          <methodref name="SetHeight" visibility="private"/>
          <methodref name="SetHelpContext" visibility="private"/>
          <methodref name="SetHelpKeyword" visibility="private"/>
          <methodref name="SetHostDockSite" visibility="private"/>
          <methodref name="SetLeft" visibility="private"/>
          <methodref name="SetMouseCapture" visibility="private"/>
          <methodref name="SetParentColor" visibility="private"/>
          <methodref name="SetParentFont" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetParentCustomHint" visibility="private"/>
          <methodref name="SetPopupMenu" visibility="private"/>
          <methodref name="SetTop" visibility="private"/>
          <methodref name="SetVisible" visibility="private"/>
          <methodref name="SetWidth" visibility="private"/>
          <methodref name="SetZOrderPosition" visibility="private"/>
          <methodref name="UpdateAnchorRules" visibility="private"/>
          <methodref name="WriteIsControl" visibility="private"/>
          <methodref name="WriteExplicitLeft" visibility="private"/>
          <methodref name="WriteExplicitTop" visibility="private"/>
          <methodref name="WriteExplicitWidth" visibility="private"/>
          <methodref name="WriteExplicitHeight" visibility="private"/>
          <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMouseMove" visibility="private" procflags="message"/>
          <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="WMCancelMode" visibility="private" procflags="message"/>
          <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
          <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
          <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
          <methodref name="CMFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
          <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
          <methodref name="CMHintShow" visibility="private" procflags="message"/>
          <methodref name="CMHitTest" visibility="private" procflags="message"/>
          <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
          <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
          <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
          <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="CMGesture" visibility="private" procflags="message"/>
          <methodref name="WMContextMenu" visibility="private" procflags="message"/>
          <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
          <methodref name="SetConstraints" visibility="private"/>
          <methodref name="SetMargins" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="GetText" visibility="private"/>
          <methodref name="SetText" visibility="private"/>
          <methodref name="CMFloat" visibility="private" procflags="message"/>
          <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
          <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
          <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
          <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
          <methodref name="AssignTo" visibility="protected" procflags="override"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="CanResize" visibility="protected" procflags="virtual"/>
          <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="Changed" visibility="protected"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="Click" visibility="protected" procflags="dynamic"/>
          <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
          <methodref name="CalcCursorPos" visibility="protected"/>
          <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
          <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
          <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
          <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
          <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="GetAction" visibility="protected" procflags="virtual"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
          <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
          <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
          <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
          <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
          <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragMode" visibility="protected"/>
          <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
          <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
          <methodref name="ReadState" visibility="protected" procflags="override"/>
          <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="dynamic"/>
          <methodref name="ScaleConstraints" visibility="protected"/>
          <methodref name="ScaleMargins" visibility="protected"/>
          <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
          <methodref name="SendCancelMode" visibility="protected"/>
          <methodref name="SendDockNotification" visibility="protected"/>
          <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="SetName" visibility="protected" procflags="override"/>
          <methodref name="SetParent" visibility="protected" procflags="virtual"/>
          <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
          <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
          <methodref name="SetCustomHint" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateBoundsRect" visibility="protected"/>
          <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
          <propertyref name="ActionLink" visibility="protected"/>
          <propertyref name="AutoSize" visibility="protected"/>
          <propertyref name="Caption" visibility="protected"/>
          <propertyref name="DesktopFont" visibility="protected"/>
          <propertyref name="DragKind" visibility="protected"/>
          <propertyref name="DragCursor" visibility="protected"/>
          <propertyref name="DragMode" visibility="protected"/>
          <propertyref name="IsControl" visibility="protected"/>
          <propertyref name="MouseCapture" visibility="protected"/>
          <propertyref name="ParentBiDiMode" visibility="protected"/>
          <propertyref name="ParentColor" visibility="protected"/>
          <propertyref name="ParentFont" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected"/>
          <propertyref name="PopupMenu" visibility="protected"/>
          <propertyref name="ScalingFlags" visibility="protected"/>
          <propertyref name="Text" visibility="protected"/>
          <propertyref name="WheelAccumulator" visibility="protected"/>
          <propertyref name="Color" visibility="protected"/>
          <propertyref name="Font" visibility="protected"/>
          <propertyref name="IScaling" visibility="protected"/>
          <propertyref name="WindowText" visibility="protected"/>
          <eventref name="OnCanResize" visibility="protected"/>
          <eventref name="OnClick" visibility="protected"/>
          <eventref name="OnConstrainedResize" visibility="protected"/>
          <eventref name="OnContextPopup" visibility="protected"/>
          <eventref name="OnDblClick" visibility="protected"/>
          <eventref name="OnDragDrop" visibility="protected"/>
          <eventref name="OnDragOver" visibility="protected"/>
          <eventref name="OnEndDock" visibility="protected"/>
          <eventref name="OnEndDrag" visibility="protected"/>
          <eventref name="OnMouseActivate" visibility="protected"/>
          <eventref name="OnMouseDown" visibility="protected"/>
          <eventref name="OnMouseEnter" visibility="protected"/>
          <eventref name="OnMouseLeave" visibility="protected"/>
          <eventref name="OnMouseMove" visibility="protected"/>
          <eventref name="OnMouseUp" visibility="protected"/>
          <eventref name="OnMouseWheel" visibility="protected"/>
          <eventref name="OnMouseWheelDown" visibility="protected"/>
          <eventref name="OnMouseWheelUp" visibility="protected"/>
          <eventref name="OnResize" visibility="protected"/>
          <eventref name="OnStartDock" visibility="protected"/>
          <eventref name="OnStartDrag" visibility="protected"/>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="CheckNonMainThreadUsage" visibility="public"/>
          <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
          <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
          <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
          <methodref name="BeginDrag" visibility="public"/>
          <methodref name="BringToFront" visibility="public"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToParent" visibility="public"/>
          <methodref name="Dock" visibility="public" procflags="dynamic"/>
          <methodref name="Dragging" visibility="public"/>
          <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
          <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
          <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <methodref name="EndDrag" visibility="public"/>
          <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="GetParentComponent" visibility="public" procflags="override"/>
          <methodref name="HasParent" visibility="public" procflags="override"/>
          <methodref name="Hide" visibility="public"/>
          <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
          <methodref name="Invalidate" visibility="public" procflags="virtual"/>
          <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
          <methodref name="IsRightToLeft" visibility="public"/>
          <methodref name="ManualDock" visibility="public"/>
          <methodref name="ManualFloat" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Refresh" visibility="public"/>
          <methodref name="Repaint" visibility="public" procflags="virtual"/>
          <methodref name="ReplaceDockedControl" visibility="public"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ParentToClient" visibility="public"/>
          <methodref name="SendToBack" visibility="public"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
          <methodref name="SetParentComponent" visibility="public" procflags="override"/>
          <methodref name="Show" visibility="public"/>
          <methodref name="Update" visibility="public" procflags="virtual"/>
          <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="UseRightToLeftReading" visibility="public"/>
          <methodref name="UseRightToLeftScrollBar" visibility="public"/>
          <methodref name="DefaultHandler" visibility="public" procflags="override"/>
          <methodref name="GetTextBuf" visibility="public"/>
          <methodref name="GetTextLen" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="SetTextBuf" visibility="public"/>
          <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
          <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleRectSize" visibility="public"/>
          <propertyref name="Action" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="BiDiMode" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ClientHeight" visibility="public"/>
          <propertyref name="ClientOrigin" visibility="public"/>
          <propertyref name="ClientRect" visibility="public"/>
          <propertyref name="ClientWidth" visibility="public"/>
          <propertyref name="Constraints" visibility="public"/>
          <propertyref name="ControlState" visibility="public"/>
          <propertyref name="ControlStyle" visibility="public"/>
          <propertyref name="CurrentPPI" visibility="public"/>
          <propertyref name="DockOrientation" visibility="public"/>
          <propertyref name="ExplicitLeft" visibility="public"/>
          <propertyref name="ExplicitTop" visibility="public"/>
          <propertyref name="ExplicitWidth" visibility="public"/>
          <propertyref name="ExplicitHeight" visibility="public"/>
          <propertyref name="Floating" visibility="public"/>
          <propertyref name="FloatingDockSiteClass" visibility="public"/>
          <propertyref name="HostDockSite" visibility="public"/>
          <propertyref name="LRDockWidth" visibility="public"/>
          <propertyref name="ScaleFactor" visibility="public"/>
          <propertyref name="ShowHint" visibility="public"/>
          <propertyref name="TBDockHeight" visibility="public"/>
          <propertyref name="Touch" visibility="public"/>
          <propertyref name="UndockHeight" visibility="public"/>
          <propertyref name="UndockWidth" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="WindowProc" visibility="public"/>
          <propertyref name="Parent" visibility="public"/>
          <propertyref name="StyleElements" visibility="public"/>
          <propertyref name="StyleName" visibility="public"/>
          <eventref name="OnGesture" visibility="public"/>
          <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
          <propertyref name="AlignWithMargins" visibility="published"/>
          <propertyref name="Left" visibility="published"/>
          <propertyref name="Top" visibility="published"/>
          <propertyref name="Width" visibility="published"/>
          <propertyref name="Height" visibility="published"/>
          <propertyref name="Cursor" visibility="published"/>
          <propertyref name="Hint" visibility="published"/>
          <propertyref name="HelpType" visibility="published"/>
          <propertyref name="HelpKeyword" visibility="published"/>
          <propertyref name="HelpContext" visibility="published"/>
          <propertyref name="Margins" visibility="published"/>
          <propertyref name="CustomHint" visibility="published"/>
          <propertyref name="ParentCustomHint" visibility="published"/>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetIsPanning" visibility="published" procflags="abstract virtual" file="Vcl.Controls.pas" line="2984">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="StartPanning" visibility="published" procflags="abstract virtual" file="Vcl.Controls.pas" line="2985">
        <parameters>
          <parameter name="AHandle" type="NativeUInt"/>
          <parameter name="AControl" type="TControl"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="StopPanning" visibility="published" procflags="abstract virtual" file="Vcl.Controls.pas" line="2986">
      </procedure>
    </members>
  </class>
  <enum name="TWheelRouting" file="Vcl.Controls.pas" line="2990">
    <devnotes>
       <summary>An enumerated type defining values for TMouse.WheelRouting</summary>
    </devnotes>
    <element value="0" name="wrFocusedWindow" file="Vcl.Controls.pas" line="2996">
      <devnotes>
         <summary>
           Mouse wheel input is delivered to the app with focus.
           This value is means the Windows Mouse setting
           &quot;Scroll inactive windows when I hover over them&quot; is On
         </summary>
      </devnotes>
    </element>
    <element value="1" name="wrHybrid" file="Vcl.Controls.pas" line="3001">
      <devnotes>
         <summary>
           Mouse wheel input is delivered to the app with focus (desktop apps)
           or the app under the mouse cursor (Windows Store apps)
         </summary>
      </devnotes>
    </element>
    <element value="2" name="wrMousePos" file="Vcl.Controls.pas" line="3007">
      <devnotes>
         <summary>
           Mouse wheel input is delivered to the app under the mouse cursor.
           This value is means the Windows Mouse setting
           &quot;Scroll inactive windows when I hover over them&quot; is On
         </summary>
      </devnotes>
    </element>
  </enum>
  <class name="TMouse" file="Vcl.Controls.pas" line="3009">
    <ancestor name="TObject" namespace="System">
      <methodref name="Create" visibility="public" procflags="constructor">
      </methodref>
      <methodref name="Free" visibility="public">
      </methodref>
      <methodref name="DisposeOf" visibility="public" procflags="inline">
      </methodref>
      <methodref name="InitInstance" visibility="public" procflags="class">
      </methodref>
      <methodref name="CleanupInstance" visibility="public">
      </methodref>
      <methodref name="ClassType" visibility="public" procflags="inline">
      </methodref>
      <methodref name="ClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassNameIs" visibility="public" procflags="class">
      </methodref>
      <methodref name="ClassParent" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="ClassInfo" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InstanceSize" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="InheritsFrom" visibility="public" procflags="class">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodAddress" visibility="public" procflags="class overload">
      </methodref>
      <methodref name="MethodName" visibility="public" procflags="class">
      </methodref>
      <methodref name="QualifiedClassName" visibility="public" procflags="class">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="FieldAddress" visibility="public" procflags="overload">
      </methodref>
      <methodref name="GetInterface" visibility="public">
      </methodref>
      <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
      </methodref>
      <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
      </methodref>
      <methodref name="UnitName" visibility="public" procflags="class">
      </methodref>
      <methodref name="UnitScope" visibility="public" procflags="class">
      </methodref>
      <methodref name="Equals" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="GetHashCode" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="ToString" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Dispatch" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="DefaultHandler" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="NewInstance" visibility="public" procflags="class virtual">
      </methodref>
      <methodref name="FreeInstance" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor virtual">
      </methodref>
      <methodref name="GetDisposed" visibility="protected" procflags="inline">
      </methodref>
      <methodref name="CheckDisposed" visibility="protected" procflags="inline">
      </methodref>
      <propertyref name="Disposed" visibility="protected">
      </propertyref>
    </ancestor>
    <members>
      <field name="FDragImmediate" type="Boolean" visibility="private" size="1" offset="4" file="Vcl.Controls.pas" line="3011"/>
      <field name="FDragThreshold" type="Integer" visibility="private" size="4" offset="8" file="Vcl.Controls.pas" line="3012"/>
      <field name="FMousePresent" type="Boolean" visibility="private" size="1" offset="12" file="Vcl.Controls.pas" line="3013"/>
      <field name="FNativeWheelSupport" type="Boolean" visibility="private" size="1" offset="13" file="Vcl.Controls.pas" line="3014"/>
      <field name="FScrollLines" type="Integer" visibility="private" size="4" offset="16" file="Vcl.Controls.pas" line="3015"/>
      <field name="FScrollLinesMessage" type="Cardinal" visibility="private" size="4" offset="20" file="Vcl.Controls.pas" line="3016"/>
      <field name="FWheelHwnd" type="HWND" visibility="private" size="4" offset="24" file="Vcl.Controls.pas" line="3017"/>
      <field name="FWheelMessage" type="Cardinal" visibility="private" size="4" offset="28" file="Vcl.Controls.pas" line="3018"/>
      <field name="FWheelPresent" type="Boolean" visibility="private" size="1" offset="32" file="Vcl.Controls.pas" line="3019"/>
      <field name="FWheelSupportMessage" type="Cardinal" visibility="private" size="4" offset="36" file="Vcl.Controls.pas" line="3020"/>
      <field name="FPanningWindow" type="TCustomPanningWindow" visibility="private" size="4" offset="40" file="Vcl.Controls.pas" line="3021"/>
      <field name="FPanningWindowClass" type="TPanningWindowClass" visibility="private" size="4" offset="44" file="Vcl.Controls.pas" line="3022"/>
      <procedure name="GetMouseData" visibility="private" file="Vcl.Controls.pas" line="3023">
      </procedure>
      <procedure name="GetNativeData" visibility="private" file="Vcl.Controls.pas" line="3024">
      </procedure>
      <procedure name="GetRegisteredData" visibility="private" file="Vcl.Controls.pas" line="3025">
      </procedure>
      <function name="GetCursorPos" visibility="private" file="Vcl.Controls.pas" line="3026">
        <parameters>
          <retval type="TPoint"/>
        </parameters>
      </function>
      <procedure name="SetCursorPos" visibility="private" file="Vcl.Controls.pas" line="3027">
        <parameters>
          <parameter name="Value" type="TPoint" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetCapture" visibility="private" file="Vcl.Controls.pas" line="3028">
        <parameters>
          <retval type="HWND"/>
        </parameters>
      </function>
      <procedure name="SetCapture" visibility="private" file="Vcl.Controls.pas" line="3029">
        <parameters>
          <parameter name="Value" type="HWND" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetIsDragging" visibility="private" file="Vcl.Controls.pas" line="3030">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetPanningWindow" visibility="private" file="Vcl.Controls.pas" line="3031">
        <parameters>
          <parameter name="Value" type="TCustomPanningWindow" paramflags="const"/>
        </parameters>
      </procedure>
      <function name="GetIsPanning" visibility="private" file="Vcl.Controls.pas" line="3032">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="3034">
        <parameters>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="3035">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="SettingChanged" visibility="public" file="Vcl.Controls.pas" line="3036">
        <parameters>
          <parameter name="Setting" type="Integer"/>
        </parameters>
      </procedure>
      <function name="CreatePanningWindow" visibility="public" file="Vcl.Controls.pas" line="3037">
        <parameters>
          <retval type="TCustomPanningWindow"/>
        </parameters>
      </function>
      <property name="Capture" visibility="public" read="GetCapture" write="SetCapture" type="HWND" file="Vcl.Controls.pas" line="3038"/>
      <property name="CursorPos" visibility="public" read="GetCursorPos" write="SetCursorPos" type="TPoint" file="Vcl.Controls.pas" line="3039"/>
      <property name="DragImmediate" visibility="public" read="FDragImmediate" write="FDragImmediate" type="Boolean" default="1" file="Vcl.Controls.pas" line="3040"/>
      <property name="DragThreshold" visibility="public" read="FDragThreshold" write="FDragThreshold" type="Integer" default="5" file="Vcl.Controls.pas" line="3041"/>
      <property name="MousePresent" visibility="public" read="FMousePresent" type="Boolean" file="Vcl.Controls.pas" line="3042"/>
      <property name="IsDragging" visibility="public" read="GetIsDragging" type="Boolean" file="Vcl.Controls.pas" line="3043"/>
      <property name="IsPanning" visibility="public" read="GetIsPanning" type="Boolean" file="Vcl.Controls.pas" line="3044"/>
      <property name="PanningWindow" visibility="public" read="FPanningWindow" write="SetPanningWindow" type="TCustomPanningWindow" file="Vcl.Controls.pas" line="3045"/>
      <property name="PanningWindowClass" visibility="public" read="FPanningWindowClass" write="FPanningWindowClass" type="TPanningWindowClass" file="Vcl.Controls.pas" line="3046"/>
      <property name="RegWheelMessage" visibility="public" read="FWheelMessage" type="Cardinal" file="Vcl.Controls.pas" line="3048"/>
      <property name="WheelPresent" visibility="public" read="FWheelPresent" type="Boolean" file="Vcl.Controls.pas" line="3049"/>
      <property name="WheelScrollLines" visibility="public" read="FScrollLines" type="Integer" file="Vcl.Controls.pas" line="3050"/>
    </members>
  </class>
  <class name="TCustomListControl" file="Vcl.Controls.pas" line="3053">
    <ancestor name="TWinControl" namespace="Vcl.Controls">
      <methodref name="AlignControl" visibility="private"/>
      <methodref name="CalcConstraints" visibility="private"/>
      <methodref name="DoPaddingChange" visibility="private"/>
      <methodref name="GetAlignDisabled" visibility="private"/>
      <methodref name="GetControl" visibility="private"/>
      <methodref name="GetControlCount" visibility="private"/>
      <methodref name="GetDockClientCount" visibility="private"/>
      <methodref name="GetDockClients" visibility="private"/>
      <methodref name="GetHandle" visibility="private"/>
      <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
      <methodref name="GetTabOrder" visibility="private"/>
      <methodref name="GetVisibleDockClientCount" visibility="private"/>
      <methodref name="Insert" visibility="private"/>
      <methodref name="InvalidateFrame" visibility="private"/>
      <methodref name="InvokeHelp" visibility="private"/>
      <methodref name="IsCtl3DStored" visibility="private"/>
      <methodref name="IsDoubleBufferedStored" visibility="private"/>
      <methodref name="PrecedingWindow" visibility="private"/>
      <methodref name="ReadDesignSize" visibility="private"/>
      <methodref name="ReadPixelsPerInch" visibility="private"/>
      <methodref name="Remove" visibility="private"/>
      <methodref name="RemoveFocus" visibility="private"/>
      <methodref name="SetBevelCut" visibility="private"/>
      <methodref name="SetBevelEdges" visibility="private"/>
      <methodref name="SetBevelKind" visibility="private"/>
      <methodref name="SetBevelWidth" visibility="private"/>
      <methodref name="SetBorderWidth" visibility="private"/>
      <methodref name="SetCtl3D" visibility="private"/>
      <methodref name="SetDockSite" visibility="private"/>
      <methodref name="SetDoubleBuffered" visibility="private"/>
      <methodref name="SetPadding" visibility="private"/>
      <methodref name="SetParentCtl3D" visibility="private"/>
      <methodref name="SetParentWindow" visibility="private"/>
      <methodref name="SetTabOrder" visibility="private"/>
      <methodref name="SetTabStop" visibility="private"/>
      <methodref name="SetUseDockManager" visibility="private"/>
      <methodref name="SetZOrderPosition" visibility="private"/>
      <methodref name="UpdateTabOrder" visibility="private"/>
      <methodref name="UpdateShowing" visibility="private"/>
      <methodref name="WriteDesignSize" visibility="private"/>
      <methodref name="WritePixelsPerInch" visibility="private"/>
      <methodref name="IsMenuKey" visibility="private"/>
      <methodref name="GetIsDrawingLocked" visibility="private"/>
      <methodref name="GetRedrawDisabled" visibility="private"/>
      <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
      <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
      <methodref name="WMPaint" visibility="private" procflags="message"/>
      <methodref name="WMCommand" visibility="private" procflags="message"/>
      <methodref name="WMNotify" visibility="private" procflags="message"/>
      <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
      <methodref name="WMHScroll" visibility="private" procflags="message"/>
      <methodref name="WMVScroll" visibility="private" procflags="message"/>
      <methodref name="WMCompareItem" visibility="private" procflags="message"/>
      <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
      <methodref name="WMDrawItem" visibility="private" procflags="message"/>
      <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
      <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
      <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
      <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
      <methodref name="WMSize" visibility="private" procflags="message"/>
      <methodref name="WMMove" visibility="private" procflags="message"/>
      <methodref name="WMSetCursor" visibility="private" procflags="message"/>
      <methodref name="WMKeyDown" visibility="private" procflags="message"/>
      <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
      <methodref name="WMKeyUp" visibility="private" procflags="message"/>
      <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
      <methodref name="WMChar" visibility="private" procflags="message"/>
      <methodref name="WMSysCommand" visibility="private" procflags="message"/>
      <methodref name="WMCharToItem" visibility="private" procflags="message"/>
      <methodref name="WMParentNotify" visibility="private" procflags="message"/>
      <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
      <methodref name="WMDestroy" visibility="private" procflags="message"/>
      <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
      <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
      <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
      <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
      <methodref name="WMNCPaint" visibility="private" procflags="message"/>
      <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
      <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
      <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
      <methodref name="WMFontChange" visibility="private" procflags="message"/>
      <methodref name="WMTimeChange" visibility="private" procflags="message"/>
      <methodref name="WMSetFocus" visibility="private" procflags="message"/>
      <methodref name="WMKillFocus" visibility="private" procflags="message"/>
      <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
      <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
      <methodref name="WMContextMenu" visibility="private" procflags="message"/>
      <methodref name="WMGesture" visibility="private" procflags="message"/>
      <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
      <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
      <methodref name="CMChanged" visibility="private" procflags="message"/>
      <methodref name="CMChildKey" visibility="private" procflags="message"/>
      <methodref name="CMDialogKey" visibility="private" procflags="message"/>
      <methodref name="CMDialogChar" visibility="private" procflags="message"/>
      <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
      <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
      <methodref name="CMColorChanged" visibility="private" procflags="message"/>
      <methodref name="CMFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
      <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
      <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
      <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
      <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
      <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
      <methodref name="CMEnter" visibility="private" procflags="message"/>
      <methodref name="CMExit" visibility="private" procflags="message"/>
      <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
      <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
      <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
      <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
      <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
      <methodref name="CMFontChange" visibility="private" procflags="message"/>
      <methodref name="CMTimeChange" visibility="private" procflags="message"/>
      <methodref name="CMDrag" visibility="private" procflags="message"/>
      <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
      <methodref name="CNKeyDown" visibility="private" procflags="message"/>
      <methodref name="CNKeyUp" visibility="private" procflags="message"/>
      <methodref name="CNChar" visibility="private" procflags="message"/>
      <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
      <methodref name="CNSysChar" visibility="private" procflags="message"/>
      <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
      <methodref name="CMSysCommand" visibility="private" procflags="message"/>
      <methodref name="CMInvalidate" visibility="private" procflags="message"/>
      <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
      <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
      <methodref name="CMTextChanged" visibility="private" procflags="message"/>
      <methodref name="WMPrintClient" visibility="private" procflags="message"/>
      <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
      <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
      <methodref name="CMControlListChange" visibility="private" procflags="message"/>
      <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
      <methodref name="CMDockClient" visibility="private" procflags="message"/>
      <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
      <methodref name="CMFloat" visibility="private" procflags="message"/>
      <methodref name="InvokeAsyncCalls" visibility="protected">
      </methodref>
      <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
      <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
      <methodref name="ActionChange" visibility="protected" procflags="override"/>
      <methodref name="AddBiDiModeExStyle" visibility="protected"/>
      <methodref name="AssignTo" visibility="protected" procflags="override"/>
      <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
      <methodref name="AdjustSize" visibility="protected" procflags="override"/>
      <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
      <methodref name="ArrangeControl" visibility="protected"/>
      <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
      <methodref name="CanResize" visibility="protected" procflags="override"/>
      <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
      <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
      <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
      <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
      <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
      <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
      <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
      <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
      <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
      <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
      <methodref name="DefineProperties" visibility="protected" procflags="override"/>
      <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
      <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
      <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
      <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
      <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
      <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
      <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
      <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
      <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
      <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
      <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
      <methodref name="DoKeyDown" visibility="protected"/>
      <methodref name="DoKeyPress" visibility="protected"/>
      <methodref name="DoKeyUp" visibility="protected"/>
      <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
      <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
      <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
      <methodref name="FindNextControl" visibility="protected"/>
      <methodref name="FixupTabList" visibility="protected"/>
      <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
      <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
      <methodref name="GetClientRect" visibility="protected" procflags="override"/>
      <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
      <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
      <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
      <methodref name="GetParentHandle" visibility="protected"/>
      <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
      <methodref name="GetTopParentHandle" visibility="protected"/>
      <methodref name="InvalidateDockHostSite" visibility="protected"/>
      <methodref name="IsControlMouseMsg" visibility="protected"/>
      <methodref name="IsControlActivateMsg" visibility="protected"/>
      <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
      <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
      <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
      <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
      <methodref name="MainWndProc" visibility="protected"/>
      <methodref name="Notification" visibility="protected" procflags="override"/>
      <methodref name="NotifyControls" visibility="protected"/>
      <methodref name="PaintControls" visibility="protected"/>
      <methodref name="PaintHandler" visibility="protected"/>
      <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
      <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
      <methodref name="ReadState" visibility="protected" procflags="override"/>
      <methodref name="RecreateWnd" visibility="protected"/>
      <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
      <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
      <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
      <methodref name="ResetImeComposition" visibility="protected"/>
      <methodref name="RequestAlign" visibility="protected" procflags="override"/>
      <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetCurrentPPIScreen" visibility="protected"/>
      <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
      <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
      <methodref name="ScaleControls" visibility="protected"/>
      <methodref name="ScalePadding" visibility="protected"/>
      <methodref name="SelectFirst" visibility="protected"/>
      <methodref name="SelectNext" visibility="protected"/>
      <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
      <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
      <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
      <methodref name="SetImeCompositionWindow" visibility="protected"/>
      <methodref name="SetParent" visibility="protected" procflags="override"/>
      <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
      <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
      <methodref name="SetZOrder" visibility="protected" procflags="override"/>
      <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateBounds" visibility="protected"/>
      <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateRecreatingFlag" visibility="protected"/>
      <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
      <methodref name="UpdateUIState" visibility="protected"/>
      <methodref name="WndProc" visibility="protected" procflags="override"/>
      <methodref name="CreateSubClass" visibility="protected"/>
      <methodref name="RemoveWindowProps" visibility="protected"/>
      <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
      <propertyref name="AlignControlList" visibility="protected"/>
      <propertyref name="BevelEdges" visibility="protected"/>
      <propertyref name="BevelInner" visibility="protected"/>
      <propertyref name="BevelOuter" visibility="protected"/>
      <propertyref name="BevelKind" visibility="protected"/>
      <propertyref name="BevelWidth" visibility="protected"/>
      <propertyref name="BorderWidth" visibility="protected"/>
      <propertyref name="Ctl3D" visibility="protected"/>
      <propertyref name="ImeMode" visibility="protected"/>
      <propertyref name="ImeName" visibility="protected"/>
      <propertyref name="ParentBackground" visibility="protected"/>
      <propertyref name="ParentCtl3D" visibility="protected"/>
      <propertyref name="TipMode" visibility="protected"/>
      <propertyref name="DefWndProc" visibility="protected"/>
      <propertyref name="WindowHandle" visibility="protected"/>
      <eventref name="OnAlignInsertBefore" visibility="protected"/>
      <eventref name="OnAlignPosition" visibility="protected"/>
      <eventref name="OnDockDrop" visibility="protected"/>
      <eventref name="OnDockOver" visibility="protected"/>
      <eventref name="OnEnter" visibility="protected"/>
      <eventref name="OnExit" visibility="protected"/>
      <eventref name="OnGetSiteInfo" visibility="protected"/>
      <eventref name="OnKeyDown" visibility="protected"/>
      <eventref name="OnKeyPress" visibility="protected"/>
      <eventref name="OnKeyUp" visibility="protected"/>
      <eventref name="OnUnDock" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="CreateParented" visibility="public" procflags="constructor"/>
      <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <methodref name="ScaleForPPI" visibility="public" procflags="override">
      </methodref>
      <methodref name="Broadcast" visibility="public"/>
      <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
      <methodref name="ContainsControl" visibility="public"/>
      <methodref name="ControlAtPos" visibility="public"/>
      <methodref name="DefaultHandler" visibility="public" procflags="override"/>
      <methodref name="DisableAlign" visibility="public" procflags="inline"/>
      <propertyref name="DockClientCount" visibility="public"/>
      <propertyref name="DockClients" visibility="public"/>
      <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
      <propertyref name="DockSite" visibility="public"/>
      <propertyref name="DockManager" visibility="public"/>
      <propertyref name="DoubleBuffered" visibility="public"/>
      <methodref name="EnableAlign" visibility="public"/>
      <methodref name="FindChildControl" visibility="public"/>
      <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
      <methodref name="Focused" visibility="public" procflags="dynamic"/>
      <methodref name="GetChildren" visibility="public" procflags="override"/>
      <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
      <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
      <methodref name="HandleAllocated" visibility="public"/>
      <methodref name="HandleNeeded" visibility="public"/>
      <methodref name="InsertControl" visibility="public"/>
      <methodref name="Invalidate" visibility="public" procflags="override"/>
      <methodref name="PaintTo" visibility="public" procflags="overload"/>
      <methodref name="PaintTo" visibility="public" procflags="overload"/>
      <propertyref name="PixelsPerInch" visibility="public"/>
      <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
      <methodref name="RemoveControl" visibility="public"/>
      <methodref name="Realign" visibility="public" procflags="inline"/>
      <methodref name="Repaint" visibility="public" procflags="override"/>
      <methodref name="ScaleBy" visibility="public"/>
      <methodref name="ScrollBy" visibility="public"/>
      <methodref name="SetBounds" visibility="public" procflags="override"/>
      <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
      <methodref name="SetFocus" visibility="public" procflags="virtual"/>
      <methodref name="Update" visibility="public" procflags="override"/>
      <methodref name="UpdateControlState" visibility="public"/>
      <methodref name="LockDrawing" visibility="public"/>
      <methodref name="UnlockDrawing" visibility="public"/>
      <propertyref name="AlignDisabled" visibility="public"/>
      <propertyref name="MouseInClient" visibility="public"/>
      <propertyref name="VisibleDockClientCount" visibility="public"/>
      <propertyref name="Brush" visibility="public"/>
      <propertyref name="Controls" visibility="public"/>
      <propertyref name="ControlCount" visibility="public"/>
      <propertyref name="Handle" visibility="public"/>
      <propertyref name="Padding" visibility="public"/>
      <propertyref name="ParentDoubleBuffered" visibility="public"/>
      <propertyref name="ParentWindow" visibility="public"/>
      <propertyref name="Showing" visibility="public"/>
      <propertyref name="IsDrawingLocked" visibility="public"/>
      <propertyref name="RedrawDisabled" visibility="public"/>
      <propertyref name="TabOrder" visibility="public"/>
      <propertyref name="TabStop" visibility="public"/>
      <propertyref name="UseDockManager" visibility="public"/>
      <ancestor name="TControl" namespace="Vcl.Controls">
        <methodref name="GetCustomHint" visibility="private"/>
        <methodref name="CalcDockSizes" visibility="private"/>
        <methodref name="CheckNewSize" visibility="private"/>
        <methodref name="CreateFloatingDockSite" visibility="private"/>
        <methodref name="DoActionChange" visibility="private"/>
        <methodref name="DoCanAutoSize" visibility="private"/>
        <methodref name="DoCanResize" visibility="private"/>
        <methodref name="DoConstraintsChange" visibility="private"/>
        <methodref name="DoConstrainedResize" visibility="private"/>
        <methodref name="DoDragMsg" visibility="private"/>
        <methodref name="DoMouseActivate" visibility="private"/>
        <methodref name="DoMouseDown" visibility="private"/>
        <methodref name="DoMouseUp" visibility="private"/>
        <methodref name="DoMarginChange" visibility="private"/>
        <methodref name="FontChanged" visibility="private"/>
        <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
        <methodref name="GetBoundsRect" visibility="private"/>
        <methodref name="GetClientHeight" visibility="private"/>
        <methodref name="GetClientWidth" visibility="private"/>
        <methodref name="GetLRDockWidth" visibility="private"/>
        <methodref name="GetMouseCapture" visibility="private"/>
        <methodref name="GetTBDockHeight" visibility="private"/>
        <methodref name="GetUndockWidth" visibility="private"/>
        <methodref name="GetUndockHeight" visibility="private"/>
        <methodref name="InvalidateControl" visibility="private"/>
        <methodref name="IsAnchorsStored" visibility="private"/>
        <methodref name="IsBiDiModeStored" visibility="private"/>
        <methodref name="IsCaptionStored" visibility="private"/>
        <methodref name="IsColorStored" visibility="private"/>
        <methodref name="IsEnabledStored" visibility="private"/>
        <methodref name="IsFontStored" visibility="private"/>
        <methodref name="IsHintStored" visibility="private"/>
        <methodref name="IsHelpContextStored" visibility="private"/>
        <methodref name="IsOnClickStored" visibility="private"/>
        <methodref name="IsShowHintStored" visibility="private"/>
        <methodref name="IsVisibleStored" visibility="private"/>
        <methodref name="ReadIsControl" visibility="private"/>
        <methodref name="ReadExplicitLeft" visibility="private"/>
        <methodref name="ReadExplicitTop" visibility="private"/>
        <methodref name="ReadExplicitWidth" visibility="private"/>
        <methodref name="ReadExplicitHeight" visibility="private"/>
        <methodref name="SetAlignWithMargins" visibility="private"/>
        <methodref name="SetAnchors" visibility="private"/>
        <methodref name="SetAction" visibility="private"/>
        <methodref name="SetAlign" visibility="private"/>
        <methodref name="SetBoundsRect" visibility="private"/>
        <methodref name="SetClientHeight" visibility="private"/>
        <methodref name="SetClientSize" visibility="private"/>
        <methodref name="SetClientWidth" visibility="private"/>
        <methodref name="SetColor" visibility="private"/>
        <methodref name="SetCursor" visibility="private"/>
        <methodref name="SetDesktopFont" visibility="private"/>
        <methodref name="SetFont" visibility="private"/>
        <methodref name="SetHeight" visibility="private"/>
        <methodref name="SetHelpContext" visibility="private"/>
        <methodref name="SetHelpKeyword" visibility="private"/>
        <methodref name="SetHostDockSite" visibility="private"/>
        <methodref name="SetLeft" visibility="private"/>
        <methodref name="SetMouseCapture" visibility="private"/>
        <methodref name="SetParentColor" visibility="private"/>
        <methodref name="SetParentFont" visibility="private"/>
        <methodref name="SetShowHint" visibility="private"/>
        <methodref name="SetParentShowHint" visibility="private"/>
        <methodref name="SetParentCustomHint" visibility="private"/>
        <methodref name="SetPopupMenu" visibility="private"/>
        <methodref name="SetTop" visibility="private"/>
        <methodref name="SetVisible" visibility="private"/>
        <methodref name="SetWidth" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateAnchorRules" visibility="private"/>
        <methodref name="WriteIsControl" visibility="private"/>
        <methodref name="WriteExplicitLeft" visibility="private"/>
        <methodref name="WriteExplicitTop" visibility="private"/>
        <methodref name="WriteExplicitWidth" visibility="private"/>
        <methodref name="WriteExplicitHeight" visibility="private"/>
        <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
        <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
        <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
        <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
        <methodref name="WMMouseMove" visibility="private" procflags="message"/>
        <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
        <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
        <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
        <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
        <methodref name="WMCancelMode" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMHintShow" visibility="private" procflags="message"/>
        <methodref name="CMHitTest" visibility="private" procflags="message"/>
        <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
        <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
        <methodref name="CMGesture" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="SetConstraints" visibility="private"/>
        <methodref name="SetMargins" visibility="private"/>
        <methodref name="SetTouchManager" visibility="private"/>
        <methodref name="GetText" visibility="private"/>
        <methodref name="SetText" visibility="private"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
        <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
        <methodref name="CanResize" visibility="protected" procflags="virtual"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
        <methodref name="Changed" visibility="protected"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
        <methodref name="Click" visibility="protected" procflags="dynamic"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
        <methodref name="CalcCursorPos" visibility="protected"/>
        <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
        <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
        <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
        <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
        <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
        <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
        <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
        <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
        <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
        <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
        <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
        <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
        <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
        <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
        <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
        <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
        <methodref name="GetAction" visibility="protected" procflags="virtual"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
        <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
        <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
        <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
        <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
        <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
        <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
        <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
        <methodref name="GetDragMode" visibility="protected"/>
        <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
        <methodref name="Loaded" visibility="protected" procflags="override"/>
        <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
        <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
        <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
        <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
        <methodref name="Resize" visibility="protected" procflags="dynamic"/>
        <methodref name="ScaleConstraints" visibility="protected"/>
        <methodref name="ScaleMargins" visibility="protected"/>
        <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
        <methodref name="SendCancelMode" visibility="protected"/>
        <methodref name="SendDockNotification" visibility="protected"/>
        <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
        <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
        <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
        <methodref name="SetName" visibility="protected" procflags="override"/>
        <methodref name="SetParent" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
        <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
        <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
        <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
        <methodref name="SetCustomHint" visibility="protected"/>
        <methodref name="UpdateExplicitBounds" visibility="protected"/>
        <methodref name="UpdateBoundsRect" visibility="protected"/>
        <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
        <methodref name="WndProc" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
        <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
        <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
        <propertyref name="ActionLink" visibility="protected"/>
        <propertyref name="AutoSize" visibility="protected"/>
        <propertyref name="Caption" visibility="protected"/>
        <propertyref name="DesktopFont" visibility="protected"/>
        <propertyref name="DragKind" visibility="protected"/>
        <propertyref name="DragCursor" visibility="protected"/>
        <propertyref name="DragMode" visibility="protected"/>
        <propertyref name="IsControl" visibility="protected"/>
        <propertyref name="MouseCapture" visibility="protected"/>
        <propertyref name="ParentBiDiMode" visibility="protected"/>
        <propertyref name="ParentColor" visibility="protected"/>
        <propertyref name="ParentFont" visibility="protected"/>
        <propertyref name="ParentShowHint" visibility="protected"/>
        <propertyref name="PopupMenu" visibility="protected"/>
        <propertyref name="ScalingFlags" visibility="protected"/>
        <propertyref name="Text" visibility="protected"/>
        <propertyref name="WheelAccumulator" visibility="protected"/>
        <propertyref name="Color" visibility="protected"/>
        <propertyref name="Font" visibility="protected"/>
        <propertyref name="IScaling" visibility="protected"/>
        <propertyref name="WindowText" visibility="protected"/>
        <eventref name="OnCanResize" visibility="protected"/>
        <eventref name="OnClick" visibility="protected"/>
        <eventref name="OnConstrainedResize" visibility="protected"/>
        <eventref name="OnContextPopup" visibility="protected"/>
        <eventref name="OnDblClick" visibility="protected"/>
        <eventref name="OnDragDrop" visibility="protected"/>
        <eventref name="OnDragOver" visibility="protected"/>
        <eventref name="OnEndDock" visibility="protected"/>
        <eventref name="OnEndDrag" visibility="protected"/>
        <eventref name="OnMouseActivate" visibility="protected"/>
        <eventref name="OnMouseDown" visibility="protected"/>
        <eventref name="OnMouseEnter" visibility="protected"/>
        <eventref name="OnMouseLeave" visibility="protected"/>
        <eventref name="OnMouseMove" visibility="protected"/>
        <eventref name="OnMouseUp" visibility="protected"/>
        <eventref name="OnMouseWheel" visibility="protected"/>
        <eventref name="OnMouseWheelDown" visibility="protected"/>
        <eventref name="OnMouseWheelUp" visibility="protected"/>
        <eventref name="OnResize" visibility="protected"/>
        <eventref name="OnStartDock" visibility="protected"/>
        <eventref name="OnStartDrag" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="CheckNonMainThreadUsage" visibility="public"/>
        <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
        <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
        <methodref name="BeginDrag" visibility="public"/>
        <methodref name="BringToFront" visibility="public"/>
        <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
        <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
        <methodref name="ClientToParent" visibility="public"/>
        <methodref name="Dock" visibility="public" procflags="dynamic"/>
        <methodref name="Dragging" visibility="public"/>
        <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
        <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
        <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
        <propertyref name="Enabled" visibility="public"/>
        <methodref name="EndDrag" visibility="public"/>
        <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
        <methodref name="GetParentComponent" visibility="public" procflags="override"/>
        <methodref name="HasParent" visibility="public" procflags="override"/>
        <methodref name="Hide" visibility="public"/>
        <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
        <methodref name="Invalidate" visibility="public" procflags="virtual"/>
        <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
        <methodref name="IsRightToLeft" visibility="public"/>
        <methodref name="ManualDock" visibility="public"/>
        <methodref name="ManualFloat" visibility="public"/>
        <methodref name="Perform" visibility="public" procflags="overload"/>
        <methodref name="Refresh" visibility="public"/>
        <methodref name="Repaint" visibility="public" procflags="virtual"/>
        <methodref name="ReplaceDockedControl" visibility="public"/>
        <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
        <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
        <methodref name="ParentToClient" visibility="public"/>
        <methodref name="SendToBack" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="virtual"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
        <methodref name="SetParentComponent" visibility="public" procflags="override"/>
        <methodref name="Show" visibility="public"/>
        <methodref name="Update" visibility="public" procflags="virtual"/>
        <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
        <methodref name="UseRightToLeftReading" visibility="public"/>
        <methodref name="UseRightToLeftScrollBar" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="GetTextBuf" visibility="public"/>
        <methodref name="GetTextLen" visibility="public"/>
        <methodref name="Perform" visibility="public" procflags="overload"/>
        <methodref name="Perform" visibility="public" procflags="overload"/>
        <methodref name="SetTextBuf" visibility="public"/>
        <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
        <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleValue" visibility="public" procflags="overload"/>
        <methodref name="ScaleRectSize" visibility="public"/>
        <propertyref name="Action" visibility="public"/>
        <propertyref name="Align" visibility="public"/>
        <propertyref name="Anchors" visibility="public"/>
        <propertyref name="BiDiMode" visibility="public"/>
        <propertyref name="BoundsRect" visibility="public"/>
        <propertyref name="ClientHeight" visibility="public"/>
        <propertyref name="ClientOrigin" visibility="public"/>
        <propertyref name="ClientRect" visibility="public"/>
        <propertyref name="ClientWidth" visibility="public"/>
        <propertyref name="Constraints" visibility="public"/>
        <propertyref name="ControlState" visibility="public"/>
        <propertyref name="ControlStyle" visibility="public"/>
        <propertyref name="CurrentPPI" visibility="public"/>
        <propertyref name="DockOrientation" visibility="public"/>
        <propertyref name="ExplicitLeft" visibility="public"/>
        <propertyref name="ExplicitTop" visibility="public"/>
        <propertyref name="ExplicitWidth" visibility="public"/>
        <propertyref name="ExplicitHeight" visibility="public"/>
        <propertyref name="Floating" visibility="public"/>
        <propertyref name="FloatingDockSiteClass" visibility="public"/>
        <propertyref name="HostDockSite" visibility="public"/>
        <propertyref name="LRDockWidth" visibility="public"/>
        <propertyref name="ScaleFactor" visibility="public"/>
        <propertyref name="ShowHint" visibility="public"/>
        <propertyref name="TBDockHeight" visibility="public"/>
        <propertyref name="Touch" visibility="public"/>
        <propertyref name="UndockHeight" visibility="public"/>
        <propertyref name="UndockWidth" visibility="public"/>
        <propertyref name="Visible" visibility="public"/>
        <eventref name="WindowProc" visibility="public"/>
        <propertyref name="Parent" visibility="public"/>
        <propertyref name="StyleElements" visibility="public"/>
        <propertyref name="StyleName" visibility="public"/>
        <eventref name="OnGesture" visibility="public"/>
        <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
        <propertyref name="AlignWithMargins" visibility="published"/>
        <propertyref name="Left" visibility="published"/>
        <propertyref name="Top" visibility="published"/>
        <propertyref name="Width" visibility="published"/>
        <propertyref name="Height" visibility="published"/>
        <propertyref name="Cursor" visibility="published"/>
        <propertyref name="Hint" visibility="published"/>
        <propertyref name="HelpType" visibility="published"/>
        <propertyref name="HelpKeyword" visibility="published"/>
        <propertyref name="HelpContext" visibility="published"/>
        <propertyref name="Margins" visibility="published"/>
        <propertyref name="CustomHint" visibility="published"/>
        <propertyref name="ParentCustomHint" visibility="published"/>
        <ancestor name="TComponent" namespace="System.Classes">
          <interfaces>
            <implements name="IInterfaceComponentReference"/>
            <implements name="IInterface"/>
          </interfaces>
          <methodref name="GetComObject" visibility="private">
          </methodref>
          <methodref name="GetComponent" visibility="private">
          </methodref>
          <methodref name="GetComponentCount" visibility="private">
          </methodref>
          <methodref name="GetComponentIndex" visibility="private">
          </methodref>
          <methodref name="Insert" visibility="private">
          </methodref>
          <methodref name="ReadLeft" visibility="private">
          </methodref>
          <methodref name="ReadTop" visibility="private">
          </methodref>
          <methodref name="Remove" visibility="private">
          </methodref>
          <methodref name="RemoveNotification" visibility="private">
          </methodref>
          <methodref name="SetComponentIndex" visibility="private">
          </methodref>
          <methodref name="SetReference" visibility="private">
          </methodref>
          <methodref name="WriteLeft" visibility="private">
          </methodref>
          <methodref name="WriteTop" visibility="private">
          </methodref>
          <methodref name="IntfGetComponent" visibility="private">
          </methodref>
          <methodref name="DoGetDeltaStreams" visibility="private">
          </methodref>
          <methodref name="ReadDeltaStream" visibility="private">
          </methodref>
          <methodref name="ReadDeltaState" visibility="private">
          </methodref>
          <methodref name="FindSortedComponent" visibility="private">
          </methodref>
          <methodref name="AddSortedComponent" visibility="private">
          </methodref>
          <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
          </methodref>
          <methodref name="Create@" visibility="class private" procflags="class constructor noself">
          </methodref>
          <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ChangeName" visibility="protected">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="override">
          </methodref>
          <methodref name="GetChildren" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="override">
          </methodref>
          <methodref name="Loaded" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="Notification" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="ReadState" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="CanObserve" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetObservers" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetAncestor" visibility="protected">
          </methodref>
          <methodref name="SetDesigning" visibility="protected">
          </methodref>
          <methodref name="SetInline" visibility="protected">
          </methodref>
          <methodref name="SetDesignInstance" visibility="protected">
          </methodref>
          <methodref name="SetName" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Updating" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Updated" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
          </methodref>
          <methodref name="ValidateRename" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="WriteState" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="RemoveFreeNotifications" visibility="protected">
          </methodref>
          <methodref name="QueryInterface" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="_AddRef" visibility="protected">
          </methodref>
          <methodref name="_Release" visibility="protected">
          </methodref>
          <methodref name="GetTypeInfoCount" visibility="protected">
          </methodref>
          <methodref name="GetTypeInfo" visibility="protected">
          </methodref>
          <methodref name="GetIDsOfNames" visibility="protected">
          </methodref>
          <methodref name="Invoke" visibility="protected">
          </methodref>
          <eventref name="OnGetDeltaStreams" visibility="protected">
          </eventref>
          <methodref name="Create" visibility="public" procflags="constructor virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="override">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="BeginInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndInvoke" visibility="public" procflags="overload">
          </methodref>
          <methodref name="EndFunctionInvoke" visibility="public">
          </methodref>
          <methodref name="DestroyComponents" visibility="public">
          </methodref>
          <methodref name="Destroying" visibility="public">
          </methodref>
          <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="FindComponent" visibility="public">
          </methodref>
          <methodref name="FreeNotification" visibility="public">
          </methodref>
          <methodref name="RemoveFreeNotification" visibility="public">
          </methodref>
          <methodref name="FreeOnRelease" visibility="public">
          </methodref>
          <methodref name="GetEnumerator" visibility="public" procflags="inline">
          </methodref>
          <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="override">
          </methodref>
          <methodref name="HasParent" visibility="public" procflags="dynamic">
          </methodref>
          <methodref name="InsertComponent" visibility="public">
          </methodref>
          <methodref name="RemoveComponent" visibility="public">
          </methodref>
          <methodref name="SetSubComponent" visibility="public">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="override">
          </methodref>
          <methodref name="UpdateAction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="IsImplementorOf" visibility="public">
          </methodref>
          <methodref name="ReferenceInterface" visibility="public">
          </methodref>
          <propertyref name="ComObject" visibility="public">
          </propertyref>
          <propertyref name="Components" visibility="public">
          </propertyref>
          <propertyref name="ComponentCount" visibility="public">
          </propertyref>
          <propertyref name="ComponentIndex" visibility="public">
          </propertyref>
          <propertyref name="ComponentState" visibility="public">
          </propertyref>
          <propertyref name="ComponentStyle" visibility="public">
          </propertyref>
          <propertyref name="DesignInfo" visibility="public">
          </propertyref>
          <propertyref name="Owner" visibility="public">
          </propertyref>
          <propertyref name="VCLComObject" visibility="public">
          </propertyref>
          <propertyref name="Observers" visibility="public">
          </propertyref>
          <propertyref name="Name" visibility="published">
          </propertyref>
          <propertyref name="Tag" visibility="published">
          </propertyref>
          <ancestor name="TPersistent" namespace="System.Classes">
            <methodref name="AssignError" visibility="private">
            </methodref>
            <methodref name="AssignTo" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="Assign" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="dynamic">
            </methodref>
            <ancestor name="TObject" namespace="System">
              <methodref name="Create" visibility="public" procflags="constructor">
              </methodref>
              <methodref name="Free" visibility="public">
              </methodref>
              <methodref name="DisposeOf" visibility="public" procflags="inline">
              </methodref>
              <methodref name="InitInstance" visibility="public" procflags="class">
              </methodref>
              <methodref name="CleanupInstance" visibility="public">
              </methodref>
              <methodref name="ClassType" visibility="public" procflags="inline">
              </methodref>
              <methodref name="ClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassNameIs" visibility="public" procflags="class">
              </methodref>
              <methodref name="ClassParent" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="ClassInfo" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InstanceSize" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="InheritsFrom" visibility="public" procflags="class">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodAddress" visibility="public" procflags="class overload">
              </methodref>
              <methodref name="MethodName" visibility="public" procflags="class">
              </methodref>
              <methodref name="QualifiedClassName" visibility="public" procflags="class">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="FieldAddress" visibility="public" procflags="overload">
              </methodref>
              <methodref name="GetInterface" visibility="public">
              </methodref>
              <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
              </methodref>
              <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
              </methodref>
              <methodref name="UnitName" visibility="public" procflags="class">
              </methodref>
              <methodref name="UnitScope" visibility="public" procflags="class">
              </methodref>
              <methodref name="Equals" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetHashCode" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="ToString" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="SafeCallException" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="AfterConstruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Dispatch" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="DefaultHandler" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="NewInstance" visibility="public" procflags="class virtual">
              </methodref>
              <methodref name="FreeInstance" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor virtual">
              </methodref>
              <methodref name="GetDisposed" visibility="protected" procflags="inline">
              </methodref>
              <methodref name="CheckDisposed" visibility="protected" procflags="inline">
              </methodref>
              <propertyref name="Disposed" visibility="protected">
              </propertyref>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <function name="GetItemIndex" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="3055">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <function name="IsTouchPropertyStored" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="3056">
        <parameters>
          <parameter name="AProperty" type="TTouchProperty"/>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <procedure name="SetItemIndex" visibility="protected" procflags="abstract overload virtual" file="Vcl.Controls.pas" line="3057">
        <parameters>
          <parameter name="Value" type="Integer" paramflags="const"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="3059">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <procedure name="AddItem" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3060">
        <parameters>
          <parameter name="Item" type="string"/>
          <parameter name="AObject" type="TObject"/>
        </parameters>
      </procedure>
      <procedure name="Clear" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3061">
      </procedure>
      <procedure name="ClearSelection" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3062">
      </procedure>
      <procedure name="CopySelection" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3063">
        <parameters>
          <parameter name="Destination" type="TCustomListControl"/>
        </parameters>
      </procedure>
      <procedure name="DeleteSelected" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3064">
      </procedure>
      <function name="GetCount" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3065">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="MoveSelection" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="3066">
        <parameters>
          <parameter name="Destination" type="TCustomListControl"/>
        </parameters>
      </procedure>
      <procedure name="SelectAll" visibility="public" procflags="abstract virtual" file="Vcl.Controls.pas" line="3067">
      </procedure>
      <property name="ItemIndex" visibility="public" read="GetItemIndex" write="SetItemIndex" type="Integer" file="Vcl.Controls.pas" line="3068"/>
    </members>
  </class>
  <class name="TCustomMultiSelectListControl" file="Vcl.Controls.pas" line="3071">
    <ancestor name="TCustomListControl" namespace="Vcl.Controls">
      <methodref name="GetItemIndex" visibility="protected" procflags="abstract virtual"/>
      <methodref name="IsTouchPropertyStored" visibility="protected" procflags="override"/>
      <methodref name="SetItemIndex" visibility="protected" procflags="abstract overload virtual"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="AddItem" visibility="public" procflags="abstract virtual"/>
      <methodref name="Clear" visibility="public" procflags="abstract virtual"/>
      <methodref name="ClearSelection" visibility="public" procflags="abstract virtual"/>
      <methodref name="CopySelection" visibility="public" procflags="abstract virtual"/>
      <methodref name="DeleteSelected" visibility="public" procflags="abstract virtual"/>
      <methodref name="GetCount" visibility="public" procflags="abstract virtual"/>
      <methodref name="MoveSelection" visibility="public" procflags="virtual"/>
      <methodref name="SelectAll" visibility="public" procflags="abstract virtual"/>
      <propertyref name="ItemIndex" visibility="public"/>
      <ancestor name="TWinControl" namespace="Vcl.Controls">
        <methodref name="AlignControl" visibility="private"/>
        <methodref name="CalcConstraints" visibility="private"/>
        <methodref name="DoPaddingChange" visibility="private"/>
        <methodref name="GetAlignDisabled" visibility="private"/>
        <methodref name="GetControl" visibility="private"/>
        <methodref name="GetControlCount" visibility="private"/>
        <methodref name="GetDockClientCount" visibility="private"/>
        <methodref name="GetDockClients" visibility="private"/>
        <methodref name="GetHandle" visibility="private"/>
        <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
        <methodref name="GetTabOrder" visibility="private"/>
        <methodref name="GetVisibleDockClientCount" visibility="private"/>
        <methodref name="Insert" visibility="private"/>
        <methodref name="InvalidateFrame" visibility="private"/>
        <methodref name="InvokeHelp" visibility="private"/>
        <methodref name="IsCtl3DStored" visibility="private"/>
        <methodref name="IsDoubleBufferedStored" visibility="private"/>
        <methodref name="PrecedingWindow" visibility="private"/>
        <methodref name="ReadDesignSize" visibility="private"/>
        <methodref name="ReadPixelsPerInch" visibility="private"/>
        <methodref name="Remove" visibility="private"/>
        <methodref name="RemoveFocus" visibility="private"/>
        <methodref name="SetBevelCut" visibility="private"/>
        <methodref name="SetBevelEdges" visibility="private"/>
        <methodref name="SetBevelKind" visibility="private"/>
        <methodref name="SetBevelWidth" visibility="private"/>
        <methodref name="SetBorderWidth" visibility="private"/>
        <methodref name="SetCtl3D" visibility="private"/>
        <methodref name="SetDockSite" visibility="private"/>
        <methodref name="SetDoubleBuffered" visibility="private"/>
        <methodref name="SetPadding" visibility="private"/>
        <methodref name="SetParentCtl3D" visibility="private"/>
        <methodref name="SetParentWindow" visibility="private"/>
        <methodref name="SetTabOrder" visibility="private"/>
        <methodref name="SetTabStop" visibility="private"/>
        <methodref name="SetUseDockManager" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateTabOrder" visibility="private"/>
        <methodref name="UpdateShowing" visibility="private"/>
        <methodref name="WriteDesignSize" visibility="private"/>
        <methodref name="WritePixelsPerInch" visibility="private"/>
        <methodref name="IsMenuKey" visibility="private"/>
        <methodref name="GetIsDrawingLocked" visibility="private"/>
        <methodref name="GetRedrawDisabled" visibility="private"/>
        <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="WMPaint" visibility="private" procflags="message"/>
        <methodref name="WMCommand" visibility="private" procflags="message"/>
        <methodref name="WMNotify" visibility="private" procflags="message"/>
        <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="WMHScroll" visibility="private" procflags="message"/>
        <methodref name="WMVScroll" visibility="private" procflags="message"/>
        <methodref name="WMCompareItem" visibility="private" procflags="message"/>
        <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
        <methodref name="WMDrawItem" visibility="private" procflags="message"/>
        <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
        <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
        <methodref name="WMSize" visibility="private" procflags="message"/>
        <methodref name="WMMove" visibility="private" procflags="message"/>
        <methodref name="WMSetCursor" visibility="private" procflags="message"/>
        <methodref name="WMKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMChar" visibility="private" procflags="message"/>
        <methodref name="WMSysCommand" visibility="private" procflags="message"/>
        <methodref name="WMCharToItem" visibility="private" procflags="message"/>
        <methodref name="WMParentNotify" visibility="private" procflags="message"/>
        <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
        <methodref name="WMDestroy" visibility="private" procflags="message"/>
        <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
        <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
        <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
        <methodref name="WMNCPaint" visibility="private" procflags="message"/>
        <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
        <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
        <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="WMFontChange" visibility="private" procflags="message"/>
        <methodref name="WMTimeChange" visibility="private" procflags="message"/>
        <methodref name="WMSetFocus" visibility="private" procflags="message"/>
        <methodref name="WMKillFocus" visibility="private" procflags="message"/>
        <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
        <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="WMGesture" visibility="private" procflags="message"/>
        <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
        <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
        <methodref name="CMChanged" visibility="private" procflags="message"/>
        <methodref name="CMChildKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogChar" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
        <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
        <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnter" visibility="private" procflags="message"/>
        <methodref name="CMExit" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
        <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="CMFontChange" visibility="private" procflags="message"/>
        <methodref name="CMTimeChange" visibility="private" procflags="message"/>
        <methodref name="CMDrag" visibility="private" procflags="message"/>
        <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
        <methodref name="CNKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNKeyUp" visibility="private" procflags="message"/>
        <methodref name="CNChar" visibility="private" procflags="message"/>
        <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNSysChar" visibility="private" procflags="message"/>
        <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
        <methodref name="CMSysCommand" visibility="private" procflags="message"/>
        <methodref name="CMInvalidate" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMTextChanged" visibility="private" procflags="message"/>
        <methodref name="WMPrintClient" visibility="private" procflags="message"/>
        <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
        <methodref name="CMControlListChange" visibility="private" procflags="message"/>
        <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
        <methodref name="CMDockClient" visibility="private" procflags="message"/>
        <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="InvokeAsyncCalls" visibility="protected">
        </methodref>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="override"/>
        <methodref name="AddBiDiModeExStyle" visibility="protected"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustSize" visibility="protected" procflags="override"/>
        <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
        <methodref name="ArrangeControl" visibility="protected"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
        <methodref name="CanResize" visibility="protected" procflags="override"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
        <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
        <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
        <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
        <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
        <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
        <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="DoKeyDown" visibility="protected"/>
        <methodref name="DoKeyPress" visibility="protected"/>
        <methodref name="DoKeyUp" visibility="protected"/>
        <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
        <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
        <methodref name="FindNextControl" visibility="protected"/>
        <methodref name="FixupTabList" visibility="protected"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
        <methodref name="GetClientRect" visibility="protected" procflags="override"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
        <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
        <methodref name="GetParentHandle" visibility="protected"/>
        <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
        <methodref name="GetTopParentHandle" visibility="protected"/>
        <methodref name="InvalidateDockHostSite" visibility="protected"/>
        <methodref name="IsControlMouseMsg" visibility="protected"/>
        <methodref name="IsControlActivateMsg" visibility="protected"/>
        <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="NotifyControls" visibility="protected"/>
        <methodref name="PaintControls" visibility="protected"/>
        <methodref name="PaintHandler" visibility="protected"/>
        <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RecreateWnd" visibility="protected"/>
        <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="ResetImeComposition" visibility="protected"/>
        <methodref name="RequestAlign" visibility="protected" procflags="override"/>
        <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPIScreen" visibility="protected"/>
        <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="ScaleControls" visibility="protected"/>
        <methodref name="ScalePadding" visibility="protected"/>
        <methodref name="SelectFirst" visibility="protected"/>
        <methodref name="SelectNext" visibility="protected"/>
        <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
        <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetImeCompositionWindow" visibility="protected"/>
        <methodref name="SetParent" visibility="protected" procflags="override"/>
        <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="override"/>
        <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateBounds" visibility="protected"/>
        <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateRecreatingFlag" visibility="protected"/>
        <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateUIState" visibility="protected"/>
        <methodref name="WndProc" visibility="protected" procflags="override"/>
        <methodref name="CreateSubClass" visibility="protected"/>
        <methodref name="RemoveWindowProps" visibility="protected"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
        <propertyref name="AlignControlList" visibility="protected"/>
        <propertyref name="BevelEdges" visibility="protected"/>
        <propertyref name="BevelInner" visibility="protected"/>
        <propertyref name="BevelOuter" visibility="protected"/>
        <propertyref name="BevelKind" visibility="protected"/>
        <propertyref name="BevelWidth" visibility="protected"/>
        <propertyref name="BorderWidth" visibility="protected"/>
        <propertyref name="Ctl3D" visibility="protected"/>
        <propertyref name="ImeMode" visibility="protected"/>
        <propertyref name="ImeName" visibility="protected"/>
        <propertyref name="ParentBackground" visibility="protected"/>
        <propertyref name="ParentCtl3D" visibility="protected"/>
        <propertyref name="TipMode" visibility="protected"/>
        <propertyref name="DefWndProc" visibility="protected"/>
        <propertyref name="WindowHandle" visibility="protected"/>
        <eventref name="OnAlignInsertBefore" visibility="protected"/>
        <eventref name="OnAlignPosition" visibility="protected"/>
        <eventref name="OnDockDrop" visibility="protected"/>
        <eventref name="OnDockOver" visibility="protected"/>
        <eventref name="OnEnter" visibility="protected"/>
        <eventref name="OnExit" visibility="protected"/>
        <eventref name="OnGetSiteInfo" visibility="protected"/>
        <eventref name="OnKeyDown" visibility="protected"/>
        <eventref name="OnKeyPress" visibility="protected"/>
        <eventref name="OnKeyUp" visibility="protected"/>
        <eventref name="OnUnDock" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="CreateParented" visibility="public" procflags="constructor"/>
        <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="override">
        </methodref>
        <methodref name="Broadcast" visibility="public"/>
        <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
        <methodref name="ContainsControl" visibility="public"/>
        <methodref name="ControlAtPos" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="DisableAlign" visibility="public" procflags="inline"/>
        <propertyref name="DockClientCount" visibility="public"/>
        <propertyref name="DockClients" visibility="public"/>
        <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
        <propertyref name="DockSite" visibility="public"/>
        <propertyref name="DockManager" visibility="public"/>
        <propertyref name="DoubleBuffered" visibility="public"/>
        <methodref name="EnableAlign" visibility="public"/>
        <methodref name="FindChildControl" visibility="public"/>
        <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
        <methodref name="Focused" visibility="public" procflags="dynamic"/>
        <methodref name="GetChildren" visibility="public" procflags="override"/>
        <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
        <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
        <methodref name="HandleAllocated" visibility="public"/>
        <methodref name="HandleNeeded" visibility="public"/>
        <methodref name="InsertControl" visibility="public"/>
        <methodref name="Invalidate" visibility="public" procflags="override"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <propertyref name="PixelsPerInch" visibility="public"/>
        <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
        <methodref name="RemoveControl" visibility="public"/>
        <methodref name="Realign" visibility="public" procflags="inline"/>
        <methodref name="Repaint" visibility="public" procflags="override"/>
        <methodref name="ScaleBy" visibility="public"/>
        <methodref name="ScrollBy" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="override"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
        <methodref name="SetFocus" visibility="public" procflags="virtual"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <methodref name="UpdateControlState" visibility="public"/>
        <methodref name="LockDrawing" visibility="public"/>
        <methodref name="UnlockDrawing" visibility="public"/>
        <propertyref name="AlignDisabled" visibility="public"/>
        <propertyref name="MouseInClient" visibility="public"/>
        <propertyref name="VisibleDockClientCount" visibility="public"/>
        <propertyref name="Brush" visibility="public"/>
        <propertyref name="Controls" visibility="public"/>
        <propertyref name="ControlCount" visibility="public"/>
        <propertyref name="Handle" visibility="public"/>
        <propertyref name="Padding" visibility="public"/>
        <propertyref name="ParentDoubleBuffered" visibility="public"/>
        <propertyref name="ParentWindow" visibility="public"/>
        <propertyref name="Showing" visibility="public"/>
        <propertyref name="IsDrawingLocked" visibility="public"/>
        <propertyref name="RedrawDisabled" visibility="public"/>
        <propertyref name="TabOrder" visibility="public"/>
        <propertyref name="TabStop" visibility="public"/>
        <propertyref name="UseDockManager" visibility="public"/>
        <ancestor name="TControl" namespace="Vcl.Controls">
          <methodref name="GetCustomHint" visibility="private"/>
          <methodref name="CalcDockSizes" visibility="private"/>
          <methodref name="CheckNewSize" visibility="private"/>
          <methodref name="CreateFloatingDockSite" visibility="private"/>
          <methodref name="DoActionChange" visibility="private"/>
          <methodref name="DoCanAutoSize" visibility="private"/>
          <methodref name="DoCanResize" visibility="private"/>
          <methodref name="DoConstraintsChange" visibility="private"/>
          <methodref name="DoConstrainedResize" visibility="private"/>
          <methodref name="DoDragMsg" visibility="private"/>
          <methodref name="DoMouseActivate" visibility="private"/>
          <methodref name="DoMouseDown" visibility="private"/>
          <methodref name="DoMouseUp" visibility="private"/>
          <methodref name="DoMarginChange" visibility="private"/>
          <methodref name="FontChanged" visibility="private"/>
          <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
          <methodref name="GetBoundsRect" visibility="private"/>
          <methodref name="GetClientHeight" visibility="private"/>
          <methodref name="GetClientWidth" visibility="private"/>
          <methodref name="GetLRDockWidth" visibility="private"/>
          <methodref name="GetMouseCapture" visibility="private"/>
          <methodref name="GetTBDockHeight" visibility="private"/>
          <methodref name="GetUndockWidth" visibility="private"/>
          <methodref name="GetUndockHeight" visibility="private"/>
          <methodref name="InvalidateControl" visibility="private"/>
          <methodref name="IsAnchorsStored" visibility="private"/>
          <methodref name="IsBiDiModeStored" visibility="private"/>
          <methodref name="IsCaptionStored" visibility="private"/>
          <methodref name="IsColorStored" visibility="private"/>
          <methodref name="IsEnabledStored" visibility="private"/>
          <methodref name="IsFontStored" visibility="private"/>
          <methodref name="IsHintStored" visibility="private"/>
          <methodref name="IsHelpContextStored" visibility="private"/>
          <methodref name="IsOnClickStored" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="IsVisibleStored" visibility="private"/>
          <methodref name="ReadIsControl" visibility="private"/>
          <methodref name="ReadExplicitLeft" visibility="private"/>
          <methodref name="ReadExplicitTop" visibility="private"/>
          <methodref name="ReadExplicitWidth" visibility="private"/>
          <methodref name="ReadExplicitHeight" visibility="private"/>
          <methodref name="SetAlignWithMargins" visibility="private"/>
          <methodref name="SetAnchors" visibility="private"/>
          <methodref name="SetAction" visibility="private"/>
          <methodref name="SetAlign" visibility="private"/>
          <methodref name="SetBoundsRect" visibility="private"/>
          <methodref name="SetClientHeight" visibility="private"/>
          <methodref name="SetClientSize" visibility="private"/>
          <methodref name="SetClientWidth" visibility="private"/>
          <methodref name="SetColor" visibility="private"/>
          <methodref name="SetCursor" visibility="private"/>
          <methodref name="SetDesktopFont" visibility="private"/>
          <methodref name="SetFont" visibility="private"/>
          <methodref name="SetHeight" visibility="private"/>
          <methodref name="SetHelpContext" visibility="private"/>
          <methodref name="SetHelpKeyword" visibility="private"/>
          <methodref name="SetHostDockSite" visibility="private"/>
          <methodref name="SetLeft" visibility="private"/>
          <methodref name="SetMouseCapture" visibility="private"/>
          <methodref name="SetParentColor" visibility="private"/>
          <methodref name="SetParentFont" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetParentCustomHint" visibility="private"/>
          <methodref name="SetPopupMenu" visibility="private"/>
          <methodref name="SetTop" visibility="private"/>
          <methodref name="SetVisible" visibility="private"/>
          <methodref name="SetWidth" visibility="private"/>
          <methodref name="SetZOrderPosition" visibility="private"/>
          <methodref name="UpdateAnchorRules" visibility="private"/>
          <methodref name="WriteIsControl" visibility="private"/>
          <methodref name="WriteExplicitLeft" visibility="private"/>
          <methodref name="WriteExplicitTop" visibility="private"/>
          <methodref name="WriteExplicitWidth" visibility="private"/>
          <methodref name="WriteExplicitHeight" visibility="private"/>
          <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMouseMove" visibility="private" procflags="message"/>
          <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="WMCancelMode" visibility="private" procflags="message"/>
          <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
          <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
          <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
          <methodref name="CMFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
          <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
          <methodref name="CMHintShow" visibility="private" procflags="message"/>
          <methodref name="CMHitTest" visibility="private" procflags="message"/>
          <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
          <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
          <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
          <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="CMGesture" visibility="private" procflags="message"/>
          <methodref name="WMContextMenu" visibility="private" procflags="message"/>
          <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
          <methodref name="SetConstraints" visibility="private"/>
          <methodref name="SetMargins" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="GetText" visibility="private"/>
          <methodref name="SetText" visibility="private"/>
          <methodref name="CMFloat" visibility="private" procflags="message"/>
          <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
          <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
          <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
          <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
          <methodref name="AssignTo" visibility="protected" procflags="override"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="CanResize" visibility="protected" procflags="virtual"/>
          <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="Changed" visibility="protected"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="Click" visibility="protected" procflags="dynamic"/>
          <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
          <methodref name="CalcCursorPos" visibility="protected"/>
          <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
          <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
          <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
          <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
          <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="GetAction" visibility="protected" procflags="virtual"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
          <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
          <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
          <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
          <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
          <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragMode" visibility="protected"/>
          <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
          <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
          <methodref name="ReadState" visibility="protected" procflags="override"/>
          <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="dynamic"/>
          <methodref name="ScaleConstraints" visibility="protected"/>
          <methodref name="ScaleMargins" visibility="protected"/>
          <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
          <methodref name="SendCancelMode" visibility="protected"/>
          <methodref name="SendDockNotification" visibility="protected"/>
          <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="SetName" visibility="protected" procflags="override"/>
          <methodref name="SetParent" visibility="protected" procflags="virtual"/>
          <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
          <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
          <methodref name="SetCustomHint" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateBoundsRect" visibility="protected"/>
          <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
          <propertyref name="ActionLink" visibility="protected"/>
          <propertyref name="AutoSize" visibility="protected"/>
          <propertyref name="Caption" visibility="protected"/>
          <propertyref name="DesktopFont" visibility="protected"/>
          <propertyref name="DragKind" visibility="protected"/>
          <propertyref name="DragCursor" visibility="protected"/>
          <propertyref name="DragMode" visibility="protected"/>
          <propertyref name="IsControl" visibility="protected"/>
          <propertyref name="MouseCapture" visibility="protected"/>
          <propertyref name="ParentBiDiMode" visibility="protected"/>
          <propertyref name="ParentColor" visibility="protected"/>
          <propertyref name="ParentFont" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected"/>
          <propertyref name="PopupMenu" visibility="protected"/>
          <propertyref name="ScalingFlags" visibility="protected"/>
          <propertyref name="Text" visibility="protected"/>
          <propertyref name="WheelAccumulator" visibility="protected"/>
          <propertyref name="Color" visibility="protected"/>
          <propertyref name="Font" visibility="protected"/>
          <propertyref name="IScaling" visibility="protected"/>
          <propertyref name="WindowText" visibility="protected"/>
          <eventref name="OnCanResize" visibility="protected"/>
          <eventref name="OnClick" visibility="protected"/>
          <eventref name="OnConstrainedResize" visibility="protected"/>
          <eventref name="OnContextPopup" visibility="protected"/>
          <eventref name="OnDblClick" visibility="protected"/>
          <eventref name="OnDragDrop" visibility="protected"/>
          <eventref name="OnDragOver" visibility="protected"/>
          <eventref name="OnEndDock" visibility="protected"/>
          <eventref name="OnEndDrag" visibility="protected"/>
          <eventref name="OnMouseActivate" visibility="protected"/>
          <eventref name="OnMouseDown" visibility="protected"/>
          <eventref name="OnMouseEnter" visibility="protected"/>
          <eventref name="OnMouseLeave" visibility="protected"/>
          <eventref name="OnMouseMove" visibility="protected"/>
          <eventref name="OnMouseUp" visibility="protected"/>
          <eventref name="OnMouseWheel" visibility="protected"/>
          <eventref name="OnMouseWheelDown" visibility="protected"/>
          <eventref name="OnMouseWheelUp" visibility="protected"/>
          <eventref name="OnResize" visibility="protected"/>
          <eventref name="OnStartDock" visibility="protected"/>
          <eventref name="OnStartDrag" visibility="protected"/>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="CheckNonMainThreadUsage" visibility="public"/>
          <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
          <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
          <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
          <methodref name="BeginDrag" visibility="public"/>
          <methodref name="BringToFront" visibility="public"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToParent" visibility="public"/>
          <methodref name="Dock" visibility="public" procflags="dynamic"/>
          <methodref name="Dragging" visibility="public"/>
          <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
          <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
          <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <methodref name="EndDrag" visibility="public"/>
          <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="GetParentComponent" visibility="public" procflags="override"/>
          <methodref name="HasParent" visibility="public" procflags="override"/>
          <methodref name="Hide" visibility="public"/>
          <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
          <methodref name="Invalidate" visibility="public" procflags="virtual"/>
          <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
          <methodref name="IsRightToLeft" visibility="public"/>
          <methodref name="ManualDock" visibility="public"/>
          <methodref name="ManualFloat" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Refresh" visibility="public"/>
          <methodref name="Repaint" visibility="public" procflags="virtual"/>
          <methodref name="ReplaceDockedControl" visibility="public"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ParentToClient" visibility="public"/>
          <methodref name="SendToBack" visibility="public"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
          <methodref name="SetParentComponent" visibility="public" procflags="override"/>
          <methodref name="Show" visibility="public"/>
          <methodref name="Update" visibility="public" procflags="virtual"/>
          <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="UseRightToLeftReading" visibility="public"/>
          <methodref name="UseRightToLeftScrollBar" visibility="public"/>
          <methodref name="DefaultHandler" visibility="public" procflags="override"/>
          <methodref name="GetTextBuf" visibility="public"/>
          <methodref name="GetTextLen" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="SetTextBuf" visibility="public"/>
          <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
          <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleRectSize" visibility="public"/>
          <propertyref name="Action" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="BiDiMode" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ClientHeight" visibility="public"/>
          <propertyref name="ClientOrigin" visibility="public"/>
          <propertyref name="ClientRect" visibility="public"/>
          <propertyref name="ClientWidth" visibility="public"/>
          <propertyref name="Constraints" visibility="public"/>
          <propertyref name="ControlState" visibility="public"/>
          <propertyref name="ControlStyle" visibility="public"/>
          <propertyref name="CurrentPPI" visibility="public"/>
          <propertyref name="DockOrientation" visibility="public"/>
          <propertyref name="ExplicitLeft" visibility="public"/>
          <propertyref name="ExplicitTop" visibility="public"/>
          <propertyref name="ExplicitWidth" visibility="public"/>
          <propertyref name="ExplicitHeight" visibility="public"/>
          <propertyref name="Floating" visibility="public"/>
          <propertyref name="FloatingDockSiteClass" visibility="public"/>
          <propertyref name="HostDockSite" visibility="public"/>
          <propertyref name="LRDockWidth" visibility="public"/>
          <propertyref name="ScaleFactor" visibility="public"/>
          <propertyref name="ShowHint" visibility="public"/>
          <propertyref name="TBDockHeight" visibility="public"/>
          <propertyref name="Touch" visibility="public"/>
          <propertyref name="UndockHeight" visibility="public"/>
          <propertyref name="UndockWidth" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="WindowProc" visibility="public"/>
          <propertyref name="Parent" visibility="public"/>
          <propertyref name="StyleElements" visibility="public"/>
          <propertyref name="StyleName" visibility="public"/>
          <eventref name="OnGesture" visibility="public"/>
          <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
          <propertyref name="AlignWithMargins" visibility="published"/>
          <propertyref name="Left" visibility="published"/>
          <propertyref name="Top" visibility="published"/>
          <propertyref name="Width" visibility="published"/>
          <propertyref name="Height" visibility="published"/>
          <propertyref name="Cursor" visibility="published"/>
          <propertyref name="Hint" visibility="published"/>
          <propertyref name="HelpType" visibility="published"/>
          <propertyref name="HelpKeyword" visibility="published"/>
          <propertyref name="HelpContext" visibility="published"/>
          <propertyref name="Margins" visibility="published"/>
          <propertyref name="CustomHint" visibility="published"/>
          <propertyref name="ParentCustomHint" visibility="published"/>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FMultiSelect" type="Boolean" visibility="protected" size="1" offset="688" file="Vcl.Controls.pas" line="3073"/>
      <function name="GetSelCount" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="3074">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <procedure name="SetMultiSelect" visibility="protected" procflags="abstract virtual" file="Vcl.Controls.pas" line="3075">
        <parameters>
          <parameter name="Value" type="Boolean"/>
        </parameters>
      </procedure>
      <property name="MultiSelect" visibility="public" read="FMultiSelect" write="SetMultiSelect" type="Boolean" default="0" file="Vcl.Controls.pas" line="3077"/>
      <property name="SelCount" visibility="public" read="GetSelCount" type="Integer" file="Vcl.Controls.pas" line="3078"/>
    </members>
  </class>
  <type name="TAnimateWindowProc" file="Vcl.Controls.pas" line="3082" procflags="">
  </type>
  <enum name="TBalloonHintIcon" file="Vcl.Controls.pas" line="3084">
    <element value="0" name="bhInfo" file="Vcl.Controls.pas" line="3084"/>
    <element value="1" name="bhWarning" file="Vcl.Controls.pas" line="3084"/>
    <element value="2" name="bhError" file="Vcl.Controls.pas" line="3084"/>
  </enum>
  <enum name="TBalloonHintIconSize" file="Vcl.Controls.pas" line="3086">
    <element value="0" name="bhsNormal" file="Vcl.Controls.pas" line="3086"/>
    <element value="1" name="bhsLarge" file="Vcl.Controls.pas" line="3086"/>
    <element value="2" name="bhsSmall" file="Vcl.Controls.pas" line="3086"/>
  </enum>
  <enum name="TBalloonHintStyle" file="Vcl.Controls.pas" line="3088">
    <element value="0" name="bhsStandard" file="Vcl.Controls.pas" line="3088"/>
    <element value="1" name="bhsBalloon" file="Vcl.Controls.pas" line="3088"/>
  </enum>
  <class name="TCustomHintWindow" file="Vcl.Controls.pas" line="3092">
    <ancestor name="TCustomControl" namespace="Vcl.Controls">
      <methodref name="WMPaint" visibility="private" procflags="message"/>
      <methodref name="Paint" visibility="protected" procflags="virtual"/>
      <methodref name="PaintWindow" visibility="protected" procflags="override"/>
      <propertyref name="Canvas" visibility="protected"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <ancestor name="TWinControl" namespace="Vcl.Controls">
        <methodref name="AlignControl" visibility="private"/>
        <methodref name="CalcConstraints" visibility="private"/>
        <methodref name="DoPaddingChange" visibility="private"/>
        <methodref name="GetAlignDisabled" visibility="private"/>
        <methodref name="GetControl" visibility="private"/>
        <methodref name="GetControlCount" visibility="private"/>
        <methodref name="GetDockClientCount" visibility="private"/>
        <methodref name="GetDockClients" visibility="private"/>
        <methodref name="GetHandle" visibility="private"/>
        <methodref name="GetParentBackground" visibility="private" procflags="inline"/>
        <methodref name="GetTabOrder" visibility="private"/>
        <methodref name="GetVisibleDockClientCount" visibility="private"/>
        <methodref name="Insert" visibility="private"/>
        <methodref name="InvalidateFrame" visibility="private"/>
        <methodref name="InvokeHelp" visibility="private"/>
        <methodref name="IsCtl3DStored" visibility="private"/>
        <methodref name="IsDoubleBufferedStored" visibility="private"/>
        <methodref name="PrecedingWindow" visibility="private"/>
        <methodref name="ReadDesignSize" visibility="private"/>
        <methodref name="ReadPixelsPerInch" visibility="private"/>
        <methodref name="Remove" visibility="private"/>
        <methodref name="RemoveFocus" visibility="private"/>
        <methodref name="SetBevelCut" visibility="private"/>
        <methodref name="SetBevelEdges" visibility="private"/>
        <methodref name="SetBevelKind" visibility="private"/>
        <methodref name="SetBevelWidth" visibility="private"/>
        <methodref name="SetBorderWidth" visibility="private"/>
        <methodref name="SetCtl3D" visibility="private"/>
        <methodref name="SetDockSite" visibility="private"/>
        <methodref name="SetDoubleBuffered" visibility="private"/>
        <methodref name="SetPadding" visibility="private"/>
        <methodref name="SetParentCtl3D" visibility="private"/>
        <methodref name="SetParentWindow" visibility="private"/>
        <methodref name="SetTabOrder" visibility="private"/>
        <methodref name="SetTabStop" visibility="private"/>
        <methodref name="SetUseDockManager" visibility="private"/>
        <methodref name="SetZOrderPosition" visibility="private"/>
        <methodref name="UpdateTabOrder" visibility="private"/>
        <methodref name="UpdateShowing" visibility="private"/>
        <methodref name="WriteDesignSize" visibility="private"/>
        <methodref name="WritePixelsPerInch" visibility="private"/>
        <methodref name="IsMenuKey" visibility="private"/>
        <methodref name="GetIsDrawingLocked" visibility="private"/>
        <methodref name="GetRedrawDisabled" visibility="private"/>
        <methodref name="WMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="CMInputLangChange" visibility="private" procflags="message"/>
        <methodref name="WMPaint" visibility="private" procflags="message"/>
        <methodref name="WMCommand" visibility="private" procflags="message"/>
        <methodref name="WMNotify" visibility="private" procflags="message"/>
        <methodref name="WMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="WMHScroll" visibility="private" procflags="message"/>
        <methodref name="WMVScroll" visibility="private" procflags="message"/>
        <methodref name="WMCompareItem" visibility="private" procflags="message"/>
        <methodref name="WMDeleteItem" visibility="private" procflags="message"/>
        <methodref name="WMDrawItem" visibility="private" procflags="message"/>
        <methodref name="WMMeasureItem" visibility="private" procflags="message"/>
        <methodref name="WMEraseBkgnd" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
        <methodref name="WMWindowPosChanging" visibility="private" procflags="message"/>
        <methodref name="WMSize" visibility="private" procflags="message"/>
        <methodref name="WMMove" visibility="private" procflags="message"/>
        <methodref name="WMSetCursor" visibility="private" procflags="message"/>
        <methodref name="WMKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="WMKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMSysKeyUp" visibility="private" procflags="message"/>
        <methodref name="WMChar" visibility="private" procflags="message"/>
        <methodref name="WMSysCommand" visibility="private" procflags="message"/>
        <methodref name="WMCharToItem" visibility="private" procflags="message"/>
        <methodref name="WMParentNotify" visibility="private" procflags="message"/>
        <methodref name="WMVKeyToItem" visibility="private" procflags="message"/>
        <methodref name="WMDestroy" visibility="private" procflags="message"/>
        <methodref name="WMMouseActivate" visibility="private" procflags="message"/>
        <methodref name="WMNCCalcSize" visibility="private" procflags="message"/>
        <methodref name="WMNCDestroy" visibility="private" procflags="message"/>
        <methodref name="WMNCHitTest" visibility="private" procflags="message"/>
        <methodref name="WMNCPaint" visibility="private" procflags="message"/>
        <methodref name="WMQueryNewPalette" visibility="private" procflags="message"/>
        <methodref name="WMPaletteChanged" visibility="private" procflags="message"/>
        <methodref name="WMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="WMFontChange" visibility="private" procflags="message"/>
        <methodref name="WMTimeChange" visibility="private" procflags="message"/>
        <methodref name="WMSetFocus" visibility="private" procflags="message"/>
        <methodref name="WMKillFocus" visibility="private" procflags="message"/>
        <methodref name="WMIMEStartComp" visibility="private" procflags="message"/>
        <methodref name="WMIMEEndComp" visibility="private" procflags="message"/>
        <methodref name="WMContextMenu" visibility="private" procflags="message"/>
        <methodref name="WMGesture" visibility="private" procflags="message"/>
        <methodref name="WMGestureNotify" visibility="private" procflags="message"/>
        <methodref name="WMTabletQuerySystemGestureStatus" visibility="private" procflags="message"/>
        <methodref name="CMChanged" visibility="private" procflags="message"/>
        <methodref name="CMChildKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogKey" visibility="private" procflags="message"/>
        <methodref name="CMDialogChar" visibility="private" procflags="message"/>
        <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
        <methodref name="CMColorChanged" visibility="private" procflags="message"/>
        <methodref name="CMFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMBorderChanged" visibility="private" procflags="message"/>
        <methodref name="CMCursorChanged" visibility="private" procflags="message"/>
        <methodref name="CMCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentCtl3DChanged" visibility="private" procflags="message"/>
        <methodref name="CMParentDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowingChanged" visibility="private" procflags="message"/>
        <methodref name="CMShowHintChanged" visibility="private" procflags="message"/>
        <methodref name="CMEnter" visibility="private" procflags="message"/>
        <methodref name="CMExit" visibility="private" procflags="message"/>
        <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
        <methodref name="CMSysColorChange" visibility="private" procflags="message"/>
        <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
        <methodref name="CMSysFontsAllChanged" visibility="private" procflags="message"/>
        <methodref name="CMWinIniChange" visibility="private" procflags="message"/>
        <methodref name="CMFontChange" visibility="private" procflags="message"/>
        <methodref name="CMTimeChange" visibility="private" procflags="message"/>
        <methodref name="CMDrag" visibility="private" procflags="message"/>
        <methodref name="CMRemoteSessionStatusChanged" visibility="private" procflags="message"/>
        <methodref name="CNKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNKeyUp" visibility="private" procflags="message"/>
        <methodref name="CNChar" visibility="private" procflags="message"/>
        <methodref name="CNSysKeyDown" visibility="private" procflags="message"/>
        <methodref name="CNSysChar" visibility="private" procflags="message"/>
        <methodref name="CMRecreateWnd" visibility="private" procflags="message"/>
        <methodref name="CMSysCommand" visibility="private" procflags="message"/>
        <methodref name="CMInvalidate" visibility="private" procflags="message"/>
        <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
        <methodref name="CMDoubleBufferedChanged" visibility="private" procflags="message"/>
        <methodref name="CMTextChanged" visibility="private" procflags="message"/>
        <methodref name="WMPrintClient" visibility="private" procflags="message"/>
        <methodref name="CMTabletOptionsChanged" visibility="private" procflags="message"/>
        <methodref name="CMFocusChanged" visibility="private" procflags="message"/>
        <methodref name="CMControlListChange" visibility="private" procflags="message"/>
        <methodref name="CMControlListChanging" visibility="private" procflags="message"/>
        <methodref name="CMDockClient" visibility="private" procflags="message"/>
        <methodref name="CMUnDockClient" visibility="private" procflags="message"/>
        <methodref name="CMFloat" visibility="private" procflags="message"/>
        <methodref name="InvokeAsyncCalls" visibility="protected">
        </methodref>
        <methodref name="UpdateStyleElements" visibility="protected" procflags="override"/>
        <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
        <methodref name="ActionChange" visibility="protected" procflags="override"/>
        <methodref name="AddBiDiModeExStyle" visibility="protected"/>
        <methodref name="AssignTo" visibility="protected" procflags="override"/>
        <methodref name="AdjustClientRect" visibility="protected" procflags="virtual"/>
        <methodref name="AdjustSize" visibility="protected" procflags="override"/>
        <methodref name="AlignControls" visibility="protected" procflags="virtual"/>
        <methodref name="ArrangeControl" visibility="protected"/>
        <methodref name="CanAutoSize" visibility="protected" procflags="override"/>
        <methodref name="CanResize" visibility="protected" procflags="override"/>
        <methodref name="ChangeScale" visibility="protected" procflags="overload override"/>
        <methodref name="ConstrainedResize" visibility="protected" procflags="override"/>
        <methodref name="ControlsAligned" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateDockManager" visibility="protected" procflags="dynamic"/>
        <methodref name="CreateHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateParams" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="CreateWnd" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignInsertBefore" visibility="protected" procflags="virtual"/>
        <methodref name="CustomAlignPosition" visibility="protected" procflags="virtual"/>
        <methodref name="DefineProperties" visibility="protected" procflags="override"/>
        <methodref name="DestroyHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWindowHandle" visibility="protected" procflags="virtual"/>
        <methodref name="DestroyWnd" visibility="protected" procflags="virtual"/>
        <methodref name="DoAddDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DockReplaceDockClient" visibility="protected" procflags="virtual"/>
        <methodref name="DoDockOver" visibility="protected" procflags="dynamic"/>
        <methodref name="DoEnter" visibility="protected" procflags="dynamic"/>
        <methodref name="DoExit" visibility="protected" procflags="dynamic"/>
        <methodref name="DoFlipChildren" visibility="protected" procflags="dynamic"/>
        <methodref name="DoWritePixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="DoKeyDown" visibility="protected"/>
        <methodref name="DoKeyPress" visibility="protected"/>
        <methodref name="DoKeyUp" visibility="protected"/>
        <methodref name="DoHandleStyleMessage" visibility="protected" procflags="dynamic"/>
        <methodref name="DoRemoveDockClient" visibility="protected" procflags="dynamic"/>
        <methodref name="DoUnDock" visibility="protected" procflags="dynamic"/>
        <methodref name="FindNextControl" visibility="protected"/>
        <methodref name="FixupTabList" visibility="protected"/>
        <methodref name="GetActionLinkClass" visibility="protected" procflags="override"/>
        <methodref name="GetClientOrigin" visibility="protected" procflags="override"/>
        <methodref name="GetClientRect" visibility="protected" procflags="override"/>
        <methodref name="GetDPIForDesigner" visibility="protected" procflags="override"/>
        <methodref name="GetControlExtents" visibility="protected" procflags="virtual"/>
        <methodref name="GetDeviceContext" visibility="protected" procflags="overload override"/>
        <methodref name="GetParentHandle" visibility="protected"/>
        <methodref name="GetSiteInfo" visibility="protected" procflags="dynamic"/>
        <methodref name="GetTopParentHandle" visibility="protected"/>
        <methodref name="InvalidateDockHostSite" visibility="protected"/>
        <methodref name="IsControlMouseMsg" visibility="protected"/>
        <methodref name="IsControlActivateMsg" visibility="protected"/>
        <methodref name="IsQualifyingSite" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyDown" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyUp" visibility="protected" procflags="dynamic"/>
        <methodref name="KeyPress" visibility="protected" procflags="dynamic"/>
        <methodref name="MainWndProc" visibility="protected"/>
        <methodref name="Notification" visibility="protected" procflags="override"/>
        <methodref name="NotifyControls" visibility="protected"/>
        <methodref name="PaintControls" visibility="protected"/>
        <methodref name="PaintHandler" visibility="protected"/>
        <methodref name="PaintWindow" visibility="protected" procflags="virtual"/>
        <methodref name="PaletteChanged" visibility="protected" procflags="override"/>
        <methodref name="ReadState" visibility="protected" procflags="override"/>
        <methodref name="RecreateWnd" visibility="protected"/>
        <methodref name="ReloadDockedControl" visibility="protected" procflags="dynamic"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="ResetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="ResetImeComposition" visibility="protected"/>
        <methodref name="RequestAlign" visibility="protected" procflags="override"/>
        <methodref name="ScaleControlsForDpi" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetCurrentPPIScreen" visibility="protected"/>
        <methodref name="GetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="SetPixelsPerInch" visibility="protected" procflags="virtual"/>
        <methodref name="ScaleControls" visibility="protected"/>
        <methodref name="ScalePadding" visibility="protected"/>
        <methodref name="SelectFirst" visibility="protected"/>
        <methodref name="SelectNext" visibility="protected"/>
        <methodref name="SetChildOrder" visibility="protected" procflags="override"/>
        <methodref name="SetIme" visibility="protected" procflags="overload inline"/>
        <methodref name="SetIme" visibility="protected" procflags="overload virtual"/>
        <methodref name="SetImeCompositionWindow" visibility="protected"/>
        <methodref name="SetParent" visibility="protected" procflags="override"/>
        <methodref name="SetParentBackground" visibility="protected" procflags="virtual"/>
        <methodref name="SetParentDoubleBuffered" visibility="protected" procflags="virtual"/>
        <methodref name="SetZOrder" visibility="protected" procflags="override"/>
        <methodref name="ShowControl" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateBounds" visibility="protected"/>
        <methodref name="UpdateControlOriginalParentSize" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateRecreatingFlag" visibility="protected"/>
        <methodref name="UpdateTIPStatus" visibility="protected" procflags="virtual"/>
        <methodref name="UpdateUIState" visibility="protected"/>
        <methodref name="WndProc" visibility="protected" procflags="override"/>
        <methodref name="CreateSubClass" visibility="protected"/>
        <methodref name="RemoveWindowProps" visibility="protected"/>
        <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="override"/>
        <propertyref name="AlignControlList" visibility="protected"/>
        <propertyref name="BevelEdges" visibility="protected"/>
        <propertyref name="BevelInner" visibility="protected"/>
        <propertyref name="BevelOuter" visibility="protected"/>
        <propertyref name="BevelKind" visibility="protected"/>
        <propertyref name="BevelWidth" visibility="protected"/>
        <propertyref name="BorderWidth" visibility="protected"/>
        <propertyref name="Ctl3D" visibility="protected"/>
        <propertyref name="ImeMode" visibility="protected"/>
        <propertyref name="ImeName" visibility="protected"/>
        <propertyref name="ParentBackground" visibility="protected"/>
        <propertyref name="ParentCtl3D" visibility="protected"/>
        <propertyref name="TipMode" visibility="protected"/>
        <propertyref name="DefWndProc" visibility="protected"/>
        <propertyref name="WindowHandle" visibility="protected"/>
        <eventref name="OnAlignInsertBefore" visibility="protected"/>
        <eventref name="OnAlignPosition" visibility="protected"/>
        <eventref name="OnDockDrop" visibility="protected"/>
        <eventref name="OnDockOver" visibility="protected"/>
        <eventref name="OnEnter" visibility="protected"/>
        <eventref name="OnExit" visibility="protected"/>
        <eventref name="OnGetSiteInfo" visibility="protected"/>
        <eventref name="OnKeyDown" visibility="protected"/>
        <eventref name="OnKeyPress" visibility="protected"/>
        <eventref name="OnKeyUp" visibility="protected"/>
        <eventref name="OnUnDock" visibility="protected"/>
        <methodref name="Create" visibility="public" procflags="constructor override"/>
        <methodref name="CreateParented" visibility="public" procflags="constructor"/>
        <methodref name="CreateParentedControl" visibility="public" procflags="class"/>
        <methodref name="Destroy" visibility="public" procflags="destructor override"/>
        <methodref name="ScaleForPPI" visibility="public" procflags="override">
        </methodref>
        <methodref name="Broadcast" visibility="public"/>
        <methodref name="CanFocus" visibility="public" procflags="dynamic"/>
        <methodref name="ContainsControl" visibility="public"/>
        <methodref name="ControlAtPos" visibility="public"/>
        <methodref name="DefaultHandler" visibility="public" procflags="override"/>
        <methodref name="DisableAlign" visibility="public" procflags="inline"/>
        <propertyref name="DockClientCount" visibility="public"/>
        <propertyref name="DockClients" visibility="public"/>
        <methodref name="DockDrop" visibility="public" procflags="dynamic"/>
        <propertyref name="DockSite" visibility="public"/>
        <propertyref name="DockManager" visibility="public"/>
        <propertyref name="DoubleBuffered" visibility="public"/>
        <methodref name="EnableAlign" visibility="public"/>
        <methodref name="FindChildControl" visibility="public"/>
        <methodref name="FlipChildren" visibility="public" procflags="dynamic"/>
        <methodref name="Focused" visibility="public" procflags="dynamic"/>
        <methodref name="GetChildren" visibility="public" procflags="override"/>
        <methodref name="GetTabControlList" visibility="public" procflags="dynamic"/>
        <methodref name="GetTabOrderList" visibility="public" procflags="dynamic"/>
        <methodref name="HandleAllocated" visibility="public"/>
        <methodref name="HandleNeeded" visibility="public"/>
        <methodref name="InsertControl" visibility="public"/>
        <methodref name="Invalidate" visibility="public" procflags="override"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <methodref name="PaintTo" visibility="public" procflags="overload"/>
        <propertyref name="PixelsPerInch" visibility="public"/>
        <methodref name="PreProcessMessage" visibility="public" procflags="dynamic"/>
        <methodref name="RemoveControl" visibility="public"/>
        <methodref name="Realign" visibility="public" procflags="inline"/>
        <methodref name="Repaint" visibility="public" procflags="override"/>
        <methodref name="ScaleBy" visibility="public"/>
        <methodref name="ScrollBy" visibility="public"/>
        <methodref name="SetBounds" visibility="public" procflags="override"/>
        <methodref name="SetDesignVisible" visibility="public" procflags="override"/>
        <methodref name="SetFocus" visibility="public" procflags="virtual"/>
        <methodref name="Update" visibility="public" procflags="override"/>
        <methodref name="UpdateControlState" visibility="public"/>
        <methodref name="LockDrawing" visibility="public"/>
        <methodref name="UnlockDrawing" visibility="public"/>
        <propertyref name="AlignDisabled" visibility="public"/>
        <propertyref name="MouseInClient" visibility="public"/>
        <propertyref name="VisibleDockClientCount" visibility="public"/>
        <propertyref name="Brush" visibility="public"/>
        <propertyref name="Controls" visibility="public"/>
        <propertyref name="ControlCount" visibility="public"/>
        <propertyref name="Handle" visibility="public"/>
        <propertyref name="Padding" visibility="public"/>
        <propertyref name="ParentDoubleBuffered" visibility="public"/>
        <propertyref name="ParentWindow" visibility="public"/>
        <propertyref name="Showing" visibility="public"/>
        <propertyref name="IsDrawingLocked" visibility="public"/>
        <propertyref name="RedrawDisabled" visibility="public"/>
        <propertyref name="TabOrder" visibility="public"/>
        <propertyref name="TabStop" visibility="public"/>
        <propertyref name="UseDockManager" visibility="public"/>
        <ancestor name="TControl" namespace="Vcl.Controls">
          <methodref name="GetCustomHint" visibility="private"/>
          <methodref name="CalcDockSizes" visibility="private"/>
          <methodref name="CheckNewSize" visibility="private"/>
          <methodref name="CreateFloatingDockSite" visibility="private"/>
          <methodref name="DoActionChange" visibility="private"/>
          <methodref name="DoCanAutoSize" visibility="private"/>
          <methodref name="DoCanResize" visibility="private"/>
          <methodref name="DoConstraintsChange" visibility="private"/>
          <methodref name="DoConstrainedResize" visibility="private"/>
          <methodref name="DoDragMsg" visibility="private"/>
          <methodref name="DoMouseActivate" visibility="private"/>
          <methodref name="DoMouseDown" visibility="private"/>
          <methodref name="DoMouseUp" visibility="private"/>
          <methodref name="DoMarginChange" visibility="private"/>
          <methodref name="FontChanged" visibility="private"/>
          <methodref name="GetAlignWithMargins" visibility="private" procflags="inline"/>
          <methodref name="GetBoundsRect" visibility="private"/>
          <methodref name="GetClientHeight" visibility="private"/>
          <methodref name="GetClientWidth" visibility="private"/>
          <methodref name="GetLRDockWidth" visibility="private"/>
          <methodref name="GetMouseCapture" visibility="private"/>
          <methodref name="GetTBDockHeight" visibility="private"/>
          <methodref name="GetUndockWidth" visibility="private"/>
          <methodref name="GetUndockHeight" visibility="private"/>
          <methodref name="InvalidateControl" visibility="private"/>
          <methodref name="IsAnchorsStored" visibility="private"/>
          <methodref name="IsBiDiModeStored" visibility="private"/>
          <methodref name="IsCaptionStored" visibility="private"/>
          <methodref name="IsColorStored" visibility="private"/>
          <methodref name="IsEnabledStored" visibility="private"/>
          <methodref name="IsFontStored" visibility="private"/>
          <methodref name="IsHintStored" visibility="private"/>
          <methodref name="IsHelpContextStored" visibility="private"/>
          <methodref name="IsOnClickStored" visibility="private"/>
          <methodref name="IsShowHintStored" visibility="private"/>
          <methodref name="IsVisibleStored" visibility="private"/>
          <methodref name="ReadIsControl" visibility="private"/>
          <methodref name="ReadExplicitLeft" visibility="private"/>
          <methodref name="ReadExplicitTop" visibility="private"/>
          <methodref name="ReadExplicitWidth" visibility="private"/>
          <methodref name="ReadExplicitHeight" visibility="private"/>
          <methodref name="SetAlignWithMargins" visibility="private"/>
          <methodref name="SetAnchors" visibility="private"/>
          <methodref name="SetAction" visibility="private"/>
          <methodref name="SetAlign" visibility="private"/>
          <methodref name="SetBoundsRect" visibility="private"/>
          <methodref name="SetClientHeight" visibility="private"/>
          <methodref name="SetClientSize" visibility="private"/>
          <methodref name="SetClientWidth" visibility="private"/>
          <methodref name="SetColor" visibility="private"/>
          <methodref name="SetCursor" visibility="private"/>
          <methodref name="SetDesktopFont" visibility="private"/>
          <methodref name="SetFont" visibility="private"/>
          <methodref name="SetHeight" visibility="private"/>
          <methodref name="SetHelpContext" visibility="private"/>
          <methodref name="SetHelpKeyword" visibility="private"/>
          <methodref name="SetHostDockSite" visibility="private"/>
          <methodref name="SetLeft" visibility="private"/>
          <methodref name="SetMouseCapture" visibility="private"/>
          <methodref name="SetParentColor" visibility="private"/>
          <methodref name="SetParentFont" visibility="private"/>
          <methodref name="SetShowHint" visibility="private"/>
          <methodref name="SetParentShowHint" visibility="private"/>
          <methodref name="SetParentCustomHint" visibility="private"/>
          <methodref name="SetPopupMenu" visibility="private"/>
          <methodref name="SetTop" visibility="private"/>
          <methodref name="SetVisible" visibility="private"/>
          <methodref name="SetWidth" visibility="private"/>
          <methodref name="SetZOrderPosition" visibility="private"/>
          <methodref name="UpdateAnchorRules" visibility="private"/>
          <methodref name="WriteIsControl" visibility="private"/>
          <methodref name="WriteExplicitLeft" visibility="private"/>
          <methodref name="WriteExplicitTop" visibility="private"/>
          <methodref name="WriteExplicitWidth" visibility="private"/>
          <methodref name="WriteExplicitHeight" visibility="private"/>
          <methodref name="WMLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMNCLButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDown" visibility="private" procflags="message"/>
          <methodref name="WMLButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMRButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMButtonDblClk" visibility="private" procflags="message"/>
          <methodref name="WMMouseMove" visibility="private" procflags="message"/>
          <methodref name="WMLButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMRButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMButtonUp" visibility="private" procflags="message"/>
          <methodref name="WMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="WMCancelMode" visibility="private" procflags="message"/>
          <methodref name="WMWindowPosChanged" visibility="private" procflags="message"/>
          <methodref name="CMVisibleChanged" visibility="private" procflags="message"/>
          <methodref name="CMEnabledChanged" visibility="private" procflags="message"/>
          <methodref name="CMFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseActivate" visibility="private" procflags="message"/>
          <methodref name="CMParentFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMSysFontChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentColorChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentShowHintChanged" visibility="private" procflags="message"/>
          <methodref name="CMHintShow" visibility="private" procflags="message"/>
          <methodref name="CMHitTest" visibility="private" procflags="message"/>
          <methodref name="CMMouseEnter" visibility="private" procflags="message"/>
          <methodref name="CMMouseLeave" visibility="private" procflags="message"/>
          <methodref name="CMDesignHitTest" visibility="private" procflags="message"/>
          <methodref name="CMBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMParentBiDiModeChanged" visibility="private" procflags="message"/>
          <methodref name="CMMouseWheel" visibility="private" procflags="message"/>
          <methodref name="CMGesture" visibility="private" procflags="message"/>
          <methodref name="WMContextMenu" visibility="private" procflags="message"/>
          <methodref name="CMParentTabletOptionsChanged" visibility="private" procflags="message"/>
          <methodref name="SetConstraints" visibility="private"/>
          <methodref name="SetMargins" visibility="private"/>
          <methodref name="SetTouchManager" visibility="private"/>
          <methodref name="GetText" visibility="private"/>
          <methodref name="SetText" visibility="private"/>
          <methodref name="CMFloat" visibility="private" procflags="message"/>
          <methodref name="GetDesignDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetParentCurrentDpi" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetCurrentPPI" visibility="protected" procflags="virtual"/>
          <methodref name="GetDPIForDesigner" visibility="protected" procflags="virtual"/>
          <methodref name="AsyncSchedule" visibility="protected" procflags="override"/>
          <methodref name="ActionChange" visibility="protected" procflags="dynamic"/>
          <methodref name="AdjustSize" visibility="protected" procflags="dynamic"/>
          <methodref name="AssignTo" visibility="protected" procflags="override"/>
          <methodref name="BeginAutoDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="CanResize" visibility="protected" procflags="virtual"/>
          <methodref name="CanAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="Changed" visibility="protected"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="ChangeScale" visibility="protected" procflags="overload dynamic"/>
          <methodref name="Click" visibility="protected" procflags="dynamic"/>
          <methodref name="ConstrainedResize" visibility="protected" procflags="virtual"/>
          <methodref name="CalcCursorPos" visibility="protected"/>
          <methodref name="CreateTouchManager" visibility="protected" procflags="virtual"/>
          <methodref name="DblClick" visibility="protected" procflags="dynamic"/>
          <methodref name="DefaultDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="DefineProperties" visibility="protected" procflags="override"/>
          <methodref name="DockTrackNoTarget" visibility="protected" procflags="dynamic"/>
          <methodref name="DoContextPopup" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDock" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheel" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelDown" visibility="protected" procflags="dynamic"/>
          <methodref name="DoMouseWheelUp" visibility="protected" procflags="dynamic"/>
          <methodref name="DragCanceled" visibility="protected" procflags="dynamic"/>
          <methodref name="DragOver" visibility="protected" procflags="dynamic"/>
          <methodref name="DoEndDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoStartDrag" visibility="protected" procflags="dynamic"/>
          <methodref name="DoGesture" visibility="protected" procflags="virtual"/>
          <methodref name="DoGetGestureOptions" visibility="protected" procflags="virtual"/>
          <methodref name="DrawDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="EraseDragDockImage" visibility="protected" procflags="dynamic"/>
          <methodref name="GetAction" visibility="protected" procflags="virtual"/>
          <methodref name="GetActionLinkClass" visibility="protected" procflags="dynamic"/>
          <methodref name="GetClientOrigin" visibility="protected" procflags="virtual"/>
          <methodref name="GetClientRect" visibility="protected" procflags="virtual"/>
          <methodref name="GetDeviceContext" visibility="protected" procflags="overload virtual"/>
          <methodref name="GetDockEdge" visibility="protected" procflags="dynamic"/>
          <methodref name="GetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloating" visibility="protected" procflags="virtual"/>
          <methodref name="GetFloatingDockSiteClass" visibility="protected" procflags="virtual"/>
          <methodref name="GetPalette" visibility="protected" procflags="dynamic"/>
          <methodref name="GetPopupMenu" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragMode" visibility="protected"/>
          <methodref name="IsTouchPropertyStored" visibility="protected" procflags="dynamic"/>
          <methodref name="Loaded" visibility="protected" procflags="override"/>
          <methodref name="MouseActivate" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseDown" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseMove" visibility="protected" procflags="dynamic"/>
          <methodref name="MouseUp" visibility="protected" procflags="dynamic"/>
          <methodref name="Notification" visibility="protected" procflags="override"/>
          <methodref name="PositionDockRect" visibility="protected" procflags="dynamic"/>
          <methodref name="PaletteChanged" visibility="protected" procflags="dynamic"/>
          <methodref name="ReadState" visibility="protected" procflags="override"/>
          <methodref name="RequestAlign" visibility="protected" procflags="virtual"/>
          <methodref name="Resize" visibility="protected" procflags="dynamic"/>
          <methodref name="ScaleConstraints" visibility="protected"/>
          <methodref name="ScaleMargins" visibility="protected"/>
          <methodref name="DefaultScalingFlags" visibility="protected" procflags="virtual"/>
          <methodref name="SendCancelMode" visibility="protected"/>
          <methodref name="SendDockNotification" visibility="protected"/>
          <methodref name="SetAutoSize" visibility="protected" procflags="virtual"/>
          <methodref name="SetDragMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetEnabled" visibility="protected" procflags="virtual"/>
          <methodref name="SetName" visibility="protected" procflags="override"/>
          <methodref name="SetParent" visibility="protected" procflags="virtual"/>
          <methodref name="SetParentBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetBiDiMode" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="SetStyleName" visibility="protected" procflags="virtual"/>
          <methodref name="SetZOrder" visibility="protected" procflags="dynamic"/>
          <methodref name="SetCustomHint" visibility="protected"/>
          <methodref name="UpdateExplicitBounds" visibility="protected"/>
          <methodref name="UpdateBoundsRect" visibility="protected"/>
          <methodref name="VisibleChanging" visibility="protected" procflags="dynamic"/>
          <methodref name="WndProc" visibility="protected" procflags="virtual"/>
          <methodref name="UpdateStyleElements" visibility="protected" procflags="virtual"/>
          <methodref name="DesignWndProc" visibility="protected" procflags="dynamic"/>
          <methodref name="GetDragImages" visibility="protected" procflags="virtual"/>
          <methodref name="GetAllocatedWindowHandle" visibility="protected" procflags="virtual"/>
          <propertyref name="ActionLink" visibility="protected"/>
          <propertyref name="AutoSize" visibility="protected"/>
          <propertyref name="Caption" visibility="protected"/>
          <propertyref name="DesktopFont" visibility="protected"/>
          <propertyref name="DragKind" visibility="protected"/>
          <propertyref name="DragCursor" visibility="protected"/>
          <propertyref name="DragMode" visibility="protected"/>
          <propertyref name="IsControl" visibility="protected"/>
          <propertyref name="MouseCapture" visibility="protected"/>
          <propertyref name="ParentBiDiMode" visibility="protected"/>
          <propertyref name="ParentColor" visibility="protected"/>
          <propertyref name="ParentFont" visibility="protected"/>
          <propertyref name="ParentShowHint" visibility="protected"/>
          <propertyref name="PopupMenu" visibility="protected"/>
          <propertyref name="ScalingFlags" visibility="protected"/>
          <propertyref name="Text" visibility="protected"/>
          <propertyref name="WheelAccumulator" visibility="protected"/>
          <propertyref name="Color" visibility="protected"/>
          <propertyref name="Font" visibility="protected"/>
          <propertyref name="IScaling" visibility="protected"/>
          <propertyref name="WindowText" visibility="protected"/>
          <eventref name="OnCanResize" visibility="protected"/>
          <eventref name="OnClick" visibility="protected"/>
          <eventref name="OnConstrainedResize" visibility="protected"/>
          <eventref name="OnContextPopup" visibility="protected"/>
          <eventref name="OnDblClick" visibility="protected"/>
          <eventref name="OnDragDrop" visibility="protected"/>
          <eventref name="OnDragOver" visibility="protected"/>
          <eventref name="OnEndDock" visibility="protected"/>
          <eventref name="OnEndDrag" visibility="protected"/>
          <eventref name="OnMouseActivate" visibility="protected"/>
          <eventref name="OnMouseDown" visibility="protected"/>
          <eventref name="OnMouseEnter" visibility="protected"/>
          <eventref name="OnMouseLeave" visibility="protected"/>
          <eventref name="OnMouseMove" visibility="protected"/>
          <eventref name="OnMouseUp" visibility="protected"/>
          <eventref name="OnMouseWheel" visibility="protected"/>
          <eventref name="OnMouseWheelDown" visibility="protected"/>
          <eventref name="OnMouseWheelUp" visibility="protected"/>
          <eventref name="OnResize" visibility="protected"/>
          <eventref name="OnStartDock" visibility="protected"/>
          <eventref name="OnStartDrag" visibility="protected"/>
          <methodref name="Create" visibility="public" procflags="constructor override"/>
          <methodref name="Destroy" visibility="public" procflags="destructor override"/>
          <methodref name="CheckNonMainThreadUsage" visibility="public"/>
          <methodref name="IsCustomStyleActive" visibility="public" procflags="virtual"/>
          <methodref name="IsLightStyleColor" visibility="public" procflags="virtual"/>
          <methodref name="ScaleForPPI" visibility="public" procflags="virtual"/>
          <methodref name="BeginDrag" visibility="public"/>
          <methodref name="BringToFront" visibility="public"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToScreen" visibility="public" procflags="overload"/>
          <methodref name="ClientToParent" visibility="public"/>
          <methodref name="Dock" visibility="public" procflags="dynamic"/>
          <methodref name="Dragging" visibility="public"/>
          <methodref name="DragDrop" visibility="public" procflags="dynamic"/>
          <methodref name="DrawTextBiDiModeFlags" visibility="public"/>
          <methodref name="DrawTextBiDiModeFlagsReadingOnly" visibility="public"/>
          <propertyref name="Enabled" visibility="public"/>
          <methodref name="EndDrag" visibility="public"/>
          <methodref name="GetControlsAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="GetParentComponent" visibility="public" procflags="override"/>
          <methodref name="HasParent" visibility="public" procflags="override"/>
          <methodref name="Hide" visibility="public"/>
          <methodref name="InitiateAction" visibility="public" procflags="virtual"/>
          <methodref name="Invalidate" visibility="public" procflags="virtual"/>
          <methodref name="MouseWheelHandler" visibility="public" procflags="dynamic"/>
          <methodref name="IsRightToLeft" visibility="public"/>
          <methodref name="ManualDock" visibility="public"/>
          <methodref name="ManualFloat" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Refresh" visibility="public"/>
          <methodref name="Repaint" visibility="public" procflags="virtual"/>
          <methodref name="ReplaceDockedControl" visibility="public"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ScreenToClient" visibility="public" procflags="overload"/>
          <methodref name="ParentToClient" visibility="public"/>
          <methodref name="SendToBack" visibility="public"/>
          <methodref name="SetBounds" visibility="public" procflags="virtual"/>
          <methodref name="SetDesignVisible" visibility="public" procflags="dynamic"/>
          <methodref name="SetParentComponent" visibility="public" procflags="override"/>
          <methodref name="Show" visibility="public"/>
          <methodref name="Update" visibility="public" procflags="virtual"/>
          <methodref name="UseRightToLeftAlignment" visibility="public" procflags="dynamic"/>
          <methodref name="UseRightToLeftReading" visibility="public"/>
          <methodref name="UseRightToLeftScrollBar" visibility="public"/>
          <methodref name="DefaultHandler" visibility="public" procflags="override"/>
          <methodref name="GetTextBuf" visibility="public"/>
          <methodref name="GetTextLen" visibility="public"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="Perform" visibility="public" procflags="overload"/>
          <methodref name="SetTextBuf" visibility="public"/>
          <methodref name="GetSystemMetrics" visibility="public" procflags="virtual"/>
          <methodref name="GetStyleName" visibility="public" procflags="virtual"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleValue" visibility="public" procflags="overload"/>
          <methodref name="ScaleRectSize" visibility="public"/>
          <propertyref name="Action" visibility="public"/>
          <propertyref name="Align" visibility="public"/>
          <propertyref name="Anchors" visibility="public"/>
          <propertyref name="BiDiMode" visibility="public"/>
          <propertyref name="BoundsRect" visibility="public"/>
          <propertyref name="ClientHeight" visibility="public"/>
          <propertyref name="ClientOrigin" visibility="public"/>
          <propertyref name="ClientRect" visibility="public"/>
          <propertyref name="ClientWidth" visibility="public"/>
          <propertyref name="Constraints" visibility="public"/>
          <propertyref name="ControlState" visibility="public"/>
          <propertyref name="ControlStyle" visibility="public"/>
          <propertyref name="CurrentPPI" visibility="public"/>
          <propertyref name="DockOrientation" visibility="public"/>
          <propertyref name="ExplicitLeft" visibility="public"/>
          <propertyref name="ExplicitTop" visibility="public"/>
          <propertyref name="ExplicitWidth" visibility="public"/>
          <propertyref name="ExplicitHeight" visibility="public"/>
          <propertyref name="Floating" visibility="public"/>
          <propertyref name="FloatingDockSiteClass" visibility="public"/>
          <propertyref name="HostDockSite" visibility="public"/>
          <propertyref name="LRDockWidth" visibility="public"/>
          <propertyref name="ScaleFactor" visibility="public"/>
          <propertyref name="ShowHint" visibility="public"/>
          <propertyref name="TBDockHeight" visibility="public"/>
          <propertyref name="Touch" visibility="public"/>
          <propertyref name="UndockHeight" visibility="public"/>
          <propertyref name="UndockWidth" visibility="public"/>
          <propertyref name="Visible" visibility="public"/>
          <eventref name="WindowProc" visibility="public"/>
          <propertyref name="Parent" visibility="public"/>
          <propertyref name="StyleElements" visibility="public"/>
          <propertyref name="StyleName" visibility="public"/>
          <eventref name="OnGesture" visibility="public"/>
          <propertyref name="RaiseOnNonMainThreadUsage" visibility="public"/>
          <propertyref name="AlignWithMargins" visibility="published"/>
          <propertyref name="Left" visibility="published"/>
          <propertyref name="Top" visibility="published"/>
          <propertyref name="Width" visibility="published"/>
          <propertyref name="Height" visibility="published"/>
          <propertyref name="Cursor" visibility="published"/>
          <propertyref name="Hint" visibility="published"/>
          <propertyref name="HelpType" visibility="published"/>
          <propertyref name="HelpKeyword" visibility="published"/>
          <propertyref name="HelpContext" visibility="published"/>
          <propertyref name="Margins" visibility="published"/>
          <propertyref name="CustomHint" visibility="published"/>
          <propertyref name="ParentCustomHint" visibility="published"/>
          <ancestor name="TComponent" namespace="System.Classes">
            <interfaces>
              <implements name="IInterfaceComponentReference"/>
              <implements name="IInterface"/>
            </interfaces>
            <methodref name="GetComObject" visibility="private">
            </methodref>
            <methodref name="GetComponent" visibility="private">
            </methodref>
            <methodref name="GetComponentCount" visibility="private">
            </methodref>
            <methodref name="GetComponentIndex" visibility="private">
            </methodref>
            <methodref name="Insert" visibility="private">
            </methodref>
            <methodref name="ReadLeft" visibility="private">
            </methodref>
            <methodref name="ReadTop" visibility="private">
            </methodref>
            <methodref name="Remove" visibility="private">
            </methodref>
            <methodref name="RemoveNotification" visibility="private">
            </methodref>
            <methodref name="SetComponentIndex" visibility="private">
            </methodref>
            <methodref name="SetReference" visibility="private">
            </methodref>
            <methodref name="WriteLeft" visibility="private">
            </methodref>
            <methodref name="WriteTop" visibility="private">
            </methodref>
            <methodref name="IntfGetComponent" visibility="private">
            </methodref>
            <methodref name="DoGetDeltaStreams" visibility="private">
            </methodref>
            <methodref name="ReadDeltaStream" visibility="private">
            </methodref>
            <methodref name="ReadDeltaState" visibility="private">
            </methodref>
            <methodref name="FindSortedComponent" visibility="private">
            </methodref>
            <methodref name="AddSortedComponent" visibility="private">
            </methodref>
            <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
            </methodref>
            <methodref name="Create@" visibility="class private" procflags="class constructor noself">
            </methodref>
            <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ChangeName" visibility="protected">
            </methodref>
            <methodref name="DefineProperties" visibility="protected" procflags="override">
            </methodref>
            <methodref name="GetChildren" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="GetOwner" visibility="protected" procflags="override">
            </methodref>
            <methodref name="Loaded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="Notification" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ReadState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="CanObserve" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="GetObservers" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetAncestor" visibility="protected">
            </methodref>
            <methodref name="SetDesigning" visibility="protected">
            </methodref>
            <methodref name="SetInline" visibility="protected">
            </methodref>
            <methodref name="SetDesignInstance" visibility="protected">
            </methodref>
            <methodref name="SetName" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updating" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="Updated" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
            </methodref>
            <methodref name="ValidateRename" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
            </methodref>
            <methodref name="WriteState" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="RemoveFreeNotifications" visibility="protected">
            </methodref>
            <methodref name="QueryInterface" visibility="protected" procflags="virtual">
            </methodref>
            <methodref name="_AddRef" visibility="protected">
            </methodref>
            <methodref name="_Release" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfoCount" visibility="protected">
            </methodref>
            <methodref name="GetTypeInfo" visibility="protected">
            </methodref>
            <methodref name="GetIDsOfNames" visibility="protected">
            </methodref>
            <methodref name="Invoke" visibility="protected">
            </methodref>
            <eventref name="OnGetDeltaStreams" visibility="protected">
            </eventref>
            <methodref name="Create" visibility="public" procflags="constructor virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor override">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="override">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="BeginInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndInvoke" visibility="public" procflags="overload">
            </methodref>
            <methodref name="EndFunctionInvoke" visibility="public">
            </methodref>
            <methodref name="DestroyComponents" visibility="public">
            </methodref>
            <methodref name="Destroying" visibility="public">
            </methodref>
            <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="FindComponent" visibility="public">
            </methodref>
            <methodref name="FreeNotification" visibility="public">
            </methodref>
            <methodref name="RemoveFreeNotification" visibility="public">
            </methodref>
            <methodref name="FreeOnRelease" visibility="public">
            </methodref>
            <methodref name="GetEnumerator" visibility="public" procflags="inline">
            </methodref>
            <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="GetNamePath" visibility="public" procflags="override">
            </methodref>
            <methodref name="HasParent" visibility="public" procflags="dynamic">
            </methodref>
            <methodref name="InsertComponent" visibility="public">
            </methodref>
            <methodref name="RemoveComponent" visibility="public">
            </methodref>
            <methodref name="SetSubComponent" visibility="public">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="override">
            </methodref>
            <methodref name="UpdateAction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="IsImplementorOf" visibility="public">
            </methodref>
            <methodref name="ReferenceInterface" visibility="public">
            </methodref>
            <propertyref name="ComObject" visibility="public">
            </propertyref>
            <propertyref name="Components" visibility="public">
            </propertyref>
            <propertyref name="ComponentCount" visibility="public">
            </propertyref>
            <propertyref name="ComponentIndex" visibility="public">
            </propertyref>
            <propertyref name="ComponentState" visibility="public">
            </propertyref>
            <propertyref name="ComponentStyle" visibility="public">
            </propertyref>
            <propertyref name="DesignInfo" visibility="public">
            </propertyref>
            <propertyref name="Owner" visibility="public">
            </propertyref>
            <propertyref name="VCLComObject" visibility="public">
            </propertyref>
            <propertyref name="Observers" visibility="public">
            </propertyref>
            <propertyref name="Name" visibility="published">
            </propertyref>
            <propertyref name="Tag" visibility="published">
            </propertyref>
            <ancestor name="TPersistent" namespace="System.Classes">
              <methodref name="AssignError" visibility="private">
              </methodref>
              <methodref name="AssignTo" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="DefineProperties" visibility="protected" procflags="virtual">
              </methodref>
              <methodref name="GetOwner" visibility="protected" procflags="dynamic">
              </methodref>
              <methodref name="Destroy" visibility="public" procflags="destructor override">
              </methodref>
              <methodref name="Assign" visibility="public" procflags="virtual">
              </methodref>
              <methodref name="GetNamePath" visibility="public" procflags="dynamic">
              </methodref>
              <ancestor name="TObject" namespace="System">
                <methodref name="Create" visibility="public" procflags="constructor">
                </methodref>
                <methodref name="Free" visibility="public">
                </methodref>
                <methodref name="DisposeOf" visibility="public" procflags="inline">
                </methodref>
                <methodref name="InitInstance" visibility="public" procflags="class">
                </methodref>
                <methodref name="CleanupInstance" visibility="public">
                </methodref>
                <methodref name="ClassType" visibility="public" procflags="inline">
                </methodref>
                <methodref name="ClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassNameIs" visibility="public" procflags="class">
                </methodref>
                <methodref name="ClassParent" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="ClassInfo" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InstanceSize" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="InheritsFrom" visibility="public" procflags="class">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodAddress" visibility="public" procflags="class overload">
                </methodref>
                <methodref name="MethodName" visibility="public" procflags="class">
                </methodref>
                <methodref name="QualifiedClassName" visibility="public" procflags="class">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="FieldAddress" visibility="public" procflags="overload">
                </methodref>
                <methodref name="GetInterface" visibility="public">
                </methodref>
                <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
                </methodref>
                <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
                </methodref>
                <methodref name="UnitName" visibility="public" procflags="class">
                </methodref>
                <methodref name="UnitScope" visibility="public" procflags="class">
                </methodref>
                <methodref name="Equals" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="GetHashCode" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="ToString" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="SafeCallException" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="AfterConstruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Dispatch" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="DefaultHandler" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="NewInstance" visibility="public" procflags="class virtual">
                </methodref>
                <methodref name="FreeInstance" visibility="public" procflags="virtual">
                </methodref>
                <methodref name="Destroy" visibility="public" procflags="destructor virtual">
                </methodref>
                <methodref name="GetDisposed" visibility="protected" procflags="inline">
                </methodref>
                <methodref name="CheckDisposed" visibility="protected" procflags="inline">
                </methodref>
                <propertyref name="Disposed" visibility="protected">
                </propertyref>
              </ancestor>
            </ancestor>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FHintParent" type="TCustomHint" visibility="private" size="4" offset="696" file="Vcl.Controls.pas" line="3094"/>
      <field name="FPopAbove" type="Boolean" visibility="private" size="1" offset="700" file="Vcl.Controls.pas" line="3095"/>
      <field name="FTitle" type="string" visibility="private" size="4" offset="704" file="Vcl.Controls.pas" line="3096"/>
      <field name="FDescription" type="string" visibility="private" size="4" offset="708" file="Vcl.Controls.pas" line="3097"/>
      <field name="FImageIndex" type="TImageIndex" visibility="private" size="4" offset="712" file="Vcl.Controls.pas" line="3098"/>
      <procedure name="WMNCHitTest" visibility="private" procflags="message" file="Vcl.Controls.pas" line="3099">
        <parameters>
          <parameter name="Message" type="TWMNCHitTest" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="WMNCPaint" visibility="private" procflags="message" file="Vcl.Controls.pas" line="3100">
        <parameters>
          <parameter name="Message" type="TWMNCPaint" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CMTextChanged" visibility="private" procflags="message" file="Vcl.Controls.pas" line="3101">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CreateParams" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="3103">
        <parameters>
          <parameter name="Params" type="TCreateParams" paramflags="var"/>
        </parameters>
      </procedure>
      <procedure name="CreateWnd" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="3104">
      </procedure>
      <procedure name="NCPaint" visibility="protected" procflags="virtual" file="Vcl.Controls.pas" line="3105">
        <parameters>
          <parameter name="DC" type="HDC"/>
        </parameters>
      </procedure>
      <procedure name="Paint" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="3106">
      </procedure>
      <procedure name="WMPrint" visibility="protected" procflags="message" file="Vcl.Controls.pas" line="3107">
        <parameters>
          <parameter name="Message" type="TMessage" paramflags="var"/>
        </parameters>
      </procedure>
      <function name="IsThemed" visibility="protected" file="Vcl.Controls.pas" line="3108">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <function name="NewStylePainting" visibility="protected" file="Vcl.Controls.pas" line="3109">
        <parameters>
          <retval type="Boolean"/>
        </parameters>
      </function>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="3111">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <procedure name="AutoSize" visibility="public" file="Vcl.Controls.pas" line="3112">
      </procedure>
      <procedure name="PositionAt" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3113">
        <parameters>
          <parameter name="Point" type="TPoint"/>
        </parameters>
      </procedure>
      <procedure name="PositionAt" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3114">
        <parameters>
          <parameter name="Rect" type="TRect"/>
        </parameters>
      </procedure>
      <procedure name="PositionAtCursor" visibility="public" file="Vcl.Controls.pas" line="3115">
      </procedure>
      <property name="HintParent" visibility="public" read="FHintParent" write="FHintParent" type="TCustomHint" file="Vcl.Controls.pas" line="3116"/>
      <property name="PopAbove" visibility="public" read="FPopAbove" type="Boolean" file="Vcl.Controls.pas" line="3117"/>
      <property name="Title" visibility="public" read="FTitle" type="string" default="0" file="Vcl.Controls.pas" line="3118"/>
      <property name="Description" visibility="public" read="FDescription" type="string" default="0" file="Vcl.Controls.pas" line="3119"/>
      <property name="ImageIndex" visibility="public" read="FImageIndex" type="TImageIndex" file="Vcl.Controls.pas" line="3120"/>
    </members>
  </class>
  <class name="TCustomHintShowHideThread" file="Vcl.Controls.pas" line="3123">
    <ancestor name="TThread" namespace="System.Classes">
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="Destroy@" visibility="class private" procflags="class destructor noself">
      </methodref>
      <methodref name="CallOnTerminate" visibility="private">
      </methodref>
      <methodref name="Synchronize" visibility="private" procflags="class overload">
      </methodref>
      <methodref name="GetCurrentThread" visibility="private" procflags="static">
      </methodref>
      <methodref name="GetIsSingleProcessor" visibility="private" procflags="static inline">
      </methodref>
      <methodref name="InternalStart" visibility="private">
      </methodref>
      <methodref name="GetPriority" visibility="private" symflags="platform">
      </methodref>
      <methodref name="SetPriority" visibility="private" symflags="platform">
      </methodref>
      <methodref name="SetSuspended" visibility="private">
      </methodref>
      <methodref name="CheckThreadError" visibility="protected" procflags="overload">
      </methodref>
      <methodref name="CheckThreadError" visibility="protected" procflags="overload">
      </methodref>
      <methodref name="DoTerminate" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="TerminatedSet" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Execute" visibility="protected" procflags="abstract virtual">
      </methodref>
      <methodref name="Queue" visibility="protected" procflags="overload inline">
      </methodref>
      <methodref name="Synchronize" visibility="protected" procflags="overload inline">
      </methodref>
      <methodref name="Queue" visibility="protected" procflags="overload inline">
      </methodref>
      <methodref name="Synchronize" visibility="protected" procflags="overload inline">
      </methodref>
      <methodref name="SetFreeOnTerminate" visibility="protected">
      </methodref>
      <methodref name="ShutdownThread" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="InitializeExternalThreadsList" visibility="protected" procflags="class">
      </methodref>
      <propertyref name="ReturnValue" visibility="protected">
      </propertyref>
      <propertyref name="Terminated" visibility="protected">
      </propertyref>
      <methodref name="Create" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Create" visibility="public" procflags="constructor overload">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="CreateAnonymousThread" visibility="public" procflags="static">
      </methodref>
      <methodref name="AfterConstruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="Resume" visibility="public" symflags="deprecated">
      </methodref>
      <methodref name="Start" visibility="public">
      </methodref>
      <methodref name="Suspend" visibility="public" symflags="deprecated">
      </methodref>
      <methodref name="Terminate" visibility="public">
      </methodref>
      <methodref name="WaitFor" visibility="public">
      </methodref>
      <methodref name="CheckTerminated" visibility="public" procflags="static">
      </methodref>
      <methodref name="SetReturnValue" visibility="public" procflags="static">
      </methodref>
      <methodref name="Queue" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="Queue" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="RemoveQueuedEvents" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="StaticQueue" visibility="public" procflags="static" symflags="deprecated">
      </methodref>
      <methodref name="Synchronize" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="Synchronize" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="StaticSynchronize" visibility="public" procflags="static" symflags="deprecated">
      </methodref>
      <methodref name="ForceQueue" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="ForceQueue" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="RemoveQueuedEvents" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="RemoveQueuedEvents" visibility="public" procflags="static overload inline">
      </methodref>
      <methodref name="NameThreadForDebugging" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="NameThreadForDebugging" visibility="public" procflags="static overload">
      </methodref>
      <methodref name="SpinWait" visibility="public" procflags="static">
      </methodref>
      <methodref name="Sleep" visibility="public" procflags="static">
      </methodref>
      <methodref name="Yield" visibility="public" procflags="static">
      </methodref>
      <methodref name="GetSystemTimes" visibility="public" procflags="static">
      </methodref>
      <methodref name="GetCPUUsage" visibility="public" procflags="static">
      </methodref>
      <methodref name="GetTickCount" visibility="public" procflags="static">
      </methodref>
      <methodref name="GetTickCount64" visibility="public" procflags="static">
      </methodref>
      <methodref name="IsTimeout" visibility="public" procflags="static">
      </methodref>
      <propertyref name="ExternalThread" visibility="public">
      </propertyref>
      <propertyref name="FatalException" visibility="public">
      </propertyref>
      <propertyref name="FreeOnTerminate" visibility="public">
      </propertyref>
      <propertyref name="Finished" visibility="public">
      </propertyref>
      <propertyref name="Handle" visibility="public">
      </propertyref>
      <propertyref name="Priority" visibility="public">
      </propertyref>
      <propertyref name="Started" visibility="public">
      </propertyref>
      <propertyref name="Suspended" visibility="public">
      </propertyref>
      <propertyref name="ThreadID" visibility="public">
      </propertyref>
      <eventref name="OnTerminate" visibility="public">
      </eventref>
      <propertyref name="Current" visibility="public">
      </propertyref>
      <propertyref name="CurrentThread" visibility="public">
      </propertyref>
      <propertyref name="ProcessorCount" visibility="public">
      </propertyref>
      <propertyref name="IsSingleProcessor" visibility="public">
      </propertyref>
      <propertyref name="OnSynchronize" visibility="public">
      </propertyref>
      <ancestor name="TObject" namespace="System">
        <methodref name="Create" visibility="public" procflags="constructor">
        </methodref>
        <methodref name="Free" visibility="public">
        </methodref>
        <methodref name="DisposeOf" visibility="public" procflags="inline">
        </methodref>
        <methodref name="InitInstance" visibility="public" procflags="class">
        </methodref>
        <methodref name="CleanupInstance" visibility="public">
        </methodref>
        <methodref name="ClassType" visibility="public" procflags="inline">
        </methodref>
        <methodref name="ClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassNameIs" visibility="public" procflags="class">
        </methodref>
        <methodref name="ClassParent" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="ClassInfo" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InstanceSize" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="InheritsFrom" visibility="public" procflags="class">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodAddress" visibility="public" procflags="class overload">
        </methodref>
        <methodref name="MethodName" visibility="public" procflags="class">
        </methodref>
        <methodref name="QualifiedClassName" visibility="public" procflags="class">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="FieldAddress" visibility="public" procflags="overload">
        </methodref>
        <methodref name="GetInterface" visibility="public">
        </methodref>
        <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
        </methodref>
        <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
        </methodref>
        <methodref name="UnitName" visibility="public" procflags="class">
        </methodref>
        <methodref name="UnitScope" visibility="public" procflags="class">
        </methodref>
        <methodref name="Equals" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetHashCode" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="ToString" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="AfterConstruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Dispatch" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="DefaultHandler" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="NewInstance" visibility="public" procflags="class virtual">
        </methodref>
        <methodref name="FreeInstance" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor virtual">
        </methodref>
        <methodref name="GetDisposed" visibility="protected" procflags="inline">
        </methodref>
        <methodref name="CheckDisposed" visibility="protected" procflags="inline">
        </methodref>
        <propertyref name="Disposed" visibility="protected">
        </propertyref>
      </ancestor>
    </ancestor>
    <members>
      <field name="FHintWindowQueue" type="TThreadList" visibility="private" size="4" offset="40" file="Vcl.Controls.pas" line="3125"/>
      <field name="FHintObject" type="TCustomHint" visibility="private" size="4" offset="44" file="Vcl.Controls.pas" line="3126"/>
      <field name="FHideHint" type="Boolean" visibility="private" size="1" offset="48" file="Vcl.Controls.pas" line="3127"/>
      <field name="FActive" type="Boolean" visibility="private" size="1" offset="49" file="Vcl.Controls.pas" line="3128"/>
      <field name="FDisplayTime" type="Cardinal" visibility="private" size="4" offset="52" file="Vcl.Controls.pas" line="3129"/>
      <field name="FWaitEvent" type="TEvent" visibility="private" size="4" offset="56" file="Vcl.Controls.pas" line="3130"/>
      <procedure name="QueHintWindow" visibility="private" file="Vcl.Controls.pas" line="3131">
        <parameters>
          <parameter name="Value" type="TCustomHintWindow"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="3133">
        <parameters>
          <parameter name="Hint" type="TCustomHintWindow"/>
          <parameter name="HintObject" type="TCustomHint"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="3134">
        <parameters>
        </parameters>
      </destructor>
      <procedure name="ResumeWork" visibility="public" file="Vcl.Controls.pas" line="3135">
      </procedure>
      <procedure name="Execute" visibility="public" procflags="override" file="Vcl.Controls.pas" line="3136">
      </procedure>
      <procedure name="HideHint" visibility="public" file="Vcl.Controls.pas" line="3137">
      </procedure>
    </members>
  </class>
  <class name="TCustomHint" file="Vcl.Controls.pas" line="3140">
    <ancestor name="TComponent" namespace="System.Classes">
      <interfaces>
        <implements name="IInterfaceComponentReference"/>
        <implements name="IInterface"/>
      </interfaces>
      <methodref name="GetComObject" visibility="private">
      </methodref>
      <methodref name="GetComponent" visibility="private">
      </methodref>
      <methodref name="GetComponentCount" visibility="private">
      </methodref>
      <methodref name="GetComponentIndex" visibility="private">
      </methodref>
      <methodref name="Insert" visibility="private">
      </methodref>
      <methodref name="ReadLeft" visibility="private">
      </methodref>
      <methodref name="ReadTop" visibility="private">
      </methodref>
      <methodref name="Remove" visibility="private">
      </methodref>
      <methodref name="RemoveNotification" visibility="private">
      </methodref>
      <methodref name="SetComponentIndex" visibility="private">
      </methodref>
      <methodref name="SetReference" visibility="private">
      </methodref>
      <methodref name="WriteLeft" visibility="private">
      </methodref>
      <methodref name="WriteTop" visibility="private">
      </methodref>
      <methodref name="IntfGetComponent" visibility="private">
      </methodref>
      <methodref name="DoGetDeltaStreams" visibility="private">
      </methodref>
      <methodref name="ReadDeltaStream" visibility="private">
      </methodref>
      <methodref name="ReadDeltaState" visibility="private">
      </methodref>
      <methodref name="FindSortedComponent" visibility="private">
      </methodref>
      <methodref name="AddSortedComponent" visibility="private">
      </methodref>
      <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
      </methodref>
      <methodref name="Create@" visibility="class private" procflags="class constructor noself">
      </methodref>
      <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ChangeName" visibility="protected">
      </methodref>
      <methodref name="DefineProperties" visibility="protected" procflags="override">
      </methodref>
      <methodref name="GetChildren" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="GetOwner" visibility="protected" procflags="override">
      </methodref>
      <methodref name="Loaded" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="Notification" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="ReadState" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="CanObserve" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="GetObservers" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetAncestor" visibility="protected">
      </methodref>
      <methodref name="SetDesigning" visibility="protected">
      </methodref>
      <methodref name="SetInline" visibility="protected">
      </methodref>
      <methodref name="SetDesignInstance" visibility="protected">
      </methodref>
      <methodref name="SetName" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Updating" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="Updated" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
      </methodref>
      <methodref name="ValidateRename" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
      </methodref>
      <methodref name="WriteState" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="RemoveFreeNotifications" visibility="protected">
      </methodref>
      <methodref name="QueryInterface" visibility="protected" procflags="virtual">
      </methodref>
      <methodref name="_AddRef" visibility="protected">
      </methodref>
      <methodref name="_Release" visibility="protected">
      </methodref>
      <methodref name="GetTypeInfoCount" visibility="protected">
      </methodref>
      <methodref name="GetTypeInfo" visibility="protected">
      </methodref>
      <methodref name="GetIDsOfNames" visibility="protected">
      </methodref>
      <methodref name="Invoke" visibility="protected">
      </methodref>
      <eventref name="OnGetDeltaStreams" visibility="protected">
      </eventref>
      <methodref name="Create" visibility="public" procflags="constructor virtual">
      </methodref>
      <methodref name="Destroy" visibility="public" procflags="destructor override">
      </methodref>
      <methodref name="BeforeDestruction" visibility="public" procflags="override">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="BeginInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndInvoke" visibility="public" procflags="overload">
      </methodref>
      <methodref name="EndFunctionInvoke" visibility="public">
      </methodref>
      <methodref name="DestroyComponents" visibility="public">
      </methodref>
      <methodref name="Destroying" visibility="public">
      </methodref>
      <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="FindComponent" visibility="public">
      </methodref>
      <methodref name="FreeNotification" visibility="public">
      </methodref>
      <methodref name="RemoveFreeNotification" visibility="public">
      </methodref>
      <methodref name="FreeOnRelease" visibility="public">
      </methodref>
      <methodref name="GetEnumerator" visibility="public" procflags="inline">
      </methodref>
      <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="GetNamePath" visibility="public" procflags="override">
      </methodref>
      <methodref name="HasParent" visibility="public" procflags="dynamic">
      </methodref>
      <methodref name="InsertComponent" visibility="public">
      </methodref>
      <methodref name="RemoveComponent" visibility="public">
      </methodref>
      <methodref name="SetSubComponent" visibility="public">
      </methodref>
      <methodref name="SafeCallException" visibility="public" procflags="override">
      </methodref>
      <methodref name="UpdateAction" visibility="public" procflags="virtual">
      </methodref>
      <methodref name="IsImplementorOf" visibility="public">
      </methodref>
      <methodref name="ReferenceInterface" visibility="public">
      </methodref>
      <propertyref name="ComObject" visibility="public">
      </propertyref>
      <propertyref name="Components" visibility="public">
      </propertyref>
      <propertyref name="ComponentCount" visibility="public">
      </propertyref>
      <propertyref name="ComponentIndex" visibility="public">
      </propertyref>
      <propertyref name="ComponentState" visibility="public">
      </propertyref>
      <propertyref name="ComponentStyle" visibility="public">
      </propertyref>
      <propertyref name="DesignInfo" visibility="public">
      </propertyref>
      <propertyref name="Owner" visibility="public">
      </propertyref>
      <propertyref name="VCLComObject" visibility="public">
      </propertyref>
      <propertyref name="Observers" visibility="public">
      </propertyref>
      <propertyref name="Name" visibility="published">
      </propertyref>
      <propertyref name="Tag" visibility="published">
      </propertyref>
      <ancestor name="TPersistent" namespace="System.Classes">
        <methodref name="AssignError" visibility="private">
        </methodref>
        <methodref name="AssignTo" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="Assign" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="dynamic">
        </methodref>
        <ancestor name="TObject" namespace="System">
          <methodref name="Create" visibility="public" procflags="constructor">
          </methodref>
          <methodref name="Free" visibility="public">
          </methodref>
          <methodref name="DisposeOf" visibility="public" procflags="inline">
          </methodref>
          <methodref name="InitInstance" visibility="public" procflags="class">
          </methodref>
          <methodref name="CleanupInstance" visibility="public">
          </methodref>
          <methodref name="ClassType" visibility="public" procflags="inline">
          </methodref>
          <methodref name="ClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassNameIs" visibility="public" procflags="class">
          </methodref>
          <methodref name="ClassParent" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="ClassInfo" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InstanceSize" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="InheritsFrom" visibility="public" procflags="class">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodAddress" visibility="public" procflags="class overload">
          </methodref>
          <methodref name="MethodName" visibility="public" procflags="class">
          </methodref>
          <methodref name="QualifiedClassName" visibility="public" procflags="class">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="FieldAddress" visibility="public" procflags="overload">
          </methodref>
          <methodref name="GetInterface" visibility="public">
          </methodref>
          <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
          </methodref>
          <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
          </methodref>
          <methodref name="UnitName" visibility="public" procflags="class">
          </methodref>
          <methodref name="UnitScope" visibility="public" procflags="class">
          </methodref>
          <methodref name="Equals" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetHashCode" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="ToString" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="SafeCallException" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="AfterConstruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Dispatch" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="DefaultHandler" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="NewInstance" visibility="public" procflags="class virtual">
          </methodref>
          <methodref name="FreeInstance" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor virtual">
          </methodref>
          <methodref name="GetDisposed" visibility="protected" procflags="inline">
          </methodref>
          <methodref name="CheckDisposed" visibility="protected" procflags="inline">
          </methodref>
          <propertyref name="Disposed" visibility="protected">
          </propertyref>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <field name="FTitle" type="string" visibility="private" size="4" offset="64" file="Vcl.Controls.pas" line="3142"/>
      <field name="FDescription" type="string" visibility="private" size="4" offset="68" file="Vcl.Controls.pas" line="3143"/>
      <field name="FImages" type="TImageList" visibility="private" size="4" offset="72" file="Vcl.Controls.pas" line="3144"/>
      <field name="FImageIndex" type="TImageIndex" visibility="private" size="4" offset="76" file="Vcl.Controls.pas" line="3145"/>
      <field name="FStyle" type="TBalloonHintStyle" visibility="private" size="1" offset="80" file="Vcl.Controls.pas" line="3146"/>
      <field name="FAnimateThread" type="TCustomHintShowHideThread" visibility="private" size="4" offset="84" file="Vcl.Controls.pas" line="3147"/>
      <field name="FShowDelay" type="Cardinal" visibility="private" size="4" offset="88" file="Vcl.Controls.pas" line="3148"/>
      <field name="FShow" type="Boolean" visibility="private" size="1" offset="92" file="Vcl.Controls.pas" line="3149"/>
      <field name="FHideAfter" type="Integer" visibility="private" size="4" offset="96" file="Vcl.Controls.pas" line="3150"/>
      <field name="FLatestHintControl" type="TControl" visibility="private" size="4" offset="100" file="Vcl.Controls.pas" line="3151"/>
      <field name="FWorkComplete" type="Boolean" visibility="private" size="1" offset="104" file="Vcl.Controls.pas" line="3152"/>
      <function name="GetCurrentPPI" visibility="private" file="Vcl.Controls.pas" line="3153">
        <parameters>
          <retval type="Integer"/>
        </parameters>
      </function>
      <property name="WorkComplete" visibility="protected" read="FWorkComplete" type="Boolean" file="Vcl.Controls.pas" line="3155"/>
      <procedure name="ShowAnotherHint" visibility="protected" file="Vcl.Controls.pas" line="3156">
      </procedure>
      <procedure name="SetImages" visibility="protected" file="Vcl.Controls.pas" line="3157">
        <parameters>
          <parameter name="Value" type="TImageList"/>
        </parameters>
      </procedure>
      <procedure name="Notification" visibility="protected" procflags="override" file="Vcl.Controls.pas" line="3158">
        <parameters>
          <parameter name="AComponent" type="TComponent"/>
          <parameter name="Operation" type="TOperation"/>
        </parameters>
      </procedure>
      <constructor name="Create" visibility="public" file="Vcl.Controls.pas" line="3160">
        <parameters>
          <parameter name="AOwner" type="TComponent"/>
        </parameters>
      </constructor>
      <destructor name="Destroy" visibility="public" file="Vcl.Controls.pas" line="3161">
        <parameters>
        </parameters>
      </destructor>
      <property name="CurrentPPI" visibility="public" read="GetCurrentPPI" type="Integer" file="Vcl.Controls.pas" line="3162"/>
      <procedure name="ShowHint" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3163">
      </procedure>
      <procedure name="ShowHint" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3164">
        <parameters>
          <parameter name="Point" type="TPoint"/>
        </parameters>
      </procedure>
      <procedure name="ShowHint" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3165">
        <parameters>
          <parameter name="Rect" type="TRect"/>
        </parameters>
      </procedure>
      <procedure name="ShowHint" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3166">
        <parameters>
          <parameter name="Control" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="HideHint" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3167">
      </procedure>
      <procedure name="HideHint" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="3168">
        <parameters>
          <parameter name="HidingControl" type="TControl"/>
        </parameters>
      </procedure>
      <procedure name="PaintHint" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="3169">
        <parameters>
          <parameter name="HintWindow" type="TCustomHintWindow"/>
        </parameters>
      </procedure>
      <procedure name="NCPaintHint" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="3170">
        <parameters>
          <parameter name="HintWindow" type="TCustomHintWindow"/>
          <parameter name="DC" type="HDC"/>
        </parameters>
      </procedure>
      <procedure name="SetHintSize" visibility="public" procflags="virtual" file="Vcl.Controls.pas" line="3171">
        <parameters>
          <parameter name="HintWindow" type="TCustomHintWindow"/>
        </parameters>
      </procedure>
      <property name="ShowingHint" visibility="public" read="FShow" type="Boolean" file="Vcl.Controls.pas" line="3172"/>
      <property name="Title" visibility="public" read="FTitle" write="FTitle" type="string" default="0" file="Vcl.Controls.pas" line="3173"/>
      <property name="Description" visibility="public" read="FDescription" write="FDescription" type="string" default="0" file="Vcl.Controls.pas" line="3174"/>
      <property name="ImageIndex" visibility="public" read="FImageIndex" write="FImageIndex" type="TImageIndex" file="Vcl.Controls.pas" line="3175"/>
      <property name="Images" visibility="published" read="FImages" write="SetImages" type="TImageList" file="Vcl.Controls.pas" line="3177"/>
      <property name="Style" visibility="published" read="FStyle" write="FStyle" type="TBalloonHintStyle" default="1" file="Vcl.Controls.pas" line="3178"/>
      <property name="Delay" visibility="published" read="FShowDelay" write="FShowDelay" type="Cardinal" default="500" file="Vcl.Controls.pas" line="3179"/>
      <property name="HideAfter" visibility="published" read="FHideAfter" write="FHideAfter" type="Integer" default="-1" file="Vcl.Controls.pas" line="3180"/>
    </members>
  </class>
  <class name="TBalloonHint" file="Vcl.Controls.pas" line="3183">
    <ancestor name="TCustomHint" namespace="Vcl.Controls">
      <methodref name="GetCurrentPPI" visibility="private"/>
      <propertyref name="WorkComplete" visibility="protected"/>
      <methodref name="ShowAnotherHint" visibility="protected"/>
      <methodref name="SetImages" visibility="protected"/>
      <methodref name="Notification" visibility="protected" procflags="override"/>
      <methodref name="Create" visibility="public" procflags="constructor override"/>
      <methodref name="Destroy" visibility="public" procflags="destructor override"/>
      <propertyref name="CurrentPPI" visibility="public"/>
      <methodref name="ShowHint" visibility="public" procflags="overload"/>
      <methodref name="ShowHint" visibility="public" procflags="overload"/>
      <methodref name="ShowHint" visibility="public" procflags="overload"/>
      <methodref name="ShowHint" visibility="public" procflags="overload"/>
      <methodref name="HideHint" visibility="public" procflags="overload"/>
      <methodref name="HideHint" visibility="public" procflags="overload"/>
      <methodref name="PaintHint" visibility="public" procflags="virtual"/>
      <methodref name="NCPaintHint" visibility="public" procflags="virtual"/>
      <methodref name="SetHintSize" visibility="public" procflags="virtual"/>
      <propertyref name="ShowingHint" visibility="public"/>
      <propertyref name="Title" visibility="public"/>
      <propertyref name="Description" visibility="public"/>
      <propertyref name="ImageIndex" visibility="public"/>
      <propertyref name="Images" visibility="published"/>
      <propertyref name="Style" visibility="published"/>
      <propertyref name="Delay" visibility="published"/>
      <propertyref name="HideAfter" visibility="published"/>
      <ancestor name="TComponent" namespace="System.Classes">
        <interfaces>
          <implements name="IInterfaceComponentReference"/>
          <implements name="IInterface"/>
        </interfaces>
        <methodref name="GetComObject" visibility="private">
        </methodref>
        <methodref name="GetComponent" visibility="private">
        </methodref>
        <methodref name="GetComponentCount" visibility="private">
        </methodref>
        <methodref name="GetComponentIndex" visibility="private">
        </methodref>
        <methodref name="Insert" visibility="private">
        </methodref>
        <methodref name="ReadLeft" visibility="private">
        </methodref>
        <methodref name="ReadTop" visibility="private">
        </methodref>
        <methodref name="Remove" visibility="private">
        </methodref>
        <methodref name="RemoveNotification" visibility="private">
        </methodref>
        <methodref name="SetComponentIndex" visibility="private">
        </methodref>
        <methodref name="SetReference" visibility="private">
        </methodref>
        <methodref name="WriteLeft" visibility="private">
        </methodref>
        <methodref name="WriteTop" visibility="private">
        </methodref>
        <methodref name="IntfGetComponent" visibility="private">
        </methodref>
        <methodref name="DoGetDeltaStreams" visibility="private">
        </methodref>
        <methodref name="ReadDeltaStream" visibility="private">
        </methodref>
        <methodref name="ReadDeltaState" visibility="private">
        </methodref>
        <methodref name="FindSortedComponent" visibility="private">
        </methodref>
        <methodref name="AddSortedComponent" visibility="private">
        </methodref>
        <methodref name="RemoveSortedComponent" visibility="private" procflags="inline">
        </methodref>
        <methodref name="Create@" visibility="class private" procflags="class constructor noself">
        </methodref>
        <methodref name="AsyncSchedule" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ChangeName" visibility="protected">
        </methodref>
        <methodref name="DefineProperties" visibility="protected" procflags="override">
        </methodref>
        <methodref name="GetChildren" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetChildOwner" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetChildParent" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="GetOwner" visibility="protected" procflags="override">
        </methodref>
        <methodref name="Loaded" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="Notification" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetDeltaStreams" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="ReadState" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="CanObserve" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ObserverAdded" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="GetObservers" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetAncestor" visibility="protected">
        </methodref>
        <methodref name="SetDesigning" visibility="protected">
        </methodref>
        <methodref name="SetInline" visibility="protected">
        </methodref>
        <methodref name="SetDesignInstance" visibility="protected">
        </methodref>
        <methodref name="SetName" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="SetChildOrder" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="SetParentComponent" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Updating" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="Updated" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="UpdateRegistry" visibility="protected" procflags="class virtual">
        </methodref>
        <methodref name="ValidateRename" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="ValidateContainer" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="ValidateInsert" visibility="protected" procflags="dynamic">
        </methodref>
        <methodref name="WriteState" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="RemoveFreeNotifications" visibility="protected">
        </methodref>
        <methodref name="QueryInterface" visibility="protected" procflags="virtual">
        </methodref>
        <methodref name="_AddRef" visibility="protected">
        </methodref>
        <methodref name="_Release" visibility="protected">
        </methodref>
        <methodref name="GetTypeInfoCount" visibility="protected">
        </methodref>
        <methodref name="GetTypeInfo" visibility="protected">
        </methodref>
        <methodref name="GetIDsOfNames" visibility="protected">
        </methodref>
        <methodref name="Invoke" visibility="protected">
        </methodref>
        <eventref name="OnGetDeltaStreams" visibility="protected">
        </eventref>
        <methodref name="Create" visibility="public" procflags="constructor virtual">
        </methodref>
        <methodref name="Destroy" visibility="public" procflags="destructor override">
        </methodref>
        <methodref name="BeforeDestruction" visibility="public" procflags="override">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="BeginInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndInvoke" visibility="public" procflags="overload">
        </methodref>
        <methodref name="EndFunctionInvoke" visibility="public">
        </methodref>
        <methodref name="DestroyComponents" visibility="public">
        </methodref>
        <methodref name="Destroying" visibility="public">
        </methodref>
        <methodref name="ExecuteAction" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="FindComponent" visibility="public">
        </methodref>
        <methodref name="FreeNotification" visibility="public">
        </methodref>
        <methodref name="RemoveFreeNotification" visibility="public">
        </methodref>
        <methodref name="FreeOnRelease" visibility="public">
        </methodref>
        <methodref name="GetEnumerator" visibility="public" procflags="inline">
        </methodref>
        <methodref name="GetParentComponent" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="GetNamePath" visibility="public" procflags="override">
        </methodref>
        <methodref name="HasParent" visibility="public" procflags="dynamic">
        </methodref>
        <methodref name="InsertComponent" visibility="public">
        </methodref>
        <methodref name="RemoveComponent" visibility="public">
        </methodref>
        <methodref name="SetSubComponent" visibility="public">
        </methodref>
        <methodref name="SafeCallException" visibility="public" procflags="override">
        </methodref>
        <methodref name="UpdateAction" visibility="public" procflags="virtual">
        </methodref>
        <methodref name="IsImplementorOf" visibility="public">
        </methodref>
        <methodref name="ReferenceInterface" visibility="public">
        </methodref>
        <propertyref name="ComObject" visibility="public">
        </propertyref>
        <propertyref name="Components" visibility="public">
        </propertyref>
        <propertyref name="ComponentCount" visibility="public">
        </propertyref>
        <propertyref name="ComponentIndex" visibility="public">
        </propertyref>
        <propertyref name="ComponentState" visibility="public">
        </propertyref>
        <propertyref name="ComponentStyle" visibility="public">
        </propertyref>
        <propertyref name="DesignInfo" visibility="public">
        </propertyref>
        <propertyref name="Owner" visibility="public">
        </propertyref>
        <propertyref name="VCLComObject" visibility="public">
        </propertyref>
        <propertyref name="Observers" visibility="public">
        </propertyref>
        <propertyref name="Name" visibility="published">
        </propertyref>
        <propertyref name="Tag" visibility="published">
        </propertyref>
        <ancestor name="TPersistent" namespace="System.Classes">
          <methodref name="AssignError" visibility="private">
          </methodref>
          <methodref name="AssignTo" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="DefineProperties" visibility="protected" procflags="virtual">
          </methodref>
          <methodref name="GetOwner" visibility="protected" procflags="dynamic">
          </methodref>
          <methodref name="Destroy" visibility="public" procflags="destructor override">
          </methodref>
          <methodref name="Assign" visibility="public" procflags="virtual">
          </methodref>
          <methodref name="GetNamePath" visibility="public" procflags="dynamic">
          </methodref>
          <ancestor name="TObject" namespace="System">
            <methodref name="Create" visibility="public" procflags="constructor">
            </methodref>
            <methodref name="Free" visibility="public">
            </methodref>
            <methodref name="DisposeOf" visibility="public" procflags="inline">
            </methodref>
            <methodref name="InitInstance" visibility="public" procflags="class">
            </methodref>
            <methodref name="CleanupInstance" visibility="public">
            </methodref>
            <methodref name="ClassType" visibility="public" procflags="inline">
            </methodref>
            <methodref name="ClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassNameIs" visibility="public" procflags="class">
            </methodref>
            <methodref name="ClassParent" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="ClassInfo" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InstanceSize" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="InheritsFrom" visibility="public" procflags="class">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodAddress" visibility="public" procflags="class overload">
            </methodref>
            <methodref name="MethodName" visibility="public" procflags="class">
            </methodref>
            <methodref name="QualifiedClassName" visibility="public" procflags="class">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="FieldAddress" visibility="public" procflags="overload">
            </methodref>
            <methodref name="GetInterface" visibility="public">
            </methodref>
            <methodref name="GetInterfaceEntry" visibility="public" procflags="class">
            </methodref>
            <methodref name="GetInterfaceTable" visibility="public" procflags="class inline">
            </methodref>
            <methodref name="UnitName" visibility="public" procflags="class">
            </methodref>
            <methodref name="UnitScope" visibility="public" procflags="class">
            </methodref>
            <methodref name="Equals" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="GetHashCode" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="ToString" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="SafeCallException" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="AfterConstruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="BeforeDestruction" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Dispatch" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="DefaultHandler" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="NewInstance" visibility="public" procflags="class virtual">
            </methodref>
            <methodref name="FreeInstance" visibility="public" procflags="virtual">
            </methodref>
            <methodref name="Destroy" visibility="public" procflags="destructor virtual">
            </methodref>
            <methodref name="GetDisposed" visibility="protected" procflags="inline">
            </methodref>
            <methodref name="CheckDisposed" visibility="protected" procflags="inline">
            </methodref>
            <propertyref name="Disposed" visibility="protected">
            </propertyref>
          </ancestor>
        </ancestor>
      </ancestor>
    </ancestor>
    <members>
      <procedure name="PaintHint" visibility="public" procflags="override" file="Vcl.Controls.pas" line="3185">
        <parameters>
          <parameter name="HintWindow" type="TCustomHintWindow"/>
        </parameters>
      </procedure>
      <procedure name="SetHintSize" visibility="public" procflags="override" file="Vcl.Controls.pas" line="3186">
        <parameters>
          <parameter name="HintWindow" type="TCustomHintWindow"/>
        </parameters>
      </procedure>
    </members>
  </class>
  <helper name="TMouseHelper" for="TMouse" file="Vcl.Controls.pas" line="3189">
    <members>
      <field name="FWheelRouting" type="TWheelRouting" visibility="private" varflags="class" file="Vcl.Controls.pas" line="3191"/>
      <procedure name="GetWheelData" visibility="protected" procflags="class helper" file="Vcl.Controls.pas" line="3193">
      </procedure>
      <property name="WheelRouting" visibility="public" read="FWheelRouting" type="TWheelRouting" file="Vcl.Controls.pas" line="3201">
        <devnotes>
           <summary>
             WheelRouting gives the value used to indicate how Windows will treat mouse wheel messages,
             whether they go to the focused application, the application under the mouse cursor etc.
             This can be changed in the Windows UI in the Mouse settings applet using the
             &quot;Scroll inactive windows when I hover over them&quot; setting.
           </summary>
        </devnotes>
      </property>
    </members>
  </helper>
  <const name="cImageMargin" type="Integer" file="Vcl.Controls.pas" line="3205">
    <value>
      $4
    </value>
  </const>
  <const name="cTextVerticalMargin" type="Integer" file="Vcl.Controls.pas" line="3206">
    <value>
      $4
    </value>
  </const>
  <const name="cTextHorizontalMargin" type="Integer" file="Vcl.Controls.pas" line="3207">
    <value>
      $4
    </value>
  </const>
  <const name="cBalloonStemHeight" type="Integer" file="Vcl.Controls.pas" line="3208">
    <value>
      $A
    </value>
  </const>
  <const name="cEdgeRadius" type="Integer" file="Vcl.Controls.pas" line="3209">
    <value>
      $4
    </value>
  </const>
  <variable name="Mouse" type="TMouse" file="Vcl.Controls.pas" line="3212"/>
  <variable name="AnimateWindowProc" type="TAnimateWindowProc" visibility="public" file="Vcl.Controls.pas" line="3213"/>
  <variable name="DefaultDockTreeClass" type="TDockTreeClass" visibility="public" file="Vcl.Controls.pas" line="3249"/>
  <variable name="CreationControl" type="TWinControl" visibility="public" file="Vcl.Controls.pas" line="3251"/>
  <variable name="IsVCLControlHook" type="function(Handle: HWND): Boolean;" file="Vcl.Controls.pas" line="3252"/>
  <const name="CTL3D_ALL" type="Integer" file="Vcl.Controls.pas" line="3262">
    <value>
      $FFFF
    </value>
  </const>
  <const name="NullDockSite" type="TWinControl" file="Vcl.Controls.pas" line="3264">
    <value>
      $FFFFFFFF
    </value>
  </const>
  <const name="AnchorAlign" type="array[0..6] of TAnchors" visibility="public" file="Vcl.Controls.pas" line="3268"/>
  <variable name="NewStyleControls" type="Boolean" file="Vcl.Controls.pas" line="3289"/>
  <function name="CheckPerMonitorV2SupportForWindow" visibility="public" file="Vcl.Controls.pas" line="3352">
    <parameters>
      <parameter name="AHandle" type="HWND"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="GetSystemMetricsForWindow" visibility="public" file="Vcl.Controls.pas" line="3358">
    <parameters>
      <parameter name="nIndex" type="Integer"/>
      <parameter name="AHandle" type="HWND"/>
      <retval type="Integer"/>
    </parameters>
  </function>
  <function name="AdjustWindowRectExForWindow" visibility="public" file="Vcl.Controls.pas" line="3367">
    <parameters>
      <parameter name="lpRect" type="TRect" paramflags="var"/>
      <parameter name="dwStyle" type="Cardinal"/>
      <parameter name="bMenu" type="LongBool"/>
      <parameter name="dwExStyle" type="Cardinal"/>
      <parameter name="AHandle" type="HWND"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="SystemParametersInfoForWindow" visibility="public" file="Vcl.Controls.pas" line="3376">
    <parameters>
      <parameter name="uiAction" type="Cardinal"/>
      <parameter name="uiParam" type="Cardinal"/>
      <parameter name="pvParam" type="Pointer"/>
      <parameter name="fWinIni" type="Cardinal"/>
      <parameter name="AHandle" type="HWND"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="MouseOriginToShiftState" visibility="public" file="Vcl.Controls.pas" line="3388">
    <parameters>
      <retval type="TShiftState"/>
    </parameters>
  </function>
  <procedure name="InvalidControlOperation" visibility="public" file="Vcl.Controls.pas" line="3405">
    <parameters>
      <parameter name="AMessage" type="PResStringRec"/>
      <parameter name="AControl" type="TControl"/>
    </parameters>
  </procedure>
  <procedure name="ChangeBiDiModeAlignment" visibility="public" file="Vcl.Controls.pas" line="3659">
    <parameters>
      <parameter name="Alignment" type="TAlignment" paramflags="var"/>
    </parameters>
  </procedure>
  <function name="InitWndProc" visibility="public" callconv="stdcall" file="Vcl.Controls.pas" line="3669">
    <parameters>
      <parameter name="HWindow" type="HWND"/>
      <parameter name="Msg" type="Cardinal"/>
      <parameter name="WParam" type="NativeUInt"/>
      <parameter name="LParam" type="NativeInt"/>
      <retval type="NativeInt"/>
    </parameters>
  </function>
  <function name="FindControl" visibility="public" file="Vcl.Controls.pas" line="3773">
    <parameters>
      <parameter name="Handle" type="HWND"/>
      <retval type="TWinControl"/>
    </parameters>
  </function>
  <function name="IsVCLControl" visibility="public" file="Vcl.Controls.pas" line="3789">
    <parameters>
      <parameter name="Handle" type="HWND"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="SendAppMessage" visibility="public" file="Vcl.Controls.pas" line="3801">
    <parameters>
      <parameter name="Msg" type="Cardinal"/>
      <parameter name="WParam" type="NativeUInt"/>
      <parameter name="LParam" type="NativeInt"/>
      <retval type="NativeInt"/>
    </parameters>
  </function>
  <function name="CursorToString" visibility="public" file="Vcl.Controls.pas" line="3810">
    <parameters>
      <parameter name="Cursor" type="TCursor"/>
      <retval type="string"/>
    </parameters>
  </function>
  <function name="StringToCursor" visibility="public" file="Vcl.Controls.pas" line="3815">
    <parameters>
      <parameter name="S" type="string" paramflags="const"/>
      <retval type="TCursor"/>
    </parameters>
  </function>
  <procedure name="GetCursorValues" visibility="public" file="Vcl.Controls.pas" line="3820">
    <parameters>
      <parameter name="Proc" type="TGetStrProc"/>
    </parameters>
  </procedure>
  <function name="CursorToIdent" visibility="public" file="Vcl.Controls.pas" line="3825">
    <parameters>
      <parameter name="Cursor" type="Integer"/>
      <parameter name="Ident" type="string" paramflags="var"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="IdentToCursor" visibility="public" file="Vcl.Controls.pas" line="3830">
    <parameters>
      <parameter name="Ident" type="string" paramflags="const"/>
      <parameter name="Cursor" type="Integer" paramflags="var"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="GetShortHint" visibility="public" file="Vcl.Controls.pas" line="3835">
    <parameters>
      <parameter name="Hint" type="string" paramflags="const"/>
      <retval type="string"/>
    </parameters>
  </function>
  <function name="GetLongHint" visibility="public" file="Vcl.Controls.pas" line="3845">
    <parameters>
      <parameter name="Hint" type="string" paramflags="const"/>
      <retval type="string"/>
    </parameters>
  </function>
  <procedure name="PerformEraseBackground" visibility="public" file="Vcl.Controls.pas" line="3855">
    <parameters>
      <parameter name="Control" type="TControl"/>
      <parameter name="DC" type="HDC"/>
    </parameters>
  </procedure>
  <procedure name="PerformBufferedPrintClient" visibility="public" file="Vcl.Controls.pas" line="3865">
    <parameters>
      <parameter name="Handle" type="HWND"/>
      <parameter name="Rect" type="TRect" paramflags="const"/>
    </parameters>
  </procedure>
  <function name="GetCaptureControl" visibility="public" file="Vcl.Controls.pas" line="3890">
    <parameters>
      <retval type="TControl"/>
    </parameters>
  </function>
  <procedure name="SetCaptureControl" visibility="public" file="Vcl.Controls.pas" line="3898">
    <parameters>
      <parameter name="Control" type="TControl"/>
    </parameters>
  </procedure>
  <function name="IsDragObject" visibility="public" file="Vcl.Controls.pas" line="4073">
    <parameters>
      <parameter name="Sender" type="TObject"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <procedure name="DragDone" visibility="public" file="Vcl.Controls.pas" line="4944">
    <parameters>
      <parameter name="Drop" type="Boolean"/>
    </parameters>
  </procedure>
  <procedure name="CancelDrag" visibility="public" file="Vcl.Controls.pas" line="5072">
  </procedure>
  <function name="FindVCLWindow" visibility="public" file="Vcl.Controls.pas" line="5078">
    <parameters>
      <parameter name="Pos" type="TPoint" paramflags="const"/>
      <retval type="TWinControl"/>
    </parameters>
  </function>
  <function name="FindDragTarget" visibility="public" file="Vcl.Controls.pas" line="5092">
    <parameters>
      <parameter name="Pos" type="TPoint" paramflags="const"/>
      <parameter name="AllowDisabled" type="Boolean"/>
      <retval type="TControl"/>
    </parameters>
  </function>
  <procedure name="MoveWindowOrg" visibility="public" file="Vcl.Controls.pas" line="5145">
    <parameters>
      <parameter name="DC" type="HDC"/>
      <parameter name="DX" type="Integer"/>
      <parameter name="DY" type="Integer"/>
    </parameters>
  </procedure>
  <procedure name="SetTextInputPanelStatus" visibility="public" file="Vcl.Controls.pas" line="14157">
    <parameters>
      <parameter name="Control" type="TWinControl"/>
      <parameter name="OpenTIP" type="Boolean"/>
    </parameters>
  </procedure>
  <function name="Win32NLSEnableIME" visibility="public" file="Vcl.Controls.pas" line="16731" symflags="deprecated">
    <parameters>
      <parameter name="hWnd" type="HWND"/>
      <parameter name="Enable" type="Boolean"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <procedure name="SetImeMode" visibility="public" file="Vcl.Controls.pas" line="16739">
    <parameters>
      <parameter name="hWnd" type="HWND"/>
      <parameter name="Mode" type="TImeMode"/>
    </parameters>
  </procedure>
  <procedure name="SetImeName" visibility="public" file="Vcl.Controls.pas" line="16805">
    <parameters>
      <parameter name="Name" type="TImeName"/>
    </parameters>
  </procedure>
  <function name="Imm32GetContext" visibility="public" file="Vcl.Controls.pas" line="16820">
    <parameters>
      <parameter name="hWnd" type="HWND"/>
      <retval type="Integer"/>
    </parameters>
  </function>
  <function name="Imm32ReleaseContext" visibility="public" file="Vcl.Controls.pas" line="16828">
    <parameters>
      <parameter name="hWnd" type="HWND"/>
      <parameter name="hImc" type="Integer"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32GetConversionStatus" visibility="public" file="Vcl.Controls.pas" line="16836">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="Conversion" type="Cardinal" paramflags="var"/>
      <parameter name="Sentence" type="Cardinal" paramflags="var"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32SetConversionStatus" visibility="public" file="Vcl.Controls.pas" line="16844">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="Conversion" type="Cardinal"/>
      <parameter name="Sentence" type="Cardinal"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32SetOpenStatus" visibility="public" file="Vcl.Controls.pas" line="16852">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="fOpen" type="Boolean"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32SetCompositionWindow" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="16860">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="lpCompForm" type="tagCOMPOSITIONFORM"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32SetCompositionWindow" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="16869" symflags="deprecated">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="lpCompForm" type="PCompositionForm"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32SetCompositionFont" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="16875">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="lpLogfont" type="tagLOGFONTW" paramflags="var"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32SetCompositionFont" visibility="public" procflags="overload" file="Vcl.Controls.pas" line="16884" symflags="deprecated">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="lpLogfont" type="PLogFontW"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32GetCompositionString" visibility="public" file="Vcl.Controls.pas" line="16893">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="dWord1" type="Cardinal"/>
      <parameter name="lpBuf" type="Pointer"/>
      <parameter name="dwBufLen" type="Cardinal"/>
      <retval type="Integer"/>
    </parameters>
  </function>
  <function name="Imm32IsIME" visibility="public" file="Vcl.Controls.pas" line="16902">
    <parameters>
      <parameter name="hKl" type="HKL"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="Imm32NotifyIME" visibility="public" file="Vcl.Controls.pas" line="16910">
    <parameters>
      <parameter name="hImc" type="Integer"/>
      <parameter name="dwAction" type="Cardinal"/>
      <parameter name="dwIndex" type="Cardinal"/>
      <parameter name="dwValue" type="Cardinal"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="IsPositiveResult" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="16920">
    <parameters>
      <parameter name="AModalResult" type="TModalResult" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="IsNegativeResult" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="16925">
    <parameters>
      <parameter name="AModalResult" type="TModalResult" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="IsAbortResult" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="16930">
    <parameters>
      <parameter name="AModalResult" type="TModalResult" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="IsAnAllResult" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="16935">
    <parameters>
      <parameter name="AModalResult" type="TModalResult" paramflags="const"/>
      <retval type="Boolean"/>
    </parameters>
  </function>
  <function name="StripAllFromResult" visibility="public" procflags="inline" file="Vcl.Controls.pas" line="16940">
    <parameters>
      <parameter name="AModalResult" type="TModalResult" paramflags="const"/>
      <retval type="TModalResult"/>
    </parameters>
  </function>
</namespace>